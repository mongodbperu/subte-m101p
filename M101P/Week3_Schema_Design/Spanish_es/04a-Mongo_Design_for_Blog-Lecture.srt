1
00:00:00,000 --> 00:00:00,430

2
00:00:00,430 --> 00:00:03,700
Volvamos al proyecto de blog
que hablamos

3
00:00:03,700 --> 00:00:06,840
en anteriores lecciones y veamos
el diseño de esquema que

4
00:00:06,840 --> 00:00:08,990
usaremos para esto.

5
00:00:08,990 --> 00:00:12,560
Así que éste es el blog que está
ejecutándose en mi computadora.

6
00:00:12,560 --> 00:00:15,820
Y estoy buscando la página de
un post de prueba en particular que

7
00:00:15,820 --> 00:00:16,850
acabo de añadir.

8
00:00:16,850 --> 00:00:20,350
Tengo un post con el título
"This is a test post".

9
00:00:20,350 --> 00:00:21,720
Y este es el cuerpo de él.

10
00:00:21,720 --> 00:00:24,030
Y está clasificado en
estas tres etiquetas.

11
00:00:24,030 --> 00:00:27,470
Y, por aquí, puedo añadir
un comentario si deseo.

12
00:00:27,470 --> 00:00:31,570
Ahora, si voy aquí, en MongoDB,
lo que he hecho es que

13
00:00:31,570 --> 00:00:35,210
he mostrado el documento
que corresponde

14
00:00:35,210 --> 00:00:36,640
a la entrada de blog.

15
00:00:36,640 --> 00:00:38,600
Y deseo llevarte a través
de él muy rápidamente.

16
00:00:38,600 --> 00:00:43,680
Y si hablamos que si satisface
o no algunos de estos

17
00:00:43,680 --> 00:00:47,600
objetivos de normalización
del mundo relacional.

18
00:00:47,600 --> 00:00:51,990
Así que cada documento de éstos
tiene un ID y un autor.

19
00:00:51,990 --> 00:00:53,620
Yo escribí este post de blog.

20
00:00:53,620 --> 00:00:56,290
Hay un cuerpo: "this
is a test body".

21
00:00:56,290 --> 00:00:59,960
Hay un título que está aquí
abajo: "this is a test post".

22
00:00:59,960 --> 00:01:02,260
Éstas son ordenadas de manera extraña
porque se pusieron en

23
00:01:02,260 --> 00:01:05,090
un programa Python y no
mantiene los diccionarios

24
00:01:05,090 --> 00:01:07,300
ordenados en ninguna forma particular.

25
00:01:07,300 --> 00:01:10,760
Ésta es la fecha en la que
el post fue publicado.

26
00:01:10,760 --> 00:01:13,050
Y éste es el slug, el enlace
permanente, este será

27
00:01:13,050 --> 00:01:14,820
utilizado para mostrar la URL.

28
00:01:14,820 --> 00:01:19,630
Aquí están las etiquetas, que son
un array de diferentes etiquetas

29
00:01:19,630 --> 00:01:21,720
en las que este post fue
clasificado.

30
00:01:21,720 --> 00:01:24,110
Y luego están los comentarios
que la gente deja en el blog.

31
00:01:24,110 --> 00:01:29,040
Es un array de documentos
con un

32
00:01:29,040 --> 00:01:30,510
cuerpo, correo y autor.

33
00:01:30,510 --> 00:01:35,530
Entonces la pregunta es, en primer
lugar, ¿esto es susceptible al

34
00:01:35,530 --> 00:01:39,330
tipo de anomalías de modificación ocasionadas
por la redundancia de datos

35
00:01:39,330 --> 00:01:42,810
que vemos en esa tabla
denormalizada del

36
00:01:42,810 --> 00:01:43,810
mundo relacional?

37
00:01:43,810 --> 00:01:50,150
Y la respuesta mayormente es no,
en el sentido que, el ID del

38
00:01:50,150 --> 00:01:53,890
autor aparece sólo una vez.

39
00:01:53,890 --> 00:01:58,260
Y usamos esto como el ID
para la tabla de usuarios

40
00:01:58,260 --> 00:02:03,090
Así que el supuesto en nuestro
diseño de blog es que el nombre

41
00:02:03,090 --> 00:02:05,890
del autor, el nombre de usuario,
es inmutable.

42
00:02:05,890 --> 00:02:07,560
Si deseamos cambiar eso
tendríamos que usar un

43
00:02:07,560 --> 00:02:09,639
ID de usuario numérico.

44
00:02:09,639 --> 00:02:13,240
Ahora, esto parece tener
alguna redundancia de datos.

45
00:02:13,240 --> 00:02:16,420
Y en cierto sentido lo hace, excepto
que estos  usuarios que dejan

46
00:02:16,420 --> 00:02:18,640
comentarios en nuestro blog
no están registrados.

47
00:02:18,640 --> 00:02:20,680
Y así, podrían dejar
cualquier dirección de

48
00:02:20,680 --> 00:02:21,430
correo que deseen.

49
00:02:21,430 --> 00:02:23,680
De esta forma, si el mismo usuario deja
dos comentarios, él podría dejar dos

50
00:02:23,680 --> 00:02:24,620
direcciones de correo diferentes.

51
00:02:24,620 --> 00:02:26,930
Así que no está buscando
necesariamente mantener estos

52
00:02:26,930 --> 00:02:27,520
consistentes.

53
00:02:27,520 --> 00:02:30,050
Por lo tanto, yo diría que esto
no es una redundancia de

54
00:02:30,050 --> 00:02:31,740
datos, en este caso.

55
00:02:31,740 --> 00:02:35,580
Y estas etiquetas, que están aquí
como cadenas y que además no están

56
00:02:35,580 --> 00:02:37,620
en la lista, ya sea redundantemente.

57
00:02:37,620 --> 00:02:41,320
Así, en este caso, a pesar que
hemos embebido mucha

58
00:02:41,320 --> 00:02:44,270
información que estaría en
múltiples tablas normalizadas en

59
00:02:44,270 --> 00:02:46,000
la tercera forma en el mundo
relacional, hemos

60
00:02:46,000 --> 00:02:48,230
embebido los datos en
un solo documento.

61
00:02:48,230 --> 00:02:52,250
En realidad no hemos violado
ese objetivo de mantener los datos

62
00:02:52,250 --> 00:02:54,600
consistentes evitando
redundancias.

63
00:02:54,600 --> 00:02:57,070
Ahora, uno de los otros objetivos,
cuando estamos diseñando un

64
00:02:57,070 --> 00:03:00,070
esquema, por supuesto, es
optimizar los patrones de acceso a

65
00:03:00,070 --> 00:03:02,290
datos que verás
en la aplicación.

66
00:03:02,290 --> 00:03:06,190
Y lo hacemos muy bien, en
esto caso, porque cuando

67
00:03:06,190 --> 00:03:09,490
sacamos el documento de la esta
colección para mostrarlo en el

68
00:03:09,490 --> 00:03:13,120
blog, tenemos casi toda
la información que necesitamos para

69
00:03:13,120 --> 00:03:15,800
mostrarla al usuario.

70
00:03:15,800 --> 00:03:17,260
Tenemos la fecha
en la que fue publicado.

71
00:03:17,260 --> 00:03:18,770
Contamos con el nombre de usuario.

72
00:03:18,770 --> 00:03:19,445
Tenemos los comentarios.

73
00:03:19,445 --> 00:03:22,400
Tenemos todo lo que
necesitamos en el mismo lugar.

74
00:03:22,400 --> 00:03:24,850
Y, por cierto, aquí mismo,
abajo, esto es lo que hay en

75
00:03:24,850 --> 00:03:27,385
la colección de usuarios, que es
sólo mi usuario, está un

76
00:03:27,385 --> 00:03:30,870
"_id" de mí, mi nombre,
"Erlichson", y luego una

77
00:03:30,870 --> 00:03:32,570
contraseña encriptada por aquí.

78
00:03:32,570 --> 00:03:35,450
Y esas son las dos principales
colecciones que se usan para

79
00:03:35,450 --> 00:03:36,750
organizar el blog.

80
00:03:36,750 --> 00:03:38,730
Y vas a hacer algo
de trabajo en el blog

81
00:03:38,730 --> 00:03:40,440
esta semana para tu tarea,
y ésta es la forma en la que

82
00:03:40,440 --> 00:03:41,650
se espera insertar los datos.

83
00:03:41,650 --> 00:03:44,780

Por ello es una buena idea echar
un vistazo aquí.

84
00:03:44,780 --> 00:03:48,090
Así que, de todos modos, lo que hemos hecho
aquí, en este diseño, es que hemos

85
00:03:48,090 --> 00:03:51,240
creado un diseño donde hay
datos embebidos en

86
00:03:51,240 --> 00:03:54,160
el documento y ya no
estamos utilizando múltiples tablas.

87
00:03:54,160 --> 00:03:57,760
Y podrías argumentar que es
denormalizada, pero es

88
00:03:57,760 --> 00:04:01,600
denormalizada de modo que
no viole muchas de las

89
00:04:01,600 --> 00:04:04,460
ventajas de un diseño
normalizado.

90
00:04:04,460 --> 00:04:07,630
No vamos a conseguir estas
anomalías de datos en este diseño.

91
00:04:07,630 --> 00:04:09,860
Bueno, tenemos
un cuestionario.

92
00:04:09,860 --> 00:04:12,410
De acuerdo, y aquí está el cuestionario.

93
00:04:12,410 --> 00:04:16,850
¿Qué patrón de acceso a datos no está
bien soportado por el esquema de

94
00:04:16,850 --> 00:04:19,230
blog que hemos elegido?

95
00:04:19,230 --> 00:04:21,630
Y las opciones son, reuniendo
las entradas de blog

96
00:04:21,630 --> 00:04:25,220
más recientes para la página
de inicio, reuniendo toda la

97
00:04:25,220 --> 00:04:28,320
información para mostrarla en un
solo post, reuniendo todos los

98
00:04:28,320 --> 00:04:32,270
comentarios con un solo autor,
o proveer una tabla de

99
00:04:32,270 --> 00:04:36,570
contenidos por etiqueta, ¿cuáles de éstas
no están bien soportadas por

100
00:04:36,570 --> 00:04:37,820
el actual esquema?

101
00:04:37,820 --> 00:04:38,510
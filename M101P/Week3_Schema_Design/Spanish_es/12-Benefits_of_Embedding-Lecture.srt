1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:03,010
El principal beneficio de embeber
datos a partir de dos distintas

3
00:00:03,010 --> 00:00:05,470
colecciones y de agruparlas
en una colección

4
00:00:05,470 --> 00:00:07,030
es el rendimiento.

5
00:00:07,030 --> 00:00:10,450
Y el principal beneficio de rendimiento
viene de un mejor

6
00:00:10,450 --> 00:00:12,140
rendimiento de lectura.

7
00:00:12,140 --> 00:00:14,720
Ahora, ¿por qué mejoramos
el rendimiento de lectura?

8
00:00:14,720 --> 00:00:17,090
La razón es la naturaleza de
la forma en que estos sistemas están

9
00:00:17,090 --> 00:00:20,640
construidos, los sistemas informáticos están
construidos, que a menudo

10
00:00:20,640 --> 00:00:24,610
tienen discos de platos giratorios, y estos
discos de platos tienen una muy

11
00:00:24,610 --> 00:00:28,900
alta latencia, lo que significa que
necesitan mayor tiempo para llegar al

12
00:00:28,900 --> 00:00:29,900
primer byte.

13
00:00:29,900 --> 00:00:33,100
A menudo toman más de un
milisegundo para llegar al

14
00:00:33,100 --> 00:00:34,170
primer byte.

15
00:00:34,170 --> 00:00:37,430
Pero entonces, una vez que llegan al
primer byte, cada byte

16
00:00:37,430 --> 00:00:39,060
adicional viene con bastante rapidez.

17
00:00:39,060 --> 00:00:41,380
Por lo tanto tienden a tener
bastante ancho de banda.

18
00:00:41,380 --> 00:00:44,850
Así que la idea es que, si puedes
co-localizar los datos que

19
00:00:44,850 --> 00:00:47,980
vas a usar juntos
en el mismo documento, embébelo,

20
00:00:47,980 --> 00:00:53,120
luego que giras
el disco, encuentras el sector

21
00:00:53,120 --> 00:00:55,210
donde necesitas esta información,
y entonces

22
00:00:55,210 --> 00:00:56,540
empiezas a leerlo.

23
00:00:56,540 --> 00:00:57,910
Y vas a obtener
toda la información

24
00:00:57,910 --> 00:00:59,580
que necesitas en un solo lugar.

25
00:00:59,580 --> 00:01:03,140
Y también significa que, si tienes
dos partes de datos que

26
00:01:03,140 --> 00:01:06,960
normalmente estarían en dos colecciones
o en varias tablas

27
00:01:06,960 --> 00:01:10,040
relacionales, sino que están en
un documento, que puedes evitar

28
00:01:10,040 --> 00:01:12,300
los viajes de ida y vuelta en la
base de datos.

29
00:01:12,300 --> 00:01:14,690
Porque ahora, en una ida y vuelta,
puedes ir, puedes

30
00:01:14,690 --> 00:01:16,800
leer los datos y
tenerlos de regreso.

31
00:01:16,800 --> 00:01:17,840
Lo mismo con una escritura.

32
00:01:17,840 --> 00:01:21,305
En un viaje, puedes ir a la
base de datos, puedes escribir los

33
00:01:21,305 --> 00:01:24,210
datos que necesitas, que
normalmente sería ir en

34
00:01:24,210 --> 00:01:27,200
varias distintas partes del
sistema y partes del disco,

35
00:01:27,200 --> 00:01:30,260
escribir en una ubicación del disco,
y luego regresar.

36
00:01:30,260 --> 00:01:34,090
Y la única real advertencia en ésto
es, como dije antes, si

37
00:01:34,090 --> 00:01:37,510
un documento termina siendo
movido mucho más a menudo porque

38
00:01:37,510 --> 00:01:40,890
has traído los datos juntos
porque el documento

39
00:01:40,890 --> 00:01:43,940
necesita ser expandido, entonces
podrías crear un problema.

40
00:01:43,940 --> 00:01:45,810
Podrías ralentizar tus escrituras

41
00:01:45,810 --> 00:01:47,000
debido a que está embebido.

42
00:01:47,000 --> 00:01:49,990
Así que, de nuevo, todo se reduce a
tus patrones de acceso con

43
00:01:49,990 --> 00:01:53,540
MongoDB y tratar de diseñar
un esquema en torno a patrones

44
00:01:53,540 --> 00:01:55,860
de acceso que ves en tu
aplicación real.

45
00:01:55,860 --> 00:01:57,110

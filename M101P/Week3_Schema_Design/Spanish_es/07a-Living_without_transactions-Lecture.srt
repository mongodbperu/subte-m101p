1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:04,700
Hablamos un poco al principo de
la primera semana de la

3
00:00:04,700 --> 00:00:08,570
falta de soporte a transacciones
con MongoDB.

4
00:00:08,570 --> 00:00:11,650
Y del mundo relacional,
muchos de ustedes saben que

5
00:00:11,650 --> 00:00:16,219
las transacciones ofrecen atomicidad,
consistencia, aislamiento y

6
00:00:16,219 --> 00:00:17,450
durabilidad.

7
00:00:17,450 --> 00:00:20,820
Pero, a pesar que no tenemos
transacciones en MongoDB,

8
00:00:20,820 --> 00:00:24,040
tenemos operaciones atómicas.

9
00:00:24,040 --> 00:00:25,530
Entonces, ¿qué significa esto?

10
00:00:25,530 --> 00:00:29,990
Bueno, operaciones atómicas significa
que cuando trabajas en un solo

11
00:00:29,990 --> 00:00:33,880
documento, este trabajo se
completará antes que alguien

12
00:00:33,880 --> 00:00:35,200
vea el documento.

13
00:00:35,200 --> 00:00:36,930
Ellos verán bien todos
los cambios que

14
00:00:36,930 --> 00:00:38,490
hagas o ninguno de éstos.

15
00:00:38,490 --> 00:00:43,370
Y usando operaciones atómicas,
a menudo puedes lograr lo

16
00:00:43,370 --> 00:00:44,910
mismo que hubieras
logrado usando

17
00:00:44,910 --> 00:00:47,090
transacciones en una base de
datos relacional.

18
00:00:47,090 --> 00:00:51,940
Y la razón es, que en una
base de datos relacional, necesitas

19
00:00:51,940 --> 00:00:56,680
hacer cambios a través de múltiples
tablas, usualmente

20
00:00:56,680 --> 00:00:59,820
tablas que necesitan ser relacionadas,
y así deseas

21
00:00:59,820 --> 00:01:00,820
hacer todo a la vez.

22
00:01:00,820 --> 00:01:03,530
Y para hacerlo, ya que hay
varias tablas, tendrás que

23
00:01:03,530 --> 00:01:07,060
iniciar una transacción y hacer
todas esas modificaciones y luego finalizar

24
00:01:07,060 --> 00:01:08,860
la transacción.

25
00:01:08,860 --> 00:01:12,490
Pero con MongoDB, ya que
embeberás datos, y

26
00:01:12,490 --> 00:01:15,160
vas a vincular previamente
en documentos--

27
00:01:15,160 --> 00:01:16,950
éstos serán documentos
enriquecidos que tendrán

28
00:01:16,950 --> 00:01:17,810
jerarquía--

29
00:01:17,810 --> 00:01:20,180
a menudo puedes lograr
lo mismo.

30
00:01:20,180 --> 00:01:22,570
Por ejemplo, en el blog,
si deseas

31
00:01:22,570 --> 00:01:25,600
asegurarte de actualizar
un post atómicamente, puedes hacer

32
00:01:25,600 --> 00:01:28,430
eso ya que puedes actualizar el
post de blog completo a la vez.

33
00:01:28,430 --> 00:01:30,890
Considerando que, si se trataba de
varias tablas relacionales,

34
00:01:30,890 --> 00:01:33,690
probablemente tendrás que abrir una
transacción para que puedas

35
00:01:33,690 --> 00:01:37,040
actualizar la colección de posts y
la colección de comentarios.

36
00:01:37,040 --> 00:01:40,650
¿Cuáles son los enfoques que
puedes tomar en MongoDB

37
00:01:40,650 --> 00:01:42,340
para superar la falta
de transacciones?

38
00:01:42,340 --> 00:01:44,470
Y la respuesta es que hay
realmente tres distintos

39
00:01:44,470 --> 00:01:44,910
enfoques.

40
00:01:44,910 --> 00:01:46,860
Y quiero ir por ello
realmente rápido.

41
00:01:46,860 --> 00:01:50,720
Lo primero es que puedes
reestructurar tu código para que

42
00:01:50,720 --> 00:01:53,340
trabajes con un solo
documento y tomar ventaja

43
00:01:53,340 --> 00:01:57,020
de las operaciones atómicas que
ofrecemos dentro del documento.

44
00:01:57,020 --> 00:02:00,690
Y si lo haces, entonces
por lo general ya está todo listo.

45
00:02:00,690 --> 00:02:03,720
Y no te pierdes de las
transacciones en absoluto.

46
00:02:03,720 --> 00:02:07,590
Lo segundo es que puedes hacer,
si deseas,

47
00:02:07,590 --> 00:02:10,930
implementar en esencia una especie
de bloqueo en el software.

48
00:02:10,930 --> 00:02:14,240
Puedes hacer esto creando
una sección crítica.

49
00:02:14,240 --> 00:02:17,040
Puedes construir en esencia una
prueba y prueba, usando

50
00:02:17,040 --> 00:02:18,310
"find and modify".

51
00:02:18,310 --> 00:02:20,680
Puedes construir semáforos
si lo deseas.

52
00:02:20,680 --> 00:02:25,060
Y en cierto modo, ésta es la forma
en que el mundo en general funciona de todos modos.


53
00:02:25,060 --> 00:02:27,860
Si lo piensas bien, si un
banco necesita transferir dinero

54
00:02:27,860 --> 00:02:29,710
a otro banco, ellos
no viven en el

55
00:02:29,710 --> 00:02:31,460
mismo sistema relacional.

56
00:02:31,460 --> 00:02:34,250
Y a menudo cada uno tiene sus
propias bases de datos relacionales.

57
00:02:34,250 --> 00:02:37,350
Y tienen que ser capaces de
coordinar la operación,

58
00:02:37,350 --> 00:02:39,260
a pesar que no puedes iniciar
una transacción y finalizar

59
00:02:39,260 --> 00:02:42,610
la transacción a través de estos
sistemas de bases de datos, sólo en

60
00:02:42,610 --> 00:02:44,040
un sistema de un banco.

61
00:02:44,040 --> 00:02:46,070
Así que ciertamente hay
maneras en software para

62
00:02:46,070 --> 00:02:47,900
eludir el problema.

63
00:02:47,900 --> 00:02:51,680
Y el último enfoque, que
a menudo funciona en aplicaciones

64
00:02:51,680 --> 00:02:54,810
web modernas y otras
aplicaciones que tienen una

65
00:02:54,810 --> 00:02:58,800
enorme cantidad de datos, es
sólo tolerar un poco

66
00:02:58,800 --> 00:03:01,020
de inconsistencia.

67
00:03:01,020 --> 00:03:05,790
Un ejemplo sería si estás hablando
de un amigo en una publicación en

68
00:03:05,790 --> 00:03:09,740
Facebook, no importa si
todos ven tu muro

69
00:03:09,740 --> 00:03:12,090
actualizarse simultáneamente.

70
00:03:12,090 --> 00:03:14,270
Está bien si una persona
no lo ve

71
00:03:14,270 --> 00:03:16,080
por unos segundos.

72
00:03:16,080 --> 00:03:18,530
Y luego lo ve.

73
00:03:18,530 --> 00:03:23,040
A menudo no es crítico en
muchos diseños de sistemas que

74
00:03:23,040 --> 00:03:25,050
todo será perfectamente
consistente y que todos

75
00:03:25,050 --> 00:03:27,120
tienen una perfecta consistencia
y lo

76
00:03:27,120 --> 00:03:28,630
mismo para la base de datos.

77
00:03:28,630 --> 00:03:32,580
Así que puedes simplemente tolerar un
poco de inconsistencia

78
00:03:32,580 --> 00:03:33,890
que es algo temporal.

79
00:03:33,890 --> 00:03:34,950
Así que éstos son los tres enfoques.

80
00:03:34,950 --> 00:03:36,970
Puedes reestructurar para asegurarte
que todo suceda

81
00:03:36,970 --> 00:03:40,300
en un solo documento para que
obtengas las ventajas de

82
00:03:40,300 --> 00:03:41,790
operaciones atómicas.

83
00:03:41,790 --> 00:03:42,900
Puedes implementar
lo que estás

84
00:03:42,900 --> 00:03:43,950
buscando con el software.

85
00:03:43,950 --> 00:03:46,720
O puedes tolerar un poco
de consistencia que

86
00:03:46,720 --> 00:03:48,810
puedes obtener sin
transacciones.

87
00:03:48,810 --> 00:03:52,390
Muy bien, vayamos
al cuestionario.

88
00:03:52,390 --> 00:03:53,510
Aquí está el cuestionario.

89
00:03:53,510 --> 00:03:56,560
¿Cuáles de las siguientes
operaciones funcionan atómicamente

90
00:03:56,560 --> 00:03:59,180
en un solo documento
en MongoDB?

91
00:03:59,180 --> 00:04:00,420
Marca todas las que apliquen.

92
00:04:00,420 --> 00:04:02,990
Y las opciones son, el comando
"update", el comando

93
00:04:02,990 --> 00:04:06,870
"find and modify", el comando
"add to set" en un "update" o

94
00:04:06,870 --> 00:04:09,440
"push", también en
un "update".

95
00:04:09,440 --> 00:04:11,990
Y si recuerdas "add to set",
añade algo a un array

96
00:04:11,990 --> 00:04:14,740
si no está allí,
"push" es al

97
00:04:14,740 --> 00:04:15,990
final de la lista.

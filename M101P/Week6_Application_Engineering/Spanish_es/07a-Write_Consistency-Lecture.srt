1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:04,270
En la replicación dentro
de MongoDB sólo hay un único

3
00:00:04,270 --> 00:00:06,500
primario en un momento dado.

4
00:00:06,500 --> 00:00:10,600
Y en la configuración
por defecto, tus escrituras y 

5
00:00:10,600 --> 00:00:12,310
lecturas van a ese primario.

6
00:00:12,310 --> 00:00:14,510
Ahora, tus escrituras tienen que ir
al primario, pero tus lecturas

7
00:00:14,510 --> 00:00:16,570
no tienen que ir 
al primario.

8
00:00:16,570 --> 00:00:19,390
Las lecturas podrían ir a los
secundarios si quisieras.

9
00:00:19,390 --> 00:00:23,040
Pero si permites que las escrituras
vayan al primario, entonces

10
00:00:23,040 --> 00:00:28,300
lo que ocurre es que obtienes una
fuerte consistencia de las lecturas

11
00:00:28,300 --> 00:00:29,440
con respecto a las escrituras.

12
00:00:29,440 --> 00:00:32,259
Y lo que esto significa, entre otras
cosas, es que no

13
00:00:32,259 --> 00:00:33,830
leerás datos obsoletos.

14
00:00:33,830 --> 00:00:36,130
Si escribes algo,
serás capaz de leerlo,

15
00:00:36,130 --> 00:00:40,600
y otros servidores de
aplicaciones que lo lean también

16
00:00:40,600 --> 00:00:43,240
serán capaces de leer lo que
escribiste después de escribirlo.

17
00:00:43,240 --> 00:00:46,700
Siempre y cuando esperes a
que se complete la escritura

18
00:00:46,700 --> 00:00:47,540
a través del "journaling".

19
00:00:47,540 --> 00:00:51,390
Ahora, puedes, si prefieres,
permitir que tus lecturas vayan

20
00:00:51,390 --> 00:00:52,530
a los secundarios.

21
00:00:52,530 --> 00:00:57,530
Pero si haces eso, entonces podrías
leer datos obsoletos de los

22
00:00:57,530 --> 00:01:00,690
secundarios, en relación con lo
que escribiste, o con lo que alguien

23
00:01:00,690 --> 00:01:02,180
escribió en los primarios.

24
00:01:02,180 --> 00:01:06,630
Y el desfase entre dos nodos
cualesquiera no está garantizado,

25
00:01:06,630 --> 00:01:09,276
porque la replicación
es asíncrona.

26
00:01:09,276 --> 00:01:11,070
Así que ten
eso en mente.

27
00:01:11,070 --> 00:01:13,010
Y analizaremos las
distintas opciones de lectura

28
00:01:13,010 --> 00:01:15,930
que puedes establecer en cuanto
a drivers para decidir si

29
00:01:15,930 --> 00:01:18,100
quieres aceptar lecturas
desde los secundarios

30
00:01:18,100 --> 00:01:19,230
o no.

31
00:01:19,230 --> 00:01:21,850
Y las razones por las cuales 
podrías querer leer desde los

32
00:01:21,850 --> 00:01:23,790
secundarios, quiero decir, el
motivo más común por el que la gente

33
00:01:23,790 --> 00:01:25,700
lo hace es porque quieren escalar
sus lecturas a través del

34
00:01:25,700 --> 00:01:26,490
conjunto de réplicas.

35
00:01:26,490 --> 00:01:28,890
Por lo que sienten que si pueden
enviar sus lecturas a todos los

36
00:01:28,890 --> 00:01:32,160
nodos, las lecturas
escalarán mejor.

37
00:01:32,160 --> 00:01:34,990
Analizaremos eso un poco más
tarde en términos de si

38
00:01:34,990 --> 00:01:38,360
eso es realmente cierto o no y
si es una buena idea.

39
00:01:38,360 --> 00:01:40,540
Pero supongo que para este
propósito, simplemente quiero

40
00:01:40,540 --> 00:01:43,710
explicarte que el modelo de
memoria aquí es fuertemente

41
00:01:43,710 --> 00:01:44,680
consistente.

42
00:01:44,680 --> 00:01:48,340
Por otro lado, sin embargo, cuando se
produce una conmutación por error,

43
00:01:48,340 --> 00:01:50,680
durante ese breve periodo de tiempo 
en que no hay primario, no puedes 

44
00:01:50,680 --> 00:01:52,680
completar una escritura, porque no
hay primario.

45
00:01:52,680 --> 00:01:55,230
Y luego cuando otro primario
es elegido, digamos que este

46
00:01:55,230 --> 00:01:56,730
primario se cae, lo cual
va a ser 

47
00:01:56,730 --> 00:01:58,510
bastante raro, obviamente.

48
00:01:58,510 --> 00:02:01,700
Entonces durante ese periodo,
en realidad no podrás 

49
00:02:01,700 --> 00:02:03,350
realizar ninguna escritura.

50
00:02:03,350 --> 00:02:06,850
Y eso es en contraposición a
algunos otros sistemas que

51
00:02:06,850 --> 00:02:10,720
compiten con MongoDB, que tienen
una forma más débil de consistencia.

52
00:02:10,720 --> 00:02:13,250
Algunos de ellos tienen lo que se
llama consistencia eventual.

53
00:02:13,250 --> 00:02:16,210
Y consistencia eventual significa
que eventualmente, podrás

54
00:02:16,210 --> 00:02:18,400
leer lo que escribiste, pero
no hay garantía que

55
00:02:18,400 --> 00:02:20,780
podrás leerlo en
un momento en particular.

56
00:02:20,780 --> 00:02:23,320
Y quiero decir, el problema con
la consistencia eventual es que

57
00:02:23,320 --> 00:02:26,850
es bastante difícil razonar sobre ella,
porque cuando escribes

58
00:02:26,850 --> 00:02:29,030
algo en la base de datos, quiero 
decir, hoy en día la mayoría de los

59
00:02:29,030 --> 00:02:31,780
servidores web y de aplicaciones
son sin estado.

60
00:02:31,780 --> 00:02:36,000
Por lo que es un poco desconcertante,
digamos, escribir la

61
00:02:36,000 --> 00:02:38,270
información de sesión y escribir
otra información en la

62
00:02:38,270 --> 00:02:41,100
base de datos y luego leerla
de nuevo y

63
00:02:41,100 --> 00:02:42,330
obtener un resultado diferente.

64
00:02:42,330 --> 00:02:45,250
Y luego tiene que reconciliar
lo que eso significa.

65
00:02:45,250 --> 00:02:48,790
Por tanto, MongoDB no ofrece
consistencia eventual en su

66
00:02:48,790 --> 00:02:50,290
configuración por defecto,
donde lees y

67
00:02:50,290 --> 00:02:51,500
escribes en los primarios.

68
00:02:51,500 --> 00:02:54,180
Si quieres formar una consistencia
eventual, puedes

69
00:02:54,180 --> 00:02:56,510
leer de los secundarios, los 
cuales te darán consistencia

70
00:02:56,510 --> 00:02:57,430
eventual.

71
00:02:57,430 --> 00:02:59,750
OK, hagamos un cuestionario.

72
00:02:59,750 --> 00:03:02,215
Bien, durante el tiempo en que está
ocurriendo una conmutación por 

73
00:03:02,215 --> 00:03:05,050
error en un conjunto de réplicas, ¿pueden
completarse con éxito las escrituras?

74
00:03:05,050 --> 00:03:06,460
La respuesta es sí o no.

75
00:03:06,460 --> 00:03:07,710
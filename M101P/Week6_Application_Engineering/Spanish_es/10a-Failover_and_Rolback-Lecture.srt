1
00:00:00,000 --> 00:00:03,320
Quiero describir una situación de
conmutación por error que podría

2
00:00:03,320 --> 00:00:05,590
resultar en un "rollback" de
algunos datos que previamente se

3
00:00:05,590 --> 00:00:07,380
envían hacia mongod.

4
00:00:07,380 --> 00:00:10,930
Así que imagina que tienes
tres servidores aquí.

5
00:00:10,930 --> 00:00:14,510
Uno, dos y tres.

6
00:00:14,510 --> 00:00:18,150
E imagina que este es el
primario y las escrituras

7
00:00:18,150 --> 00:00:19,730
van hacia este nodo.

8
00:00:19,730 --> 00:00:24,400
Y están siendo replicadas,
pero digamos que estás

9
00:00:24,400 --> 00:00:27,280
escribiendo y estos nodos,
están retrasados por

10
00:00:27,280 --> 00:00:28,560
algunos segundos.

11
00:00:28,560 --> 00:00:31,530
Y de repente, este nodo se cae.

12
00:00:31,530 --> 00:00:35,520
Así que ese nodo se cae,
entonces uno de estos dos

13
00:00:35,520 --> 00:00:37,610
serán elegidos como el primario.

14
00:00:37,610 --> 00:00:40,930
Pero hay escrituras en este
nodo que este otro nodo

15
00:00:40,930 --> 00:00:42,420
no las tiene aún.

16
00:00:42,420 --> 00:00:44,980
Si el "oplog" aún no
ha sido replicado.

17
00:00:44,980 --> 00:00:49,270
Entonces este nodo va a venir
aquí como el primario, y

18
00:00:49,270 --> 00:00:52,010
él no va a tener
estas escrituras.

19
00:00:52,010 --> 00:00:55,890
Entonces, después de un período
de tiempo este retornaría como

20
00:00:55,890 --> 00:00:56,850
un secundario.

21
00:00:56,850 --> 00:00:59,330
Así que digamos que
regresa como secundario.

22
00:00:59,330 --> 00:01:01,080
Así que este servidor
Mongo regresa,

23
00:01:01,080 --> 00:01:03,600
número uno, como secundario.

24
00:01:03,600 --> 00:01:06,980
Cuando regresa, va a ver
al primario, que es

25
00:01:06,980 --> 00:01:09,290
este nodo ahora, para ver si hay

26
00:01:09,290 --> 00:01:11,070
algo que él necesita tomar.

27
00:01:11,070 --> 00:01:13,210
Y cuando hace eso, va
a darse cuenta que tiene

28
00:01:13,210 --> 00:01:16,560
escrituras que no están
en el actual primario.

29
00:01:16,560 --> 00:01:19,360
Y lo que va a hacer con esas
escrituras, lo que el nodo

30
00:01:19,360 --> 00:01:21,630
uno va a hacer con estas
escrituras es que va a

31
00:01:21,630 --> 00:01:23,030
hacerles "rollback".

32
00:01:23,030 --> 00:01:27,270
Así que les hace "rollback"
y los pone en un archivo.

33
00:01:27,270 --> 00:01:30,370
Y podrían ser aplicados
manualmente si deseas, pero

34
00:01:30,370 --> 00:01:32,610
no van a ser parte
del conjunto de datos.

35
00:01:32,610 --> 00:01:36,690
Así que esta es una situación donde la
conmutación por error puede resultar en

36
00:01:36,690 --> 00:01:40,780
un "rollback" de algunos datos
que han sido previamente enviados.

37
00:01:40,780 --> 00:01:44,340
Ahora, hay una manera de evitar
este particular escenario, en su

38
00:01:44,340 --> 00:01:48,150
mayor parte, y eso es
esperando hasta que estés

39
00:01:48,150 --> 00:01:51,560
escribiendo a este primario
inicialmente, esperas hasta que

40
00:01:51,560 --> 00:01:54,930
la mayoría de los nodos tengan
los datos, y luego esas

41
00:01:54,930 --> 00:01:57,570
vulnerabilidades no existan,
en su mayor parte.

42
00:01:57,570 --> 00:01:59,860
Hay algunos pequeños
casos extremos aquí,

43
00:01:59,860 --> 00:02:00,950
hay situaciones

44
00:02:00,950 --> 00:02:03,660
muy extrañas donde

45
00:02:03,660 --> 00:02:04,460
podría ocurrir potencialmente.

46
00:02:04,460 --> 00:02:06,770
Pero, básicamente,
no va a suceder.

47
00:02:06,770 --> 00:02:11,970
Así que si sólo estableces tu
concernencia de escritura (w) para

48
00:02:11,970 --> 00:02:14,640
que espere a que la mayoría de los nodos
tengan la escritura, entonces no ocurrirá.

49
00:02:14,640 --> 00:02:17,050
Y vamos a repasar
cómo funciona y luego

50
00:02:17,050 --> 00:02:18,060
repasar los drivers.

51
00:02:18,060 --> 00:02:20,850
Pero sólo para que lo entiendas
en el caso por defecto, si

52
00:02:20,850 --> 00:02:26,070
estableces "w=1" e incluso
si estableces "j=1",

53
00:02:26,070 --> 00:02:29,360
que significa que deseas
asegurarte que no retorne

54
00:02:29,360 --> 00:02:32,440
hasta que esté registrado en el
"journal" en este nodo, que si

55
00:02:32,440 --> 00:02:35,910
esta nota fue fallida antes
que este replicara esta cosa a

56
00:02:35,910 --> 00:02:39,980
estos dos nodos, entonces es
perfectamente posible que

57
00:02:39,980 --> 00:02:42,690
perdieras las escrituras,
porque cuando él regrese,

58
00:02:42,690 --> 00:02:43,810
le hará "rollback".

59
00:02:43,810 --> 00:02:47,300
Lo pone en un archivo, un archivo
"rollback", pero usualmente en

60
00:02:47,300 --> 00:02:51,340
situaciones más operativas, que
nunca se aplican, porque es

61
00:02:51,340 --> 00:02:52,510
complicado hacer eso.

62
00:02:52,510 --> 00:02:54,000
Así que la mayoría de
personas no lo hacen.

63
00:02:54,000 --> 00:02:55,810
De acuerdo, hagamos
un cuestionario.

64
00:02:55,810 --> 00:02:59,250
Así que el cuestionario es ¿qué
ocurre si un node regresa como

65
00:02:59,250 --> 00:03:02,530
secundario luego de estar
desconectado y el "oplog"

66
00:03:02,530 --> 00:03:04,220
fue recorrido en el primario?

67
00:03:04,220 --> 00:03:06,500
Este es un escenario
que no hemos discutido.

68
00:03:06,500 --> 00:03:09,860
Pero quizá puedas razonar
lo que probablemente sucederá.

69
00:03:09,860 --> 00:03:12,280
Y recuerda, el "oplog"
es una colección con tope.

70
00:03:12,280 --> 00:03:16,560
Así que es posible que haya
pasado buen tiempo para cuando

71
00:03:16,560 --> 00:03:19,410
viste que el primario
no tenía ninguna de

72
00:03:19,410 --> 00:03:22,100
las operaciones que ocurrieron
en el tiempo transcurrido,

73
00:03:22,100 --> 00:03:23,530
porque ya está recorrido.

74
00:03:23,530 --> 00:03:25,360
Ya han pasado 24 horas
o algo así.

75
00:03:25,360 --> 00:03:27,640
Entonces, ¿qué crees que
sucede en esa situación?

76
00:03:27,640 --> 00:03:30,230
Y las opciones son: Todo el
conjunto de datos serán cubiertos

77
00:03:30,230 --> 00:03:33,590
desde el primario, Un "rollback"
ocurrirá, El nuevo nodo se queda

78
00:03:33,590 --> 00:03:38,180
desconectado (no regresa al
conjunto de réplicas como un

79
00:03:38,180 --> 00:03:41,500
secundario), o El nuevo nodo
comienza a calcular PI a un

80
00:03:41,500 --> 00:03:43,130
número grande de
posiciones decimales.

81
00:03:43,130 --> 00:03:46,150
Entonces, ¿qué crees que ocurre
en las situaciones donde el "oplog"

82
00:03:46,150 --> 00:03:48,280
fue recorrido?

83
00:03:48,280 --> 00:03:49,530
Las colecciones con
tope se recorren.

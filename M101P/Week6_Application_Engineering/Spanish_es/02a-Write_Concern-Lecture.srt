1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:01,480
Bienvenido a ingeniería
de aplicaciones.

3
00:00:01,480 --> 00:00:03,210
Esta es la semana seis.

4
00:00:03,210 --> 00:00:04,900
Esta semana, hay tres
temas principales

5
00:00:04,900 --> 00:00:05,950
que vamos a abarcar.

6
00:00:05,950 --> 00:00:08,610
El primero es la durabilidad
de las escrituras--

7
00:00:08,610 --> 00:00:11,000
y esta es la durabilidad de
escrituras en un sistema con una

8
00:00:11,000 --> 00:00:13,110
sola instancia de mongod.

9
00:00:13,110 --> 00:00:16,200
El siguiente es alcanzar disponibilidad
y tolerancia a fallos, que

10
00:00:16,200 --> 00:00:18,120
vamos a hacerlo
con replicación.

11
00:00:18,120 --> 00:00:21,200
Y el último es alcanzar
escalabilidad horizontal,

12
00:00:21,200 --> 00:00:23,410
que lo haremos con Sharding.

13
00:00:23,410 --> 00:00:25,820
Empecemos con la durabilidad
de escrituras, hablemos de la

14
00:00:25,820 --> 00:00:27,400
manera de cómo funciona Mongo.

15
00:00:27,400 --> 00:00:30,310
En un sistema donde tienes una
sola instancia de mongod,

16
00:00:30,310 --> 00:00:32,420
probablemente tienes tu
aplicación en ejecución-- tal vez

17
00:00:32,420 --> 00:00:33,730
en un ambiente separado.

18
00:00:33,730 --> 00:00:37,470
Y va a tener varias
operaciones que va a

19
00:00:37,470 --> 00:00:41,900
realizar en la base de datos,
como inserciones y actualizaciones--

20
00:00:41,900 --> 00:00:43,750
y he estado escribiendo
cosas como estas.

21
00:00:43,750 --> 00:00:45,870
Y luego también está el shell
Mongo que en realidad es

22
00:00:45,870 --> 00:00:48,930
también una aplicación,
si piensas al respecto.

23
00:00:48,930 --> 00:00:52,920
Y hace inserciones
y actualizaciones.

24
00:00:52,920 --> 00:00:56,440
Y dentro de aquí están
los drivers dentro de tus

25
00:00:56,440 --> 00:00:57,090
aplicaciones--

26
00:00:57,090 --> 00:00:59,780
o en realidad, probablemente,
compilados en ellos o referenciados,

27
00:00:59,780 --> 00:01:03,170
o disponibles por alguna
especie de librería dinámica.

28
00:01:03,170 --> 00:01:05,710
Y en cierto sentido, los drivers
también están en el shell

29
00:01:05,710 --> 00:01:08,130
Mongo, o alguna versión
de los mismos.

30
00:01:08,130 --> 00:01:11,920
Cuando llamas a una actualización,
o una inserción o algo en el

31
00:01:11,920 --> 00:01:16,790
API de Mongo, esta no es
confirmada, por defecto.

32
00:01:16,790 --> 00:01:18,900
O no esperamos por una
confirmación en ella.

33
00:01:18,900 --> 00:01:22,830
La enviamos, y hacemos una
especie de "fire and forget".

34
00:01:22,830 --> 00:01:24,770
"Fire and forget"
(Dispara y olvida).

35
00:01:24,770 --> 00:01:27,760
Ahora, hay algunas razones
históricas por la que ésto era así,

36
00:01:27,760 --> 00:01:29,520
y te hablaré de
ellas en un momento.

37
00:01:29,520 --> 00:01:32,090
Así que si deseas saber que
tu escritura en realidad fue

38
00:01:32,090 --> 00:01:33,780
recibida por el servidor--

39
00:01:33,780 --> 00:01:36,570
que la obtuvo,
que la procesó, que--

40
00:01:36,570 --> 00:01:38,480
que si la completó,
pero que al menos no

41
00:01:38,480 --> 00:01:39,670
contravino ningún índice--

42
00:01:39,670 --> 00:01:43,910
Y que parezca bien,
sintácticamente, luego ejecutas

43
00:01:43,910 --> 00:01:47,060
el "getLastError", que está
en un bajo nivel del API a

44
00:01:47,060 --> 00:01:47,960
la base de datos.

45
00:01:47,960 --> 00:01:50,750
Ahora, el shell Mongo ejecuta
un "getLastError" para

46
00:01:50,750 --> 00:01:54,470
cada vez que tú haces una
actualización, una inserción.

47
00:01:54,470 --> 00:01:57,420
Por lo que cuando llamas a una
inserción, esto llama a "insert",

48
00:01:57,420 --> 00:01:58,400
luego llama a "getLastError".

49
00:01:58,400 --> 00:02:01,050
Eso es porque cuando contravienes
un índice único en el shell

50
00:02:01,050 --> 00:02:03,240
Mongo, inmediatamente
se obtiene el error.

51
00:02:03,240 --> 00:02:06,000
En una aplicación,
tradicionalmente, depende de

52
00:02:06,000 --> 00:02:07,710
cómo lo invocas.

53
00:02:07,710 --> 00:02:09,910
Ahora, hablamos de eso que se
llama modo seguro (safe mode)--

54
00:02:09,910 --> 00:02:13,240
que en esencia ha quedado
deprecado en este momento,

55
00:02:13,240 --> 00:02:14,800
debido al lanzamiento que
hicimos la semana pasada.

56
00:02:14,800 --> 00:02:16,610
Así que hablaré de eso.

57
00:02:16,610 --> 00:02:19,150
Diría que el modo seguro
ha quedado obsoleto.

58
00:02:19,150 --> 00:02:21,720
El modo en que funciona
es casi el mismo.

59
00:02:21,720 --> 00:02:24,770
Dentro de la aplicación, en
los drivers, tú decides

60
00:02:24,770 --> 00:02:27,920
si deseas que los drivers
llamen a "getLastError" o no

61
00:02:27,920 --> 00:02:31,480
para cuando ellos hacen
una solicitud a mongod.

62
00:02:31,480 --> 00:02:36,490
Y establecimos "safe" igual a "True",
que le dijo al driver de Python

63
00:02:36,490 --> 00:02:39,800
que llame a "getLastError"
luego de cada operación.

64
00:02:39,800 --> 00:02:42,660
Hay dos parámetros que
pueden ser especificados en

65
00:02:42,660 --> 00:02:46,140
"getLastError" que deseo
abarcar y hablarte al respecto.

66
00:02:46,140 --> 00:02:49,720
El primero es el parámetro
"w" y el segundo es

67
00:02:49,720 --> 00:02:51,870
el parámetro "j".

68
00:02:51,870 --> 00:02:54,870
Ahora, el parámetro "w"
determina si vas a

69
00:02:54,870 --> 00:02:58,140
esperar o no a que la
escritura sea confirmada.

70
00:02:58,140 --> 00:03:02,310
Así, "w=1" esperará a que
la escritura sea confirmada.

71
00:03:02,310 --> 00:03:03,850
Y eso es lo que la mayoría va
a preocuparse en este momento,

72
00:03:03,850 --> 00:03:05,980
la idea de sólo esperar
porque la escritura sea

73
00:03:05,980 --> 00:03:06,850
confirmada.

74
00:03:06,850 --> 00:03:09,230
Ahora bien, eso no quiere decir
que Mongo necesariamente

75
00:03:09,230 --> 00:03:10,080
escribió al disco.

76
00:03:10,080 --> 00:03:12,100
Aún hay una ventana de
vulnerabilidad allí.

77
00:03:12,100 --> 00:03:14,500
Puede haber conseguido escribir,
y luego hacer un cambio en

78
00:03:14,500 --> 00:03:18,260
memoria y luego fallar la energía,
y luego aquella escritura se

79
00:03:18,260 --> 00:03:20,040
perdió para siempre y
no lo verías.

80
00:03:20,040 --> 00:03:22,040
Esto no es particularmente
durable.

81
00:03:22,040 --> 00:03:24,430
El segundo parámetro es
el parámetro "j", que

82
00:03:24,430 --> 00:03:26,590
es el abreviado de "journal".

83
00:03:26,590 --> 00:03:30,760
Y si lo estableces a "1" o "True",
entonces lo que ocurrirá es que

84
00:03:30,760 --> 00:03:35,160
"getLastError" esperará hasta que
el "journal" se perpetre a disco.

85
00:03:35,160 --> 00:03:36,980
Entonces, ¿qué es un "journal"?

86
00:03:36,980 --> 00:03:39,130
Si estás familiarizado con bases
de datos, probablemente sabes lo

87
00:03:39,130 --> 00:03:41,670
que es un "journal", pero
lo revisaré brevemente.

88
00:03:41,670 --> 00:03:46,730
Un "journal" es un registro (log) en
el disco que tiene una lista de las

89
00:03:46,730 --> 00:03:48,770
operaciones que estás
realizando a los datos.

90
00:03:48,770 --> 00:03:52,740
Y una vez que tu afectas al "journal",
incluso si la base de datos se

91
00:03:52,740 --> 00:03:57,310
reinicia o pierde enegía, el
"journal" puede ser reproducido y

92
00:03:57,310 --> 00:04:00,030
esas operaciones aplicarse
a los datos en sí.

93
00:04:00,030 --> 00:04:02,410
Así, esencialmente, una vez
que llegas al "journal", si

94
00:04:02,410 --> 00:04:04,810
se asume que un disco es
persistente, entonces es una

95
00:04:04,810 --> 00:04:05,980
escritura persistente.

96
00:04:05,980 --> 00:04:10,280
Así podemos decir que deseamos
esperar en cada escritura para

97
00:04:10,280 --> 00:04:13,080
que el "journal" se complete
y desear esperar a ser

98
00:04:13,080 --> 00:04:13,800
confirmada.

99
00:04:13,800 --> 00:04:16,910
Y así, mirando en los
dos distintos valores, --

100
00:04:16,910 --> 00:04:18,670
Voy a repasarlos--

101
00:04:18,670 --> 00:04:20,610
podemos dejar esto en "0".

102
00:04:20,610 --> 00:04:23,200
Y si lo dejamos a ambos en "0",
entonces lo que va a ocurrir

103
00:04:23,200 --> 00:04:24,270
es-- esto es la antigua manera.

104
00:04:24,270 --> 00:04:25,790
Esto es "fire and forget".

105
00:04:25,790 --> 00:04:30,180
Ahora, si establecemos esto a "1",
pero dejamos esto en "0", entonces

106
00:04:30,180 --> 00:04:32,960
lo que va a pasar es que
vamos a esperar por una

107
00:04:32,960 --> 00:04:35,340
simple confirmación
de Mongo que

108
00:04:35,340 --> 00:04:36,300
recibió la escritura.

109
00:04:36,300 --> 00:04:36,720
¿Correcto?

110
00:04:36,720 --> 00:04:39,230
Por lo tanto, nos va a dar
otra clase de errores.

111
00:04:39,230 --> 00:04:42,730
Errores como, si contraviene una
restricción por clave primaria,

112
00:04:42,730 --> 00:04:43,470
encontrarás que es así.

113
00:04:43,470 --> 00:04:46,550
Y si lo ponemos así, entonces
lo que vamos a hacer es que

114
00:04:46,550 --> 00:04:48,970
vamos a esperar porque la
escritura llegue al "journal".

115
00:04:48,970 --> 00:04:49,580
¿De acuerdo?

116
00:04:49,580 --> 00:04:53,260
Y la idea de establecerlo
a esto es prácticamente

117
00:04:53,260 --> 00:04:55,510
lo mismo que esto.

118
00:04:55,510 --> 00:04:57,970
Si asumes que deseas esperar por
esto para que llegue al "journal",

119
00:04:57,970 --> 00:05:00,230
ignora el hecho que dijiste,
no deseo esperar por la

120
00:05:00,230 --> 00:05:01,300
confirmación.

121
00:05:01,300 --> 00:05:03,260
Hay algunos otros
ajustes para "w"--

122
00:05:03,260 --> 00:05:06,070
otros valores para "w"-- y "w"
es más complejo que sólo eso.

123
00:05:06,070 --> 00:05:08,670
Pero por ahora, eso es una especie
de dónde deseamos dejarlo en

124
00:05:08,670 --> 00:05:11,950
términos de lo que el parámetro
"w" y el parámetro "j" hacen en el

125
00:05:11,950 --> 00:05:13,390
comando "getLastError".

126
00:05:13,390 --> 00:05:16,640
Así, estos valores-- "w" y
"j", en conjunto--

127
00:05:16,640 --> 00:05:18,330
son llamados la concernencia
de escritura (write concern).

128
00:05:18,330 --> 00:05:21,050
Y la concernencia de escritura es,
¿cómo te concierne que tus

129
00:05:21,050 --> 00:05:22,520
escrituras están realmente
completadas antes que

130
00:05:22,520 --> 00:05:24,140
obtengas una respuesta de vuelta?

131
00:05:24,140 --> 00:05:28,310
Ahora, toda esta zona es
enteramente controlada por los

132
00:05:28,310 --> 00:05:32,096
drivers, porque, en el
API subyacente, va a

133
00:05:32,096 --> 00:05:35,180
enviar una inserción sobre
la conexión a Mongo, ¿verdad?

134
00:05:35,180 --> 00:05:36,240
M mayúscula, ¿Está bien?

135
00:05:36,240 --> 00:05:38,220
Y esa es la forma en que funciona.

136
00:05:38,220 --> 00:05:41,410
Y luego, para asegurarte que
la escritura se completó, el

137
00:05:41,410 --> 00:05:44,710
driver entonces tiene que enviar
un segundo comando "getLastError",

138
00:05:44,710 --> 00:05:46,220
que lo hará por ti.

139
00:05:46,220 --> 00:05:49,840
Ahora, cuando establecemos modo
seguro igual a "True", estábamos

140
00:05:49,840 --> 00:05:52,110
estableciendo "w" igual a "1",
y "journal" igual a "0".

141
00:05:52,110 --> 00:05:54,860
Ese fue el modo seguro-- cuando
establecimos "safe" en "True"

142
00:05:54,860 --> 00:05:56,340
al inicio del curso.

143
00:05:56,340 --> 00:06:00,600
Ahora, desde hace mucho tiempo,
si no has hecho nada en absoluto,

144
00:06:00,600 --> 00:06:01,770
esto era lo que obtenías.

145
00:06:01,770 --> 00:06:03,250
Pero recientemente--

146
00:06:03,250 --> 00:06:04,330
la semana pasada--

147
00:06:04,330 --> 00:06:08,800
hicimos un gran cambio, por lo que,
por defecto, si usas los nuevos

148
00:06:08,800 --> 00:06:11,170
métodos recomendados para el driver--

149
00:06:11,170 --> 00:06:13,320
que te voy a mostrar luego
en esta semana--

150
00:06:13,320 --> 00:06:15,240
entonces ahora vas
a obtener esto.

151
00:06:15,240 --> 00:06:17,450
Pero si realmente deseas
asegurarte que estás llegando al

152
00:06:17,450 --> 00:06:21,020
disco antes de continuar, esto es
lo que debería estar usando--

153
00:06:21,020 --> 00:06:23,160
"w=1", "j=1".

154
00:06:23,160 --> 00:06:25,910
Muy bien, así que eso es un
montón de cosas que traté de

155
00:06:25,910 --> 00:06:27,630
aclararte, y esto es algo
complicado, pero vamos a

156
00:06:27,630 --> 00:06:31,210
repasarlo más de una
vez en esta semana.

157
00:06:31,210 --> 00:06:33,280
Pero lo que realmente deseamos
enfatizar es que existe este

158
00:06:33,280 --> 00:06:38,380
concepto de tu concernencia de
escritura y tu modo de "journaling".

159
00:06:38,380 --> 00:06:40,870
Y hay un montón de modos
dentro de los drivers

160
00:06:40,870 --> 00:06:42,050
que te permite escoger.

161
00:06:42,050 --> 00:06:45,360
Y eso, por defecto, dentro
del bajo nivel del API

162
00:06:45,360 --> 00:06:48,780
en Mongo, las operaciones
no son confirmadas.

163
00:06:48,780 --> 00:06:52,590
Esto requiere una segunda llamada
a "getLastError" o algo

164
00:06:52,590 --> 00:06:54,630
para asegurarse que van a
ser confirmadas o que

165
00:06:54,630 --> 00:06:55,510
llegarán al disco.

166
00:06:55,510 --> 00:06:57,490
Y que puedes hacer que los
drivers lo hagan por ti.

167
00:06:57,490 --> 00:06:59,080
Y el shell Mongo hace
exactamente lo mismo que

168
00:06:59,080 --> 00:07:00,460
eso por ti, también.

169
00:07:00,460 --> 00:07:04,020
Esto en realidad llama a "getLastError"
automáticamente cuando llamas a una

170
00:07:04,020 --> 00:07:05,750
inserción o actualización.

171
00:07:05,750 --> 00:07:06,440
Muy bien.

172
00:07:06,440 --> 00:07:09,210
Hagamos un pequeño cuestionario.

173
00:07:09,210 --> 00:07:11,220
Asumiendo que el disco
es persistente, ¿cuáles son

174
00:07:11,220 --> 00:07:14,600
los valores requeridos de "w" y "j"
para garantizar que una inserción o

175
00:07:14,600 --> 00:07:16,520
actualización ha sido escrita
hasta llegar al disco?

176
00:07:16,520 --> 00:07:17,770

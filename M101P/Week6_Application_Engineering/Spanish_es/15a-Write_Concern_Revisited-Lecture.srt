1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:02,540
Ahora que entendemos cómo funcionan
los conjuntos de réplicas, podemos

3
00:00:02,540 --> 00:00:06,450
volver a discutir sobre concernencia
de escritura (write concern) otra vez,

4
00:00:06,450 --> 00:00:08,640
que no hemos hablado en serio,
ya que hemos hablado en

5
00:00:08,640 --> 00:00:10,830
situaciones de un solo mongod.

6
00:00:10,830 --> 00:00:16,079
El parámetro "w" determina
cuántos nodos esperan antes

7
00:00:16,079 --> 00:00:18,640
que la repuesta retorne a ti
cuando haces una inserción.

8
00:00:18,640 --> 00:00:20,190
Y de nuevo, esto se logra
llamando a "getLastError"

9
00:00:20,190 --> 00:00:22,950
desde los drivers
estableciendo "w".

10
00:00:22,950 --> 00:00:27,270
Por lo que en el simple caso
donde tienes los tres nodos que

11
00:00:27,270 --> 00:00:30,360
hemos discutido, tres nodos en un
conjunto de réplicas, estableciendo

12
00:00:30,360 --> 00:00:35,360
"w=1", si este es el
primario, sólo esperará por

13
00:00:35,360 --> 00:00:37,500
la confirmación de la
escritura en el primario.

14
00:00:37,500 --> 00:00:40,450
Estableciendo "w=2", esperará
por el primario y otro nodo

15
00:00:40,450 --> 00:00:42,500
para confirmar la escritura.

16
00:00:42,500 --> 00:00:45,420
Estableciendo "w=3", esperará
por todos los tres para

17
00:00:45,420 --> 00:00:47,490
confirmar la escritura.

18
00:00:47,490 --> 00:00:50,240
Estableciendo "j=1" esperará
por el primario para que la

19
00:00:50,240 --> 00:00:52,620
escritura esté en el disco.

20
00:00:52,620 --> 00:00:55,485
Ahora, cuánto tiempo
espera se llama "wtimeout".

21
00:00:55,485 --> 00:00:58,900
¿Cuánto tiempo estás dispuesto
a esperar para que tus escrituras

22
00:00:58,900 --> 00:01:01,020
sean confirmadas
por el secundario?

23
00:01:01,020 --> 00:01:04,900
Eso es el "wtimeout" que también
se puede establecer en los drivers.

24
00:01:04,900 --> 00:01:07,140
Ahora estos valores,
colectivamente, son

25
00:01:07,140 --> 00:01:08,260
llamados concernencia de
escritura (write concern)--

26
00:01:08,260 --> 00:01:09,870
"w", "j" y "wtimeout".

27
00:01:09,870 --> 00:01:11,500
Y en realidad hay tres distintos

28
00:01:11,500 --> 00:01:13,160
lugares donde pueden
ser establecidos.

29
00:01:13,160 --> 00:01:16,520
Uno de ellos es que puedes
establecerlos en una conexión,

30
00:01:16,520 --> 00:01:18,160
que es la forma que
he estado mostrándote.

31
00:01:18,160 --> 00:01:21,280
También puedes establecerlos
en una colección en los drivers.

32
00:01:21,280 --> 00:01:22,460
No creo que haya mucha
diferencia allí.

33
00:01:22,460 --> 00:01:25,070
Creo que sólo es la
semántica del driver.

34
00:01:25,070 --> 00:01:26,250
Creo que en cualquier
caso, el driver

35
00:01:26,250 --> 00:01:27,610
llama a "getLastError".

36
00:01:27,610 --> 00:01:30,380
Y el último es que cuando
en realidad configuras el

37
00:01:30,380 --> 00:01:34,870
conjunto de réplicas, en
su configuración puedes

38
00:01:34,870 --> 00:01:36,730
establecer esos valores.

39
00:01:36,730 --> 00:01:40,200
Puedes establecer valores por
defecto, que si no le envías,

40
00:01:40,200 --> 00:01:42,300
el conjunto de réplicas siempre
lo manejará de ese manera.

41
00:01:42,300 --> 00:01:45,430
Y pienso que desde el punto de vista
de un administrador de sistemas,

42
00:01:45,430 --> 00:01:47,110
esto es probablemente
lo más rápido de hacer.

43
00:01:47,110 --> 00:01:50,340
Cuando la forma que están usando
los desarrolladores no es el

44
00:01:50,340 --> 00:01:52,530
valor predeterminado que
esperas que sea usado.

45
00:01:52,530 --> 00:01:56,110
Pero en cualquier caso, puedes
hacer cualquiera de las tres.

46
00:01:56,110 --> 00:01:58,950
Hay un par de otras maneras
distintas de usar "w". La primera

47
00:01:58,950 --> 00:02:01,730
es que puedes decir
"w='majority'"--

48
00:02:01,730 --> 00:02:02,700
muy útil.

49
00:02:02,700 --> 00:02:05,800
Y "w='majority'" es el que
va a esperar a la mayoría de

50
00:02:05,800 --> 00:02:08,199
los nodos para replicar.

51
00:02:08,199 --> 00:02:12,050
Ahora, resulta que "w='majority'",
o "w=2" si hubiera

52
00:02:12,050 --> 00:02:17,020
tres nodos, es también lo que
necesitas para evitar "rollbacks"

53
00:02:17,020 --> 00:02:19,760
cuando una conmutación
por error ocurre.

54
00:02:19,760 --> 00:02:23,180
Puedes imaginar si estás
escribiendo a este primario y

55
00:02:23,180 --> 00:02:26,780
estás esperando que tus
escrituras vayan a los secundarios,

56
00:02:26,780 --> 00:02:31,210
luego en esta situación donde
el primario se detiene, este

57
00:02:31,210 --> 00:02:32,480
tiene las escrituras.

58
00:02:32,480 --> 00:02:35,570
Y creo que en esa situación
este sería elegido como

59
00:02:35,570 --> 00:02:37,700
primario si es el que
tiene la prioridad.

60
00:02:37,700 --> 00:02:41,920
No es cierto en eso, así que
no es seguro evitar "rollbacks"

61
00:02:41,920 --> 00:02:43,180
en todas las situaciones.

62
00:02:43,180 --> 00:02:46,890
Pero ese es mi entender, que
"w='majority'" es suficiente para

63
00:02:46,890 --> 00:02:49,530
evitar el "rollback".

64
00:02:49,530 --> 00:02:54,220
Es importante también notar que
"j", que es quien espera por

65
00:02:54,220 --> 00:02:57,945
asegurar la operación al "journal",
estás esperando sólo que se asegure

66
00:02:57,945 --> 00:03:00,190
en el "journal" del nodo primario.

67
00:03:00,190 --> 00:03:02,620
No estás esperando para que
se asegure al "journal" de

68
00:03:02,620 --> 00:03:04,240
los nodos secundarios.

69
00:03:04,240 --> 00:03:09,290
Por lo que no hay garantía que
se esté asegurando al "journal"

70
00:03:09,290 --> 00:03:10,100
en el segundo nodo.

71
00:03:10,100 --> 00:03:13,175
Así que puedes imaginar algunos
locos escenarios donde el primario

72
00:03:13,175 --> 00:03:15,540
y el secundario son destruidos.

73
00:03:15,540 --> 00:03:17,980
O tal vez éste está destruido
permanentemente y éste sólo

74
00:03:17,980 --> 00:03:18,730
temporalmente.

75
00:03:18,730 --> 00:03:21,960
Pero porque sólo esperaste por
"w='majority'" y porque en realidad

76
00:03:21,960 --> 00:03:24,530
esto no fue asegurado
todo en el disco donde

77
00:03:24,530 --> 00:03:28,530
sucedieron simultáneamente, entonces
podrías perder esa escritura.

78
00:03:28,530 --> 00:03:31,760
De todos modos, podría establecer
"w='majority'", puedes establecer

79
00:03:31,760 --> 00:03:33,620
"w" igual a un número, que es
el número de nodos que deseas

80
00:03:33,620 --> 00:03:35,350
esperar antes de continuar.

81
00:03:35,350 --> 00:03:38,470
Y luego también hay una manera de
poner "w" igual a un valor de etiqueta.

82
00:03:38,470 --> 00:03:40,640
Y voy a repasar eso un poco acerca

83
00:03:40,640 --> 00:03:41,510
de lo que podría hacer.

84
00:03:41,510 --> 00:03:45,180
Puedes etiquetar algunos
de estos nodos.

85
00:03:45,180 --> 00:03:47,990
Veamos el programa
que deseo mostrarte.

86
00:03:47,990 --> 00:03:53,370
Este programa establece
"w=3" y si recuerdas,

87
00:03:53,370 --> 00:03:56,520
uno de los nodos tiene un retraso.

88
00:03:56,520 --> 00:04:01,650
Y lo que debería pasar es
que debería ser muy lento

89
00:04:01,650 --> 00:04:05,240
para escribir eso cuando esté
esperando por todos los tres nodos.

90
00:04:05,240 --> 00:04:06,750
Y puse un tiempo
bastante largo--

91
00:04:06,750 --> 00:04:08,990
10000 segundos en
él, y sólo va a

92
00:04:08,990 --> 00:04:09,800
tener que esperar 5.

93
00:04:09,800 --> 00:04:12,060
Así que veamos lo
que sucede allí.

94
00:04:12,060 --> 00:04:19,300

95
00:04:19,300 --> 00:04:23,630
Puedes ver que estamos con un desfase
de espera de unos cinco segundos

96
00:04:23,630 --> 00:04:25,420
entre cada escritura.

97
00:04:25,420 --> 00:04:28,720
Y la razón es que el "w" fue
establecido a tres, que quiere

98
00:04:28,720 --> 00:04:31,590
decir que todos los tres nodos
necesitan confirmar la escritura.

99
00:04:31,590 --> 00:04:36,740
Y porque uno de los nodos
está, si recuerdas, ejecutándose

100
00:04:36,740 --> 00:04:41,280
con retraso, éste no obtiene la
escritura por unos cinco segundos.

101
00:04:41,280 --> 00:04:44,280
Puedes verlo justo ahí.

102
00:04:44,280 --> 00:04:46,860
Uno de esos está
ejecutándose con retraso.

103
00:04:46,860 --> 00:04:48,100
¿Dónde se muestra eso?

104
00:04:48,100 --> 00:04:51,026
Oh, podría estar sólo
en la configuración.

105
00:04:51,026 --> 00:04:52,230
Veamos en la configuración--

106
00:04:52,230 --> 00:04:53,560
ah, ahí vamos.

107
00:04:53,560 --> 00:04:57,330
Sí, por lo que en la configuración
"rs.conf", puedes ver que este

108
00:04:57,330 --> 00:05:00,500
de aquí está con un
retraso de cinco segundos.

109
00:05:00,500 --> 00:05:05,510
Además, sólo para que lo sepas,
si usas "rs.help" puedes obtener

110
00:05:05,510 --> 00:05:09,530
muchos pequeños comandos que
tienen que ver con conjuntos de

111
00:05:09,530 --> 00:05:11,920
réplicas en el shell Mongo.

112
00:05:11,920 --> 00:05:14,360
Y puedes mirar en la
documentación de todos estos.

113
00:05:14,360 --> 00:05:17,900
Puedes buscarlo en Google y
mirar en la documentación.

114
00:05:17,900 --> 00:05:20,230
Muy bien, hagamos un cuestionario.

115
00:05:20,230 --> 00:05:22,590
La pregunta es, si
estableces "w=1" y "j=1",

116
00:05:22,590 --> 00:05:26,420
¿es posible tener un "rollback"
para una escritura ya asegurada

117
00:05:26,420 --> 00:05:27,960
en el primario en una
conmutación por error?

118
00:05:27,960 --> 00:05:29,210
¿Cuál es la respuesta?

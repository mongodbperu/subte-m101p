1
00:00:00,000 --> 00:00:00,240

2
00:00:00,240 --> 00:00:04,070
Ahora, creemos un pequeño conjunto
de réplicas sólo en este

3
00:00:04,070 --> 00:00:06,830
equipo que estoy usando para
que puedas ver cómo funciona.

4
00:00:06,830 --> 00:00:08,990
Normalmente, cuando creas un
conjunto de réplicas, vas a

5
00:00:08,990 --> 00:00:14,290
poner uno de los mongod en cada
servidor físico para que

6
00:00:14,290 --> 00:00:16,050
realmente haya tolerancia
a fallos aquí.

7
00:00:16,050 --> 00:00:17,840
Y muy bien podrías
ejecutarlos todos ellos

8
00:00:17,840 --> 00:00:18,920
en el puerto estándar.

9
00:00:18,920 --> 00:00:20,940
Pero vamos a hacer eso
sólo en un único nodo.

10
00:00:20,940 --> 00:00:23,630
Y para hacer eso, voy a
tener que ejecutarlos en puertos

11
00:00:23,630 --> 00:00:25,810
diferentes para que no haya
conflictos entre ellos.

12
00:00:25,810 --> 00:00:28,010
He escrito un pequeño
script aquí llamado

13
00:00:28,010 --> 00:00:31,600
"create_replica_set.sh", y va a
estar disponible para

14
00:00:31,600 --> 00:00:34,180
descargar si quieres
descargarlo.

15
00:00:34,180 --> 00:00:37,440
Y va a crear tres
directorios, "/data/rs1",

16
00:00:37,440 --> 00:00:40,270
"/data/rs2" y "/data/rs3".

17
00:00:40,270 --> 00:00:42,620
Y no existen justo
ahora, por lo que los

18
00:00:42,620 --> 00:00:43,730
creará realmente.

19
00:00:43,730 --> 00:00:46,910
Y luego va a iniciar
tres instancias de mongod.

20
00:00:46,910 --> 00:00:50,510
Ahora, tiene que declarar que cada
una es parte del mismo conjunto

21
00:00:50,510 --> 00:00:53,830
de réplicas, así que
"-replSet rs1".

22
00:00:53,830 --> 00:00:57,650
Y esto simplemente le está diciendo
que debería poner su log en un

23
00:00:57,650 --> 00:00:59,700
fichero log llamado "1.log".

24
00:00:59,700 --> 00:01:02,310
Y luego esto es el "dbpath"
donde va a poner sus

25
00:01:02,310 --> 00:01:03,210
ficheros de datos.

26
00:01:03,210 --> 00:01:05,620
Así que de nuevo, "/data/rs1".

27
00:01:05,620 --> 00:01:07,690
Y luego va a elegir
un puerto donde va

28
00:01:07,690 --> 00:01:08,710
a escuchar.

29
00:01:08,710 --> 00:01:10,750
Éste va a tener el privilegio
de escuchar en el

30
00:01:10,750 --> 00:01:11,830
puerto estándar.

31
00:01:11,830 --> 00:01:13,515
Y lo va a hacer en
paralelo, lo que va

32
00:01:13,515 --> 00:01:14,650
a permitirle volver.

33
00:01:14,650 --> 00:01:16,720
Y de esa forma no tiene
que ejecutar esto cada uno

34
00:01:16,720 --> 00:01:18,090
uno en su propio shell.

35
00:01:18,090 --> 00:01:20,210
Así que éstos son comandos que
van a funcionar

36
00:01:20,210 --> 00:01:21,980
con el shell bash.

37
00:01:21,980 --> 00:01:24,940
En Windows será ligeramente
diferente, pero funcionará

38
00:01:24,940 --> 00:01:26,750
en la mayoría de equipos UNIX.

39
00:01:26,750 --> 00:01:29,380
Así que vamos a ejecutar "bash" y
luego "create_replica_set.sh".

40
00:01:29,380 --> 00:01:31,890

41
00:01:31,890 --> 00:01:34,440
Y entonces se inicia todo.

42
00:01:34,440 --> 00:01:37,130
Podemos ver qué hay en
uno de los ficheros de log.

43
00:01:37,130 --> 00:01:40,270
Miraremos en "1.log".

44
00:01:40,270 --> 00:01:43,700
Básicamente está sólo advirtiendo
que no está totalmente

45
00:01:43,700 --> 00:01:44,850
configurado todavía.

46
00:01:44,850 --> 00:01:48,140
Por lo que en este punto tengo tres
servidores en ejecución, pero

47
00:01:48,140 --> 00:01:50,770
no están inicializados todavía
para que se conozcan entre ellos.

48
00:01:50,770 --> 00:01:55,540
Porque si te fijas en ese
script, no le hablé al

49
00:01:55,540 --> 00:01:57,370
primero sobre el segundo
o al segundo

50
00:01:57,370 --> 00:01:58,190
sobre el tercero.

51
00:01:58,190 --> 00:02:01,370
Así que no hay forma de que puedan
actuar conjuntamente por ahora.

52
00:02:01,370 --> 00:02:04,550
Básicamente son
independientes y se están

53
00:02:04,550 --> 00:02:05,590
ejecutando en un puerto.

54
00:02:05,590 --> 00:02:07,400
Y por eso ahora necesitamos
enlazarlos.

55
00:02:07,400 --> 00:02:10,020
Para hacer eso tenemos
que ejecutar un comando en

56
00:02:10,020 --> 00:02:11,620
el shell Mongo.

57
00:02:11,620 --> 00:02:13,310
Te enseñaré cómo
son esos comandos.

58
00:02:13,310 --> 00:02:17,600

59
00:02:17,600 --> 00:02:20,410
OK, así que tenemos que crear
una configuración.

60
00:02:20,410 --> 00:02:24,710
Y esta configuración es
como este documento que tiene un

61
00:02:24,710 --> 00:02:26,450
nombre arbitrario, "config", aquí.

62
00:02:26,450 --> 00:02:30,050
Tengo que llamarlo con "_id" igual
al nombre del conjunto de réplicas

63
00:02:30,050 --> 00:02:31,840
que le di a cada uno
de los mongod.

64
00:02:31,840 --> 00:02:34,380
Y luego tengo un array "members"
que va a indicar los

65
00:02:34,380 --> 00:02:36,220
tres miembros.

66
00:02:36,220 --> 00:02:38,010
Y los identificadores son arbitrarios.

67
00:02:38,010 --> 00:02:39,560
Tienen que ser únicos.

68
00:02:39,560 --> 00:02:41,060
Y éstos son los hosts.

69
00:02:41,060 --> 00:02:42,680
Van a ser parte
del conjunto de réplicas.

70
00:02:42,680 --> 00:02:47,715
El primero es 27017, 
el segundo está en el 27018 y el

71
00:02:47,715 --> 00:02:49,570
tercero está en el 27019.

72
00:02:49,570 --> 00:02:52,650
También, para este primero,
decidí que sea con un

73
00:02:52,650 --> 00:02:55,130
retraso de cinco segundos con
respecto a los otros.

74
00:02:55,130 --> 00:02:58,460
Por lo que no va a obtener sus
datos hasta cinco segundos tras

75
00:02:58,460 --> 00:03:01,740
las otras máquinas, así que
podemos ver más fácilmente qué

76
00:03:01,740 --> 00:03:03,200
está pasando con la replicación.

77
00:03:03,200 --> 00:03:06,970
Y para hacer eso, el subsistema de
replicación requiere

78
00:03:06,970 --> 00:03:09,370
que no le permitas
convertirse en primario.

79
00:03:09,370 --> 00:03:12,730
Por lo que le establezco "priority"
igual a cero.

80
00:03:12,730 --> 00:03:16,160
Y luego simplemente llamo a
"rs.initiate(config)" --

81
00:03:16,160 --> 00:03:17,660
esto es un comando del shell
Mongo --

82
00:03:17,660 --> 00:03:20,190
con ese documento de
configuración.

83
00:03:20,190 --> 00:03:22,860
Y ahora simplemente obtengo el estado
para ver cómo va.

84
00:03:22,860 --> 00:03:26,360
Ahora voy a hacer un "pipe" de eso
en uno de los shells Mongo,

85
00:03:26,360 --> 00:03:29,470
por lo que quiero conectarme a --

86
00:03:29,470 --> 00:03:33,570
en realidad no puedo ejecutar este
comando de iniciación en el 27017

87
00:03:33,570 --> 00:03:38,100
porque no puedes inicializar un
conjunto de réplicas desde un host que

88
00:03:38,100 --> 00:03:40,680
no puede ser primario y éste
no puede llegar a ser primario.

89
00:03:40,680 --> 00:03:43,530
Por lo que voy a tener que hacerlo
conectándome al 27018.

90
00:03:43,530 --> 00:03:46,420
Otra cosa a notar para todos los que
son usuarios UNIX por ahí.

91
00:03:46,420 --> 00:03:49,660
Te darás cuenta que no
llamé a esto "localhost".

92
00:03:49,660 --> 00:03:52,410
Lo llamé "andrews-imac.local".

93
00:03:52,410 --> 00:03:54,890
No tengo mucha suerte
en mi Mac usando "localhost"

94
00:03:54,890 --> 00:03:56,510
como nombre de host.

95
00:03:56,510 --> 00:03:57,530
No estoy seguro de por qué.

96
00:03:57,530 --> 00:03:59,620
Así es como la máquina piensa
que se llama y eso

97
00:03:59,620 --> 00:04:03,250
parece resolverse con
"getaddrinfo", el comando UNIX.

98
00:04:03,250 --> 00:04:05,500
Es necesario mapear 
nombres a IPs.

99
00:04:05,500 --> 00:04:07,300
Así que usé eso.

100
00:04:07,300 --> 00:04:13,720
Y voy a conectarme,
--port 27018.

101
00:04:13,720 --> 00:04:15,490
Y si hago eso, simplemente
obtengo el shell.

102
00:04:15,490 --> 00:04:18,040
Estoy en el shell
de este mongod.

103
00:04:18,040 --> 00:04:22,140
Ahora, en cambio, voy a leer
de este script de inicialización,

104
00:04:22,140 --> 00:04:24,880
"init_replica.js",
y debería

105
00:04:24,880 --> 00:04:26,420
inicializar mi conjunto de réplicas.

106
00:04:26,420 --> 00:04:29,060
Dice que debería estar en línea
en alrededor de un minuto.

107
00:04:29,060 --> 00:04:34,050
Conectémonos ahora,
de nuevo, y luego ejecuta --

108
00:04:34,050 --> 00:04:36,430
oh, mira eso.

109
00:04:36,430 --> 00:04:39,000
Ves que ocurre algo 
diferente la primera vez.

110
00:04:39,000 --> 00:04:41,770
Ahora nos conectamos al
puerto del servidor.

111
00:04:41,770 --> 00:04:45,700
En lugar de obtener simplemente un
indicador normal del shell, obtengo

112
00:04:45,700 --> 00:04:48,010
este "rs1:SECONDARY>"

113
00:04:48,010 --> 00:04:50,400
diciéndome que estoy
en el secundario.

114
00:04:50,400 --> 00:04:52,650
"rs.status()" me va a dar el estado 
de mi conjunto de réplicas.

115
00:04:52,650 --> 00:04:54,480
Voy a hacer eso.

116
00:04:54,480 --> 00:04:59,510
Y si hago eso lo que averiguo
es que tengo tres

117
00:04:59,510 --> 00:05:02,570
nodos en mi conjunto de réplicas, dos
de ellos están en un estado

118
00:05:02,570 --> 00:05:05,080
"RECOVERING" y el otro, al que
estoy conectado, está en

119
00:05:05,080 --> 00:05:06,540
estado "PRIMARY".

120
00:05:06,540 --> 00:05:09,870
Así que probablemente va a
resolverse momentáneamente.

121
00:05:09,870 --> 00:05:13,890
Déjame que mire de nuevo,
y ahora está funcionando.

122
00:05:13,890 --> 00:05:18,370
Así que secundario, primario,
secundario.

123
00:05:18,370 --> 00:05:20,360
Perfecto.

124
00:05:20,360 --> 00:05:22,460
Por tanto ahora está todo bien.

125
00:05:22,460 --> 00:05:25,370
Pero ahora estoy en un secundario aquí,
por lo que no podré hacer

126
00:05:25,370 --> 00:05:26,560
ninguna escritura.

127
00:05:26,560 --> 00:05:29,500
Así que me voy a desconectar
de éste y voy a ir al

128
00:05:29,500 --> 00:05:31,320
primario, que parece que
está en --

129
00:05:31,320 --> 00:05:32,260
oh, estoy en un primario.

130
00:05:32,260 --> 00:05:33,320
Lo siento.

131
00:05:33,320 --> 00:05:34,570
Inicialmente estaba en un secundario.

132
00:05:34,570 --> 00:05:36,880
Cambió el indicador del shell, supongo,

133
00:05:36,880 --> 00:05:38,280
porque ahora estoy en un primario.

134
00:05:38,280 --> 00:05:38,720
¿Es eso cierto?

135
00:05:38,720 --> 00:05:40,930
Volvamos aquí.

136
00:05:40,930 --> 00:05:44,130
Sí, cuando me conecté por primera vez,
creí que era un secundario,

137
00:05:44,130 --> 00:05:46,120
pero en cuanto levantó completamente
el conjunto de réplicas me 

138
00:05:46,120 --> 00:05:46,950
transformó en primario.

139
00:05:46,950 --> 00:05:47,850
OK.

140
00:05:47,850 --> 00:05:49,680
Así que, bien, estoy en el primario.

141
00:05:49,680 --> 00:05:52,960
Si me desconecto y conecto
a uno de los otros nodos, 

142
00:05:52,960 --> 00:05:54,310
debería ver que es un secundario.

143
00:05:54,310 --> 00:05:56,110
Y es un secundario.

144
00:05:56,110 --> 00:05:59,910
Y si me conecto al último
nodo, que está en el 27019,

145
00:05:59,910 --> 00:06:02,560
debería ver que
es un secundario.

146
00:06:02,560 --> 00:06:03,690
OK.

147
00:06:03,690 --> 00:06:06,970
Y si intento escribir al
secundario, no voy

148
00:06:06,970 --> 00:06:08,790
a tener suerte.

149
00:06:08,790 --> 00:06:09,730
Escribamos al primario.

150
00:06:09,730 --> 00:06:14,770
Así que voy a salir
de ahí y ya

151
00:06:14,770 --> 00:06:16,490
estoy usando "test".

152
00:06:16,490 --> 00:06:22,010
"db.people.insert({name: 'Andrew'})".

153
00:06:22,010 --> 00:06:24,490
Veamos si se inserta
ese documento.

154
00:06:24,490 --> 00:06:26,420
Lo inserté.

155
00:06:26,420 --> 00:06:32,190
Y ahora vayamos a uno de los
secundarios y veamos qué

156
00:06:32,190 --> 00:06:33,440
hay en la colección.

157
00:06:33,440 --> 00:06:36,820

158
00:06:36,820 --> 00:06:37,830
¿Qué dice ahora?

159
00:06:37,830 --> 00:06:40,550
Dice, no puedo consultar esto
porque soy un secundario y

160
00:06:40,550 --> 00:06:42,870
no puedes consultar secundarios
por defecto.

161
00:06:42,870 --> 00:06:44,590
Así que, ¿cómo hacemos eso?

162
00:06:44,590 --> 00:06:50,050
Bien, hay un comando llamado
"db.slaveOk()", lo

163
00:06:50,050 --> 00:06:53,170
siento, "rs.slaveOk()", que
va a permitir esta

164
00:06:53,170 --> 00:06:54,230
conexión.

165
00:06:54,230 --> 00:06:56,360
Recuerda, lo que tenemos justo
ahora es el shell Mongo

166
00:06:56,360 --> 00:06:57,640
vinculado a un mongod.

167
00:06:57,640 --> 00:07:01,030
Y tienes que configurar esta
conexión para decirle que estás

168
00:07:01,030 --> 00:07:03,120
de acuerdo en leer de un secundario.

169
00:07:03,120 --> 00:07:04,500
Y una vez que hago
eso, debería ser

170
00:07:04,500 --> 00:07:05,520
capaz de hacer la consulta.

171
00:07:05,520 --> 00:07:07,070
Veamos.

172
00:07:07,070 --> 00:07:10,810
Si hago el "find" veo
que ahí está mi objeto.

173
00:07:10,810 --> 00:07:12,990
Por lo que puedes ver que ahora mi
objeto se replicó a un

174
00:07:12,990 --> 00:07:14,260
segundo servidor.

175
00:07:14,260 --> 00:07:16,050
Y si voy al último
servidor, entonces 

176
00:07:16,050 --> 00:07:17,050
también debería obtenerlo.

177
00:07:17,050 --> 00:07:22,770
Veamos cómo se ve
"rs.status()".

178
00:07:22,770 --> 00:07:29,570
Así que mis secundarios están en los
puertos 27019 y 27017.

179
00:07:29,570 --> 00:07:33,600
Yo estaba en el nueve, por lo que
nos vamos al siete.

180
00:07:33,600 --> 00:07:39,400
Y ejecutemos el comando
"rs.slaveOk()" y luego

181
00:07:39,400 --> 00:07:40,990
hagamos "db.people.find()".

182
00:07:40,990 --> 00:07:43,520

183
00:07:43,520 --> 00:07:45,490
Y veremos que se
ha replicado eso.

184
00:07:45,490 --> 00:07:48,140
Y eso es simplemente lo básico
para enseñarte cómo crear un

185
00:07:48,140 --> 00:07:50,080
conjunto de réplicas en Mongo.

186
00:07:50,080 --> 00:07:52,270
Y voy a subir estos scripts 
a los ficheros de la lección

187
00:07:52,270 --> 00:07:54,120
de esta semana, por lo que realmente
te animo a hacer esto

188
00:07:54,120 --> 00:07:58,090
por ti mismo para que puedas jugar
con esto y ver cómo funciona.

189
00:07:58,090 --> 00:07:59,893
Ahora hagamos un cuestionario.

190
00:07:59,893 --> 00:08:02,690

191
00:08:02,690 --> 00:08:03,430
Aquí está el cuestionario.

192
00:08:03,430 --> 00:08:05,430
¿Qué comando, cuando se lanza
desde el shell Mongo,

193
00:08:05,430 --> 00:08:07,360
te permitirá leer de
un secundario?

194
00:08:07,360 --> 00:08:10,550
"db.isMaster()", "db.adminCommand(
{'readPreference': 'Secondary'})",

195
00:08:10,550 --> 00:08:14,600
"rs.setStatus('Primary')"
o "rs.slaveOk()"?

196
00:08:14,600 --> 00:08:16,330
¿Cuál te dejará leer
de un secundario?

197
00:08:16,330 --> 00:08:17,580
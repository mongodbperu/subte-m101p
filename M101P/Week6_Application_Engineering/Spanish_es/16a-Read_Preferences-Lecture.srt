1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:03,040
Como hemos hablado antes,
por defecto en los drivers

3
00:00:03,040 --> 00:00:07,200
vas a leer del mismo nodo del

4
00:00:07,200 --> 00:00:08,680
que escribes.

5
00:00:08,680 --> 00:00:11,150
Así que si este es tu primario
y estás escribiendo aquí y esto

6
00:00:11,150 --> 00:00:13,230
es el conjunto de réplicas
y hay cinco de estos, vas a

7
00:00:13,230 --> 00:00:14,570
leer desde el mismo nodo.

8
00:00:14,570 --> 00:00:19,010
Pero puedes cambiar eso especificando
una preferencia de lectura.

9
00:00:19,010 --> 00:00:21,370
Y la preferencia de lectura dice
que, digamos puedes desear

10
00:00:21,370 --> 00:00:22,640
leer desde los secundarios.

11
00:00:22,640 --> 00:00:25,020
Ahora, hay varias preferencias
de lectura estándar que

12
00:00:25,020 --> 00:00:27,610
se configuran normalmente
dentro de los drivers.

13
00:00:27,610 --> 00:00:29,890
PyMongo tiene 4 distintas.

14
00:00:29,890 --> 00:00:32,850
La primera es que te
guste leer siempre

15
00:00:32,850 --> 00:00:33,940
desde el primario.

16
00:00:33,940 --> 00:00:35,640
Y lo que significa es
obviamente que deseas

17
00:00:35,640 --> 00:00:39,310
leer lo que escribes, y que
esto va a ir hacia el primario.

18
00:00:39,310 --> 00:00:42,100
Podrías decir que siempre
deseas leer del secundario,

19
00:00:42,100 --> 00:00:44,480
lo que significa que si no
hay un secundario disponible,

20
00:00:44,480 --> 00:00:46,850
en realidad no va a ser
capaz de hacer lecturas.

21
00:00:46,850 --> 00:00:49,830
Podrías decir que prefieres
el secundario pero tomarás

22
00:00:49,830 --> 00:00:52,170
un primario si no
hay secundario.

23
00:00:52,170 --> 00:00:55,260
Y puedes decir que prefieres
el primario, pero que si no hay

24
00:00:55,260 --> 00:00:57,585
un primario disponible,
tomarás un secundario.

25
00:00:57,585 --> 00:00:59,590
También hay varias otras
distintas cosas que no vamos

26
00:00:59,590 --> 00:01:00,390
a repasarlas mucho.

27
00:01:00,390 --> 00:01:03,580
Una es que puedes decir que
deseas el más cercano y los

28
00:01:03,580 --> 00:01:05,850
drivers tienen una noción
de cuál es el más cercano,

29
00:01:05,850 --> 00:01:08,670
ellos hacen "ping" periódicamente
y saben qué puntos están más

30
00:01:08,670 --> 00:01:09,940
lejos de cada uno de ellos.

31
00:01:09,940 --> 00:01:11,800
Así que puedes decir que
deseas el más cercano.

32
00:01:11,800 --> 00:01:15,510
Y también hay un
concepto de etiquetas.

33
00:01:15,510 --> 00:01:19,180
Y puedes asignar etiquetas a
cada uno de ellos, los hosts del

34
00:01:19,180 --> 00:01:20,190
conjunto de réplicas.

35
00:01:20,190 --> 00:01:23,120
Y luego podrías decir, oh,
deseo que mis lecturas vayan a

36
00:01:23,120 --> 00:01:25,400
un conjunto de hosts con
una etiqueta particular.

37
00:01:25,400 --> 00:01:29,020
Por lo que esto podrías ser bueno,
para digamos si el primario está en,

38
00:01:29,020 --> 00:01:32,060
digamos California, pero
tienes réplicas en todo los

39
00:01:32,060 --> 00:01:35,750
Estados Unidos, y deseas
leer siempre de uno que está

40
00:01:35,750 --> 00:01:37,120
muy cerca, se podría
decir, ya sabes qué.

41
00:01:37,120 --> 00:01:39,680
Deseo leer desde el centro
de datos en Nueva York porque

42
00:01:39,680 --> 00:01:41,770
sé que este usuario tiene sus
datos cerca a Nueva York.

43
00:01:41,770 --> 00:01:44,230
Ahora, eso es suponiendo que estás
de acuerdo con la idea que los

44
00:01:44,230 --> 00:01:46,030
datos puedan estar un
poco desactualizados.

45
00:01:46,030 --> 00:01:49,790
Así que podrías imaginar en una
situación donde es un sistema de

46
00:01:49,790 --> 00:01:51,660
redes sociales y este es un muro.

47
00:01:51,660 --> 00:01:55,900
Y realmente no importa si veo
una actualización en mi muro,

48
00:01:55,900 --> 00:01:57,570
siempre y cuando los
vea eventualmente.

49
00:01:57,570 --> 00:02:00,800
Luego podrías imaginar hacer
una lectura que está más cerca

50
00:02:00,800 --> 00:02:02,310
de mi geográficamente.

51
00:02:02,310 --> 00:02:05,430
Así que nos fijamos en el driver
para entender donde están estas

52
00:02:05,430 --> 00:02:08,940
distintas opciones,
te las mostraré aquí.

53
00:02:08,940 --> 00:02:11,410
Esta es la página de PyMongo.

54
00:02:11,410 --> 00:02:14,410
Puedes ver que las opciones
sólo existen si usas la clase

55
00:02:14,410 --> 00:02:16,100
MongoReplicaSetClient, que es

56
00:02:16,100 --> 00:02:17,910
la clase de conexión alternativa.

57
00:02:17,910 --> 00:02:21,090
Y si lo haces, entonces puedes
establecer un montón de preferencias

58
00:02:21,090 --> 00:02:23,530
de lectura a nivel
de la base de datos.

59
00:02:23,530 --> 00:02:27,000
Y aquí están listadas en el driver.

60
00:02:27,000 --> 00:02:30,100
Y sólo necesitas mirar
en el driver para tu

61
00:02:30,100 --> 00:02:32,220
lenguaje en particular para
entender cómo obtener las

62
00:02:32,220 --> 00:02:33,670
distintas preferencias de lectura.

63
00:02:33,670 --> 00:02:36,410
Otra vez, hay primario,
primario preferido, secundario,

64
00:02:36,410 --> 00:02:39,190
secundario preferido,
y más cercano.

65
00:02:39,190 --> 00:02:41,180
Y como dije, hay también
una forma para hacer

66
00:02:41,180 --> 00:02:42,710
algunas cosas con etiquetas.

67
00:02:42,710 --> 00:02:44,930
No voy a repasarlo ahora mismo.

68
00:02:44,930 --> 00:02:48,510
Ahora, algo que piensa mucha
gente es que asume automáticamente

69
00:02:48,510 --> 00:02:50,580
que las lecturas del
secundario escalan su

70
00:02:50,580 --> 00:02:53,490
rendimiento, pero no siempre

71
00:02:53,490 --> 00:02:54,420
funciona tan bien.

72
00:02:54,420 --> 00:02:56,510
Y de hecho, ese es el objeto
de nuestro cuestionario.

73
00:02:56,510 --> 00:02:58,020
Y por eso voy a pedirte que
pienses en eso y luego vamos

74
00:02:58,020 --> 00:02:59,320
a hablar de eso.

75
00:02:59,320 --> 00:03:00,680
Así que vayamos al cuestionario.

76
00:03:00,680 --> 00:03:02,450
Muy bien, aquí está el cuestionario.

77
00:03:02,450 --> 00:03:04,610
Puedes configurar tu aplicación
a través del driver para leer

78
00:03:04,610 --> 00:03:06,920
de los nodos secundarios
en el conjunto de réplicas.

79
00:03:06,920 --> 00:03:09,140
¿Cuáles son las razones que podrías
tener para no desear hacer eso?

80
00:03:09,140 --> 00:03:11,010
Marca todas las que apliquen.

81
00:03:11,010 --> 00:03:12,870
Y voy a repasar
las razones contigo.

82
00:03:12,870 --> 00:03:14,910
Si el tráfico de escritura es
significativamente mayor que

83
00:03:14,910 --> 00:03:17,200
tu tráfico de lectura, podrías
"abrumar" al secundario, que

84
00:03:17,200 --> 00:03:19,760
debe procesar todas las escrituras,
así como las lecturas.

85
00:03:19,760 --> 00:03:22,060
Puede resultar una
demora de replicación.

86
00:03:22,060 --> 00:03:24,830
Podrías no leer lo que escribiste
previamente a MongoDB si lees

87
00:03:24,830 --> 00:03:25,890
desde los secundarios.

88
00:03:25,890 --> 00:03:28,770
Si el hardware de un secundario tiene
insuficiente memoria para mantener

89
00:03:28,770 --> 00:03:31,640
la lectura en la memoria del conjunto
de trabajo, dirigirá las lecturas

90
00:03:31,640 --> 00:03:33,040
un poco más lentamente.

91
00:03:33,040 --> 00:03:35,770
Dirigiendo las lecturas
reducirá la velocidad.

92
00:03:35,770 --> 00:03:37,720
Y luego finalmente, leyendo de
secundarios previene que sea

93
00:03:37,720 --> 00:03:39,160
promovido a un primario.

94
00:03:39,160 --> 00:03:41,620
Así que marca todas las que apliquen
y luego discutiremos la respuesta.

95
00:03:41,620 --> 00:03:42,870
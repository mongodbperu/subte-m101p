1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:00,440
OK.

3
00:00:00,440 --> 00:00:03,320
Hemos hablado acerca de cómo conseguimos
durabilidad en un nodo único

4
00:00:03,320 --> 00:00:06,070
esperando que las escrituras, digamos,
vayan al log.

5
00:00:06,070 --> 00:00:09,080
Pero ¿cómo conseguimos disponibilidad,
y cómo conseguimos

6
00:00:09,080 --> 00:00:10,450
tolerancia a fallos?

7
00:00:10,450 --> 00:00:13,100
Y con eso, quiero decir que si este
nodo se cae, queremos 

8
00:00:13,100 --> 00:00:14,830
todavía ser capaces
de usar el sistema.

9
00:00:14,830 --> 00:00:17,990
Y si el nodo primario se cae
y lo perdemos completamente

10
00:00:17,990 --> 00:00:20,570
por alguna razón, digamos que
hay un incendio, ¿cómo nos aseguramos

11
00:00:20,570 --> 00:00:23,220
que no perdemos nuestros datos
entre las copias de seguridad?

12
00:00:23,220 --> 00:00:26,800
Y por eso lo que hacemos para resolver
estos dos problemas es

13
00:00:26,800 --> 00:00:28,330
introducir la replicación.

14
00:00:28,330 --> 00:00:30,620
Y te enseñaré
cómo funciona.

15
00:00:30,620 --> 00:00:33,400
Tenemos el concepto
de conjunto de réplicas.

16
00:00:33,400 --> 00:00:36,445
Y un conjunto de réplicas es
un conjunto de nodos Mongo.

17
00:00:36,445 --> 00:00:38,380
Y voy a mostrarte
tres nodos.

18
00:00:38,380 --> 00:00:43,370
Y éstos son todos Mongo,
mongods que trabajan juntos y

19
00:00:43,370 --> 00:00:45,950
son espejos entre ellos en
términos de datos.

20
00:00:45,950 --> 00:00:48,640
Hay un nodo primario y 
luego los otros nodos son

21
00:00:48,640 --> 00:00:49,670
secundarios.

22
00:00:49,670 --> 00:00:50,940
Pero eso es dinámico.

23
00:00:50,940 --> 00:00:53,990
Y los datos que se escriben al
primario se replicarán

24
00:00:53,990 --> 00:00:56,300
asíncronamente a los secundarios.

25
00:00:56,300 --> 00:01:00,020
Tu aplicación y sus drivers
permanecen conectados al

26
00:01:00,020 --> 00:01:03,450
primario y escribirán
al primario.

27
00:01:03,450 --> 00:01:05,110
Sólo puedes escribir
al primario.

28
00:01:05,110 --> 00:01:08,950
Si el primario se cae, entonces
los nodos restantes, en este

29
00:01:08,950 --> 00:01:13,290
caso estos dos nodos
realizarán una elección para elegir

30
00:01:13,290 --> 00:01:14,170
un nuevo primario.

31
00:01:14,170 --> 00:01:17,610
Para elegir un nuevo primario, debes
tener una mayoría estricta

32
00:01:17,610 --> 00:01:18,740
del número original
de nodos.

33
00:01:18,740 --> 00:01:21,630
Como el número original de
nodos aquí era tres,

34
00:01:21,630 --> 00:01:23,480
necesitarías dos nodos para elegir un
nuevo primario, y ése es

35
00:01:23,480 --> 00:01:24,670
el número que tenemos.

36
00:01:24,670 --> 00:01:27,870
Por lo que si se cayera, entonces éste
puede convertirse en primario.

37
00:01:27,870 --> 00:01:30,960
Y en este punto, lo que
ocurriría es que tu aplicación

38
00:01:30,960 --> 00:01:34,490
se reconectaría al primario para
las escrituras, a través de los drivers.

39
00:01:34,490 --> 00:01:35,640
Todo de manera transparente.

40
00:01:35,640 --> 00:01:38,470
Así, este grupo de nodos 
se llama conjunto de réplicas.

41
00:01:38,470 --> 00:01:41,160
Y va a formar el
mecanismo básico por el cual

42
00:01:41,160 --> 00:01:44,410
conseguiremos tolerancia a fallos y
disponibilidad en Mongo.

43
00:01:44,410 --> 00:01:46,900
Ahora, hay algunos otros detalles
con respecto a esto en términos de

44
00:01:46,900 --> 00:01:49,010
si pueden ocurrir lecturas en 
los secundarios o no,

45
00:01:49,010 --> 00:01:49,870
y analizaremos eso.

46
00:01:49,870 --> 00:01:52,400
Pero esto en cierto modo te
da el esquema básico

47
00:01:52,400 --> 00:01:53,500
sobre cómo funciona.

48
00:01:53,500 --> 00:01:56,670
Ahora cuando este nodo, este nodo
se recupera, podría volver

49
00:01:56,670 --> 00:02:00,840
como un secundario, en cuyo
caso volvería a unirse al

50
00:02:00,840 --> 00:02:04,120
grupo y sería capaz de actuar como
un secundario mientras este nodo actuase

51
00:02:04,120 --> 00:02:04,830
como primario.

52
00:02:04,830 --> 00:02:06,750
Así que ésta es la base
de la replicación.

53
00:02:06,750 --> 00:02:09,669
Ahora, el número mínimo de
nodos, como ya dije es tres.

54
00:02:09,669 --> 00:02:12,890
Y la razón es que si
tuvieras menos de tres nodos,

55
00:02:12,890 --> 00:02:17,400
entonces los que quedarían no
serían una mayoría de ese conjunto,

56
00:02:17,400 --> 00:02:18,210
del conjunto original.

57
00:02:18,210 --> 00:02:20,035
Y por eso no habría forma
de elegir un nuevo primario.

58
00:02:20,035 --> 00:02:22,810
Por lo que continuaría sin un primario,
lo que significa que ya no podrías

59
00:02:22,810 --> 00:02:24,500
recibir escrituras.

60
00:02:24,500 --> 00:02:27,680
OK, hagamos un cuestionario rápido
sobre algunos de estos conceptos.

61
00:02:27,680 --> 00:02:30,210
¿Cuál es el número mínimo 
original de nodos necesarios para

62
00:02:30,210 --> 00:02:32,550
asegurar la elección de un nuevo
primario si se cae un nodo?

63
00:02:32,550 --> 00:02:33,800
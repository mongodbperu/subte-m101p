1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:01,310
OK, enhorabuena.

3
00:00:01,310 --> 00:00:04,019
Vamos a hablar sobre
"Sharding", que es nuestra

4
00:00:04,019 --> 00:00:06,530
solución para escalabilidad
horizontal.

5
00:00:06,530 --> 00:00:11,010
Pero más importante, "Sharding"
es el tema final, el final

6
00:00:11,010 --> 00:00:14,460
real, el tema sustancial, 
del curso de desarrollador.

7
00:00:14,460 --> 00:00:17,360
Has recorrido una distancia
tremenda en las

8
00:00:17,360 --> 00:00:20,410
últimas seis semanas, así que
enhorabuena.

9
00:00:20,410 --> 00:00:22,720
Al principio de éste,
puede que no conocieras nada

10
00:00:22,720 --> 00:00:27,440
sobre MongoDB y ahora puedes
escribir programas en MongoDB

11
00:00:27,440 --> 00:00:30,750
y entiendes Aggregation
Framework, rendimiento y 

12
00:00:30,750 --> 00:00:34,910
replicación y ahora el último
gran tema es "Sharding".

13
00:00:34,910 --> 00:00:39,040
Como dije, "Sharding" es la forma en 
que manejamos escalabilidad horizontal.

14
00:00:39,040 --> 00:00:44,020
Y básicamente, más que tener simplemente
tu colección en 

15
00:00:44,020 --> 00:00:48,060
una base de datos, quieres
tenerla, digamos, en algún

16
00:00:48,060 --> 00:00:48,970
número de bases de datos.

17
00:00:48,970 --> 00:00:51,290
Podría ser un número bastante
grande de bases de datos.

18
00:00:51,290 --> 00:00:54,080
Y el objetivo es que sea
transparente cuando

19
00:00:54,080 --> 00:00:55,920
accedas a alguna colección.

20
00:00:55,920 --> 00:01:00,260
Digamos que tienes una gran colección
"orders" y que hay

21
00:01:00,260 --> 00:01:03,480
billones y billones de
estos elementos, que en cierto modo

22
00:01:03,480 --> 00:01:05,430
no necesitarías tener
que averiguar dónde

23
00:01:05,430 --> 00:01:06,770
están en el sistema.

24
00:01:06,770 --> 00:01:08,590
Y simplemente funcionaría
transparentemente.

25
00:01:08,590 --> 00:01:11,840
Por lo que la solución de alto nivel
para esto es que

26
00:01:11,840 --> 00:01:13,210
configures estos "shards".

27
00:01:13,210 --> 00:01:19,300
Y les llamaré "S1",
"S2", "S3", "S4" y "S5".

28
00:01:19,300 --> 00:01:23,220
Y el significado de estos "shards" 
es dividir los datos de una

29
00:01:23,220 --> 00:01:25,000
colección en particular.

30
00:01:25,000 --> 00:01:27,470
Ahora, los "shards" son normalmente,
en sí mismos,

31
00:01:27,470 --> 00:01:29,480
conjuntos de réplicas.

32
00:01:29,480 --> 00:01:31,890
Ya hablamos acerca de qué
es un conjunto de réplicas.

33
00:01:31,890 --> 00:01:36,330
Así que podría haber tres hosts
dentro de un "shard" que componen

34
00:01:36,330 --> 00:01:38,610
este conjunto de réplicas,
digamos "R0".

35
00:01:38,610 --> 00:01:41,940
Y el "shard" 1 es en realidad
parte de este conjunto de réplicas.

36
00:01:41,940 --> 00:01:45,650
Por lo que en este caso, te enseñé
uno, dos, tres, cuatro, cinco de

37
00:01:45,650 --> 00:01:47,040
estos "shards".

38
00:01:47,040 --> 00:01:52,040
Y en realidad podría haber 
involucrados 15 hosts, porque los

39
00:01:52,040 --> 00:01:55,560
"shards" son cada uno un conjunto
de réplicas.

40
00:01:55,560 --> 00:01:57,030
Así que vas a 
hacer consultas.

41
00:01:57,030 --> 00:01:59,470
Y en cierto modo, estas consultas
van a ser distribuidas.

42
00:01:59,470 --> 00:02:03,580
La forma en que esto funciona es que
existe un "router" que viene

43
00:02:03,580 --> 00:02:08,350
con tu instalación y se
llama mongos, ¿de acuerdo?

44
00:02:08,350 --> 00:02:11,780
Y probablemente viste ese
binario cuando descomprimiste

45
00:02:11,780 --> 00:02:13,890
la instalación para MongoDB.

46
00:02:13,890 --> 00:02:18,160
Y ese "router" es el que va
a encargarse de esta

47
00:02:18,160 --> 00:02:19,100
distribución por ti.

48
00:02:19,100 --> 00:02:23,410
Por lo que va a mantener algún tipo
de "pool" de conexiones o

49
00:02:23,410 --> 00:02:27,210
conocimiento de todos los hosts
diferentes y va a enrutarlos

50
00:02:27,210 --> 00:02:28,480
apropiadamente.

51
00:02:28,480 --> 00:02:31,100
Así que la forma en que hacemos 
"sharding" es que usa un

52
00:02:31,100 --> 00:02:33,380
enfoque basado en rangos.

53
00:02:33,380 --> 00:02:37,340
Y existe el concepto
de clave del "shard".

54
00:02:37,340 --> 00:02:41,590
Así que digamos que tienes la
colección "orders" y quizá --

55
00:02:41,590 --> 00:02:44,380
podrías imaginar una clave de
"shard" trivial

56
00:02:44,380 --> 00:02:46,290
podría ser sobre el "order_id".

57
00:02:46,290 --> 00:02:50,580
Y hablaremos más sobre por qué
eso podría o no ser una buena

58
00:02:50,580 --> 00:02:53,040
idea a medida que avancemos
en esta lección.

59
00:02:53,040 --> 00:02:56,730
Pero si estuvieras haciendo "sharding"
sobre un "order_id", digamos que

60
00:02:56,730 --> 00:03:00,680
hiciste una consulta, y pediste
un cierto número de pedido.

61
00:03:00,680 --> 00:03:05,260
Entonces el mongos haría algún
tipo de noción de

62
00:03:05,260 --> 00:03:10,040
rangos de números de pedidos que
están asignados a cada "shard".

63
00:03:10,040 --> 00:03:14,430
Y esto se hace por medio
del mapeo de los "chunks".

64
00:03:14,430 --> 00:03:17,710
Así que la idea es que tu tabla
"orders" sería dividida

65
00:03:17,710 --> 00:03:19,000
en "chunks".

66
00:03:19,000 --> 00:03:21,800
Y esos "chunks"
tendrían su lugar.

67
00:03:21,800 --> 00:03:24,740
Y podrían ser potencialmente
migrados por un balanceador para

68
00:03:24,740 --> 00:03:27,030
asegurarse que van a 
permanecer balanceados.

69
00:03:27,030 --> 00:03:29,030
Y de nuevo, éste no es el curso
de DBA, por lo que no vamos a

70
00:03:29,030 --> 00:03:31,980
pedirte extensivamente que
administres esto, sino

71
00:03:31,980 --> 00:03:33,360
simplemente que lo entiendas.

72
00:03:33,360 --> 00:03:36,120
Así que tienes la colección
"orders" y ha sido dividida

73
00:03:36,120 --> 00:03:41,050
en estos "chunks" de "orders"
basándose en rangos de "order_id".

74
00:03:41,050 --> 00:03:45,150
Y cada uno de estos "chunks" vive
en un "shard" particular.

75
00:03:45,150 --> 00:03:48,020
Y entonces, cuando haces una consulta
y la aplicación envía esa

76
00:03:48,020 --> 00:03:52,700
consulta a mongos y entonces estos
mongos se comunican con

77
00:03:52,700 --> 00:03:54,980
los conjuntos de réplicas, por
supuesto, que son mongod en ejecución.

78
00:03:54,980 --> 00:03:56,650
Todos éstos son mongod.

79
00:03:56,650 --> 00:04:01,060
Si la consulta se puede satisfacer
por un "shard" particular --

80
00:04:01,060 --> 00:04:02,670
digamos, quiero
"order_id" 10.

81
00:04:02,670 --> 00:04:05,110
Dice, OK, veamos
mi mapeo.

82
00:04:05,110 --> 00:04:09,080
"order_id" 10 mapea a este "chunk",
este "chunk" mapea a este

83
00:04:09,080 --> 00:04:12,860
"shard" y lo enrutará
directamente al "shard".

84
00:04:12,860 --> 00:04:15,890
Y entonces obtendrás una
respuesta bastante rápida.

85
00:04:15,890 --> 00:04:18,940
Por otro lado, si la
consulta no incluye la

86
00:04:18,940 --> 00:04:22,980
clave del "shard", y en este caso
la clave del "shard" era "order_id",

87
00:04:22,980 --> 00:04:25,870
entonces lo que hará, tendrá que 
dispersar esta petición a todos

88
00:04:25,870 --> 00:04:28,780
los servidores, enviarla a todos
los servirores y luego reunir

89
00:04:28,780 --> 00:04:31,400
la respuesta y 
reponder a la

90
00:04:31,400 --> 00:04:32,860
aplicación.

91
00:04:32,860 --> 00:04:36,100
Así que ésa es la forma en que 
funcionaría si no pudiera usar

92
00:04:36,100 --> 00:04:37,440
la clave del "shard".

93
00:04:37,440 --> 00:04:39,530
Además, cuando estás
tratando con un entorno con

94
00:04:39,530 --> 00:04:40,030
"sharding" --

95
00:04:40,030 --> 00:04:41,640
y vamos a analizar
esto un poco más --

96
00:04:41,640 --> 00:04:44,370
tienes que incluir la
clave del "shard" en cada "insert".

97
00:04:44,370 --> 00:04:47,110
Porque necesita conocer dónde
poner esto.

98
00:04:47,110 --> 00:04:49,490
Así que una vez declares ese
"order_id", digamos que como

99
00:04:49,490 --> 00:04:53,650
clave del "shard" ahora no es válido
tener un documento dentro de la

100
00:04:53,650 --> 00:04:55,840
colección "orders" que no
tenga un "order_id", porque 

101
00:04:55,840 --> 00:04:58,280
no sabría en qué
"shard" ponerlo.

102
00:04:58,280 --> 00:05:00,680
Entonces, "sharding" es a 
nivel de base de datos.

103
00:05:00,680 --> 00:05:02,660
Podrías decir, quiero hacer o no
"sharding" de una base de datos.

104
00:05:02,660 --> 00:05:05,580
Incluso más allá, si
quieres hacer "sharding" o no

105
00:05:05,580 --> 00:05:06,700
de una colección.

106
00:05:06,700 --> 00:05:10,630
Y las colecciones que no tienen
"sharding" van a acabar 

107
00:05:10,630 --> 00:05:14,390
justo aquí en el "shard" 0, en
el "shard" más a la izquierda.

108
00:05:14,390 --> 00:05:16,500
Eso podría cambiar en una futura
versión de MongoDB, pero

109
00:05:16,500 --> 00:05:18,350
así es como funciona ahora.

110
00:05:18,350 --> 00:05:21,620
Sólo por revisar a alto
nivel, para obtener escalabilidad

111
00:05:21,620 --> 00:05:24,770
horizontal, lo que hacemos es
"sharding", que significa dividir

112
00:05:24,770 --> 00:05:29,210
una colección en múltiples
hosts lógicos y hacemos eso

113
00:05:29,210 --> 00:05:30,860
en función de una clave de "shard".

114
00:05:30,860 --> 00:05:32,890
La clave de "shard" es algo
que vas a determinar.

115
00:05:32,890 --> 00:05:36,700
La clave de "shard" es alguna parte
del propio documento.

116
00:05:36,700 --> 00:05:39,510
Si fuera una tabla "orders",
podría ser el "order_id".

117
00:05:39,510 --> 00:05:42,510
También podría ser "_id", mucha
gente lo hace para ciertas

118
00:05:42,510 --> 00:05:42,835
colecciones.

119
00:05:42,835 --> 00:05:45,280
Hablaremos acerca de por qué eso podría
ser o no una buena idea.

120
00:05:45,280 --> 00:05:48,900
Ahora, para una tabla de posts de 
un blog, podría ser el "post_id",

121
00:05:48,900 --> 00:05:50,300
cualquier cosa que quieras.

122
00:05:50,300 --> 00:05:54,170
Y una vez que tomas esa decisión,
entonces Mongo dividirá

123
00:05:54,170 --> 00:05:58,350
esa colección en
"chunks" y decidirá en qué "shard"

124
00:05:58,350 --> 00:06:01,000
vivirá cada uno de los "chunks"
basándose en rangos, y entonces

125
00:06:01,000 --> 00:06:04,075
cualquier consulta que hagas, que
ahora tiene que ser enrutada a un

126
00:06:04,075 --> 00:06:07,440
mongos, irá al "shard"
adecuado para responder

127
00:06:07,440 --> 00:06:08,680
tu consulta.

128
00:06:08,680 --> 00:06:12,270
Por cierto, en caso que te lo 
estuvieras preguntando, sí, puede 

129
00:06:12,270 --> 00:06:14,090
haber más de un mongos.

130
00:06:14,090 --> 00:06:16,260
Son realmente "stateless" y
normalmente se ejecutan en el mismo

131
00:06:16,260 --> 00:06:18,080
servidor que la aplicación.

132
00:06:18,080 --> 00:06:21,330
Y se manejan prácticamente
de la misma forma --

133
00:06:21,330 --> 00:06:24,200
similar a como se manejaría un
conjunto de réplicas, que es

134
00:06:24,200 --> 00:06:28,090
que si uno de ellos se cae,
entonces se conectará a

135
00:06:28,090 --> 00:06:28,780
uno diferente.

136
00:06:28,780 --> 00:06:30,500
Es bastante "stateless".

137
00:06:30,500 --> 00:06:33,200
Así que eso no es muy
difícil de hacer.

138
00:06:33,200 --> 00:06:35,330
Y mongos ahora se
comunica con mongod.

139
00:06:35,330 --> 00:06:38,310
Una vez en un entorno con "sharding"
como éste, los

140
00:06:38,310 --> 00:06:41,570
"shards", de nuevo, probablemente son
casi siempre conjuntos de réplicas,

141
00:06:41,570 --> 00:06:45,460
no te conectas directamente
a mongod con tu

142
00:06:45,460 --> 00:06:46,610
aplicación.

143
00:06:46,610 --> 00:06:48,820
Podrías, por motivos
administrativos, necesitar conectarte

144
00:06:48,820 --> 00:06:51,800
a este mongod, pero en general
no lo necesitarás.

145
00:06:51,800 --> 00:06:55,590
Y si usas el shell Mongo,
que en realidad es simplemente

146
00:06:55,590 --> 00:06:57,110
otra aplicación, en cierto
modo equivalente a esta

147
00:06:57,110 --> 00:07:00,520
aplicación, entonces más que
comunicarte con una réplica,

148
00:07:00,520 --> 00:07:03,980
normalmente te conectarías
directamente a mongos.

149
00:07:03,980 --> 00:07:06,410
Y se indica de forma especial,
en términos de su

150
00:07:06,410 --> 00:07:09,160
indicador del shell, para decirte que
estás conectado a mongos

151
00:07:09,160 --> 00:07:11,030
en lugar de a mongod.

152
00:07:11,030 --> 00:07:13,370
Así que de acuerdo, eso es sharding
a un alto nivel.

153
00:07:13,370 --> 00:07:15,130
Hagamos un cuestionario sobre eso.

154
00:07:15,130 --> 00:07:18,030
De acuerdo, entonces, el cuestionario
es: Si la clave del "shard" no está

155
00:07:18,030 --> 00:07:21,280
incluida en una operación "find" y
hay 3 "shards", cada uno con

156
00:07:21,280 --> 00:07:25,070
un conjunto de réplicas de 3 nodos,
¿cuántos nodos verán

157
00:07:25,070 --> 00:07:29,410
la operación "find"? Y las
respuestas son 1, 3, 9 y 6.

158
00:07:29,410 --> 00:07:30,660
Elige tu respuesta aquí.
1
00:00:00,000 --> 00:00:00,110

2
00:00:00,110 --> 00:00:03,100
Te mostré cómo detectar una
conmutación por error y continuar

3
00:00:03,100 --> 00:00:04,210
en tu programa.

4
00:00:04,210 --> 00:00:05,920
Ahora lo que queríamos hacer
es mejor que eso, y en relidad

5
00:00:05,920 --> 00:00:08,520
queremos asegurarnos que
las escrituras tengan éxito.

6
00:00:08,520 --> 00:00:10,140
¿Cómo podríamos hacer eso?

7
00:00:10,140 --> 00:00:14,030
Bueno, la manera de hacer eso
es poner nuestras inserciones en

8
00:00:14,030 --> 00:00:15,330
un bucle de reintento.

9
00:00:15,330 --> 00:00:16,930
Y este es el mismo
programa pero ha sido

10
00:00:16,930 --> 00:00:18,550
reescrito con un bucle de reintento.

11
00:00:18,550 --> 00:00:20,550
Así que vamos a verlo
línea por línea.

12
00:00:20,550 --> 00:00:22,770
Una vez más, estamos
iterando de uno en uno

13
00:00:22,770 --> 00:00:23,890
desde uno hasta un millón.

14
00:00:23,890 --> 00:00:27,130
Estamos creando un documento
donde "i" es uno, dos, tres,

15
00:00:27,130 --> 00:00:28,230
cuatro, cinco.

16
00:00:28,230 --> 00:00:30,920
Y en este caso,
vamos a intentar

17
00:00:30,920 --> 00:00:32,770
desde cero hasta 2 veces.

18
00:00:32,770 --> 00:00:34,420
Vamos a intentar
hacer la inserción.

19
00:00:34,420 --> 00:00:36,200
Y si la inserción
funciona, genial.

20
00:00:36,200 --> 00:00:38,320
Y hacemos "break" para
romper este bucle de reintento.

21
00:00:38,320 --> 00:00:40,450
Y vamos al siguiente valor de "i".

22
00:00:40,450 --> 00:00:44,240
Pero si atrapamos una excepción,
entonces lo que sucede es que

23
00:00:44,240 --> 00:00:45,140
imprimimos la excepción.

24
00:00:45,140 --> 00:00:46,990
Y luego imprimimos
"Retrying...".

25
00:00:46,990 --> 00:00:48,360
Y hacemos "sleep"
por cinco segundos.

26
00:00:48,360 --> 00:00:49,850
Y luego volvemos a intentar.

27
00:00:49,850 --> 00:00:52,390
Y te explicaré en un segundo
por qué este "pymongo.

28
00:00:52,390 --> 00:00:55,560
DuplicateKeyError"
está por separado.

29
00:00:55,560 --> 00:00:56,500
Te explicaré por qué es así.

30
00:00:56,500 --> 00:00:59,070
Pero vamos a ver qué pasa si
ejecutamos este programa y vemos

31
00:00:59,070 --> 00:01:00,470
si lo hacemos mejor que antes.

32
00:01:00,470 --> 00:01:02,700
Así que una vez más, vamos
a ejecutar el programa.

33
00:01:02,700 --> 00:01:04,480
Y ahora está ejecutándose.

34
00:01:04,480 --> 00:01:06,740
Y está imprimiendo estos valores
enteros mientras los va insertando

35
00:01:06,740 --> 00:01:08,200
en la colección.

36
00:01:08,200 --> 00:01:12,560
Y ahora voy a averiguar
una vez más cuál es mi

37
00:01:12,560 --> 00:01:16,220
primario, que está en 27018.

38
00:01:16,220 --> 00:01:21,030
Y luego voy a detenerlo.

39
00:01:21,030 --> 00:01:21,590
Ahí.

40
00:01:21,590 --> 00:01:23,280
Acabo de detener el primario.

41
00:01:23,280 --> 00:01:25,230
Vamos y veamos lo que
está haciendo este programa.

42
00:01:25,230 --> 00:01:27,730
Podemos ver aquí que
dice que está reintentando.

43
00:01:27,730 --> 00:01:28,490
Está reintentando.

44
00:01:28,490 --> 00:01:29,640
Está reintentando.

45
00:01:29,640 --> 00:01:31,970
Y luego, OK, ¿qué
sucedió luego de eso?

46
00:01:31,970 --> 00:01:33,070
Bien, mira eso.

47
00:01:33,070 --> 00:01:37,440
Básicamente, me parece como
si tomara dos excepciones

48
00:01:37,440 --> 00:01:41,750
AutoReconnect y luego continuó
exactamente donde se quedó.

49
00:01:41,750 --> 00:01:44,690
Así que insertó esto
desde cero hasta 41.

50
00:01:44,690 --> 00:01:48,290
Y luego insertó
42, 43, 44, 45, 46.

51
00:01:48,290 --> 00:01:49,330
Bueno, esto es genial.

52
00:01:49,330 --> 00:01:50,660
Esto es lo que estamos buscando.

53
00:01:50,660 --> 00:01:54,830
Así que ahora, aunque tuvimos una
falla en el primario y una elección

54
00:01:54,830 --> 00:01:58,520
en el conjunto de réplicas de tal
manera que hemos elegido un nuevo

55
00:01:58,520 --> 00:02:01,790
primario, nuestro programa fue capaz
de obtener sus escrituras fiablemente.

56
00:02:01,790 --> 00:02:03,720
Veamos cómo esto funciona otra vez.

57
00:02:03,720 --> 00:02:08,509
Lo que sucede es que si esta
escritura causa una excepción,

58
00:02:08,509 --> 00:02:10,759
luego imprime la excepción.

59
00:02:10,759 --> 00:02:13,180
Y luego regresamos e intentamos
de nuevo después de esperar

60
00:02:13,180 --> 00:02:15,200
por cinco segundos.

61
00:02:15,200 --> 00:02:17,600
Ahora, ¿por qué está este
"DuplicateKeyError" aquí?

62
00:02:17,600 --> 00:02:19,350
Bueno, en realidad hay un
par de tipos distintos de

63
00:02:19,350 --> 00:02:23,440
excepciones que puedes
tomar en PyMongo en MongoDB.

64
00:02:23,440 --> 00:02:25,490
Uno de ellos es este error
"AutoReconnect", que significa

65
00:02:25,490 --> 00:02:26,880
que el driver está
intentando conectarse

66
00:02:26,880 --> 00:02:28,570
al nuevo primario del
conjunto de réplicas.

67
00:02:28,570 --> 00:02:29,320
Pero hay otros.

68
00:02:29,320 --> 00:02:31,490
Hay errores de conexión
de red, por ejemplo.

69
00:02:31,490 --> 00:02:34,020
Y a veces, no podrías
conocer si tu escritura

70
00:02:34,020 --> 00:02:35,580
se realizó con éxito o no.

71
00:02:35,580 --> 00:02:38,680
En particular, tu escritura
podría tener éxito.

72
00:02:38,680 --> 00:02:40,110
Pero a pesar que tuvo
éxito, es posible

73
00:02:40,110 --> 00:02:41,640
que haya tomado una excepción.

74
00:02:41,640 --> 00:02:45,220
Y esa es la naturaleza de la forma
en que el informe de errores funciona

75
00:02:45,220 --> 00:02:48,920
en MongoDB porque la escritura
va a la base de datos.

76
00:02:48,920 --> 00:02:51,360
No hay valor de retorno
a nivel del driver.

77
00:02:51,360 --> 00:02:54,960
Y luego el driver llama
a "getLastError" por ti.

78
00:02:54,960 --> 00:02:58,280
Y podría darse el caso que la
llamada a "getLastError" no se

79
00:02:58,280 --> 00:03:00,490
complete por alguna razón--
consigue un error de red--

80
00:03:00,490 --> 00:03:02,590
pero la escritura
se ha completado.

81
00:03:02,590 --> 00:03:05,540
Entonces, ¿cómo hacer que todo
esto sea idempotente para

82
00:03:05,540 --> 00:03:06,960
poder ejecutarlo una y otra vez.

83
00:03:06,960 --> 00:03:09,290
Por lo que hay una sutileza a la forma
en que este código está estructurado

84
00:03:09,290 --> 00:03:11,420
que en realidad
deseo señalar y

85
00:03:11,420 --> 00:03:12,380
deberías notarlo.

86
00:03:12,380 --> 00:03:15,130
Y es que el documento que
estamos insertando es en realidad

87
00:03:15,130 --> 00:03:18,640
definido aquí, fuera
del bucle de reintento.

88
00:03:18,640 --> 00:03:23,240
Y al hacerlo de esta forma, cuando
hacemos esta inserción de aquí,

89
00:03:23,240 --> 00:03:25,590
el driver le va a
asignar un "_id"

90
00:03:25,590 --> 00:03:27,280
a este diccionario de Python.

91
00:03:27,280 --> 00:03:28,750
Y va a intentar insertarlo.

92
00:03:28,750 --> 00:03:31,920
Bueno, si la inserción fuera
exitosa, entonces aquel

93
00:03:31,920 --> 00:03:33,990
"_id" va a aparecer
en la colección.

94
00:03:33,990 --> 00:03:35,960
Y si intentas insertar de nuevo--

95
00:03:35,960 --> 00:03:38,990
bien, porque digamos que
va tener que fallar porque

96
00:03:38,990 --> 00:03:41,800
obtienes una excepción, pero
en efecto había sido exitosa.

97
00:03:41,800 --> 00:03:43,430
Si vienes del bucle
e intentas insertarlo

98
00:03:43,430 --> 00:03:45,910
otra vez, entonces cuando intentas
insertarlo de nuevo, vas a

99
00:03:45,910 --> 00:03:47,610
obtener un error de clave
duplicada (DuplicateKeyError).

100
00:03:47,610 --> 00:03:49,890
Y si obtienes un error de clave
duplicada, bueno, entonces lo

101
00:03:49,890 --> 00:03:53,540
que deseas hacer es "break"
y moverte porque sabes

102
00:03:53,540 --> 00:03:56,230
que aquel documento ya fue
insertado la primera vez.

103
00:03:56,230 --> 00:03:59,570
Teniendo este documento definido
fuera del bucle de reintento

104
00:03:59,570 --> 00:04:02,090
y aprovechando la
funcionalidad del driver

105
00:04:02,090 --> 00:04:04,580
de insertar un campo "_id"
y porque el "_id" debe

106
00:04:04,580 --> 00:04:07,640
ser único en la colección,
básicamente puedes ejecutar

107
00:04:07,640 --> 00:04:11,190
esta inserción más de
una vez de forma segura.

108
00:04:11,190 --> 00:04:13,240
Ahora la verdad es que incluso
si no hubieramos salido con este

109
00:04:13,240 --> 00:04:16,529
"DuplicateKeyError", esto todavía
podría funcionar, porque incluso si

110
00:04:16,529 --> 00:04:18,750
este "DuplicateKeyError"
fuera atrapado aquí, iría

111
00:04:18,750 --> 00:04:20,040
a través de todos los reintentos--

112
00:04:20,040 --> 00:04:21,899
Quiero decir, que
será un poco lento.

113
00:04:21,899 --> 00:04:24,470
Pero si fueras a través de todos
los reintentos, seguiría sin

114
00:04:24,470 --> 00:04:26,220
insertar el documento
más de una vez.

115
00:04:26,220 --> 00:04:27,340
Y ese es el comportamiento
que se desea.

116
00:04:27,340 --> 00:04:28,950
No se desea insertar el
documento más de una vez.

117
00:04:28,950 --> 00:04:30,790
Sólo se desea
insertalo una vez.

118
00:04:30,790 --> 00:04:35,090
Así que este es un código bien
estructurado que hace frente a

119
00:04:35,090 --> 00:04:38,250
fallas de conjuntos de réplicas
y elecciones de primario.

120
00:04:38,250 --> 00:04:40,490
Y ese es el tipo de código
que deberías escribir en

121
00:04:40,490 --> 00:04:43,370
tus aplicaciones si son
aplicaciones para producción y

122
00:04:43,370 --> 00:04:45,230
van a ejecutarse con un
conjunto de réplicas.

123
00:04:45,230 --> 00:04:48,370
Y definitivamente recomendamos
usar conjuntos de réplicas en

124
00:04:48,370 --> 00:04:49,330
producción.

125
00:04:49,330 --> 00:04:49,690
Muy bien.

126
00:04:49,690 --> 00:04:51,610
Es momento para un cuestionario.

127
00:04:51,610 --> 00:04:54,030
¿Este código garantiza que
la escritura sea existosa

128
00:04:54,030 --> 00:04:55,940
si una conmutación
por error ocurre?

129
00:04:55,940 --> 00:04:57,090
Y sólo voy a decirte
que no necesitas

130
00:04:57,090 --> 00:04:58,100
leer tan cuidadosamente.

131
00:04:58,100 --> 00:05:01,100
Es exactamente el código que
te mostré en esta lección.

132
00:05:01,100 --> 00:05:02,300
Y es un poco engañoso.

133
00:05:02,300 --> 00:05:03,440
Y realmente no
respondí mucho a esta

134
00:05:03,440 --> 00:05:05,110
pregunta en la lección.

135
00:05:05,110 --> 00:05:06,800
Pero ve si sabes
la respuesta.

136
00:05:06,800 --> 00:05:09,520
¿Con este código se garantiza que
la escritura sea insertada con

137
00:05:09,520 --> 00:05:11,260
este bucle de reintento de la forma
como está estructurado ahora?

138
00:05:11,260 --> 00:05:12,510

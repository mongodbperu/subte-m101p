1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:04,154
Vamos a hablar un poco acerca de
conmutación por error y de lo que

3
00:00:04,154 --> 00:00:07,920
sucede desde el punto de vista de la
aplicación cuando una conmutación por

4
00:00:07,920 --> 00:00:09,530
error ocurre en un
conjunto de réplicas.

5
00:00:09,530 --> 00:00:12,575
Digamos que tienes un conjunto
de réplicas de tres nodos.

6
00:00:12,575 --> 00:00:15,200
Voy a dibujar un conjunto
de réplicas de tres nodos.

7
00:00:15,200 --> 00:00:19,690
Y estas emes se entienden
por instancias de MongoDB.

8
00:00:19,690 --> 00:00:23,110
Y vamos a suponer que
éste es el primario y que

9
00:00:23,110 --> 00:00:27,290
tienes una aplicación escrita
en Python con PyMongo.

10
00:00:27,290 --> 00:00:28,970
Y está conectada a este
conjunto de réplicas.

11
00:00:28,970 --> 00:00:31,720
Así que lo que significa es que
hay una conexión hacia el

12
00:00:31,720 --> 00:00:37,070
primario, y normalmente, por defecto
en MongoDB, todas las lecturas y

13
00:00:37,070 --> 00:00:40,290
todas las escrituras
van a tu nodo primario.

14
00:00:40,290 --> 00:00:43,025
Hay una opción para que lea
yendo hacia los secundarios en

15
00:00:43,025 --> 00:00:45,940
tu conjunto de réplicas, pero
por defecto es que lee yendo

16
00:00:45,940 --> 00:00:47,580
a tu primario.

17
00:00:47,580 --> 00:00:50,160
Y si deseas una fuerte
consistencia donde puedas leer

18
00:00:50,160 --> 00:00:53,290
lo que has escrito, entonces
necesitas que tus lecturas vayan

19
00:00:53,290 --> 00:00:54,320
a tu primario.

20
00:00:54,320 --> 00:00:58,050
Así cuando una conmutación por error
ocurra, lo que va a ocurrir es que

21
00:00:58,050 --> 00:00:59,590
este nodo va a morir.

22
00:00:59,590 --> 00:01:02,430
Y luego se va a producir
una elección y digamos éste

23
00:01:02,430 --> 00:01:04,684
es ahora elegido como primario.

24
00:01:04,684 --> 00:01:07,880
Y en ese punto, vas a
obtener una conexión a

25
00:01:07,880 --> 00:01:10,280
éste, y tú continuarás.

26
00:01:10,280 --> 00:01:12,750
Pero la conmutación por
error no es instantánea.

27
00:01:12,750 --> 00:01:14,070
La conmutación por
error toma tiempo.

28
00:01:14,070 --> 00:01:15,420
¿Cuánto tiempo tarda?

29
00:01:15,420 --> 00:01:17,770
Bueno, se podría decir que
a menudo toma un segundo, dos

30
00:01:17,770 --> 00:01:19,090
segundos, tres segundos.

31
00:01:19,090 --> 00:01:22,230
Y durante ese tiempo cuando la
elección se está produciendo y el

32
00:01:22,230 --> 00:01:25,480
conjunto de réplicas decide
quién será el primario,

33
00:01:25,480 --> 00:01:28,910
no se puede completar las lecturas,
y no se puede completar las escrituras

34
00:01:28,910 --> 00:01:30,850
porque no tienes un
primario que las reciba.

35
00:01:30,850 --> 00:01:34,770
Te voy a enseñar un programa y
te voy a mostrar cómo funciona ésto.

36
00:01:34,770 --> 00:01:38,100
Por lo que aquí tengo un programa,
que es un simple programa Python,

37
00:01:38,100 --> 00:01:41,240
que va a conectarse al
conjunto de réplicas usando

38
00:01:41,240 --> 00:01:44,390
la clase "MongoReplicaSetClient".

39
00:01:44,390 --> 00:01:48,150
Y está listando tres nodos del
conjunto de réplicas en su "seedlist"

40
00:01:48,150 --> 00:01:50,500
y nombrando el conjunto
de réplicas como "m101".

41
00:01:50,500 --> 00:01:53,990
Y ya tengo este conjunto de réplicas
ejecutándose en mi máquina local,

42
00:01:53,990 --> 00:01:58,780
así que ya está iniciada
e instanciada.

43
00:01:58,780 --> 00:02:00,130
Y tengo dos funciones.

44
00:02:00,130 --> 00:02:01,710
Tengo un "readsome"
y un "writesome".

45
00:02:01,710 --> 00:02:04,170
Y hacen algo muy simmilar.

46
00:02:04,170 --> 00:02:08,009
La función "writesome" va a ir
a través de un intervalo de

47
00:02:08,009 --> 00:02:11,110
un millón de enteros, y va a
simplemente escribir cada uno

48
00:02:11,110 --> 00:02:12,390
de ellos en una colección.

49
00:02:12,390 --> 00:02:14,640
Y las lecturas hacen un
"findOne" desde aquella

50
00:02:14,640 --> 00:02:16,040
colección una y otra vez.

51
00:02:16,040 --> 00:02:19,070
Primero hagamos este "writesome".

52
00:02:19,070 --> 00:02:21,270
Y lo que vamos a hacer es que
vamos a llamar a "writesome".

53
00:02:21,270 --> 00:02:23,830
Vamos a iniciar añadiendo
enteros a la colección.

54
00:02:23,830 --> 00:02:26,540
Y por cierto, la colección
es eliminada al inicio.

55
00:02:26,540 --> 00:02:30,060
Y luego, mientras esté
sucediendo, vamos a apagar

56
00:02:30,060 --> 00:02:34,180
el primario para que podamos obtener una
elección en el conjunto de réplicas

57
00:02:34,180 --> 00:02:36,580
y haya un nuevo primario.

58
00:02:36,580 --> 00:02:38,080
Así que hagamos eso.

59
00:02:38,080 --> 00:02:41,470
Vamos a este y ejecutémoslo.

60
00:02:41,470 --> 00:02:43,460
Está insertando estos.

61
00:02:43,460 --> 00:02:47,250
Ahora vayamos al shell Mongo.

62
00:02:47,250 --> 00:02:49,440
Vamos a obtener el estado del
conjunto de réplicas, averiguemos

63
00:02:49,440 --> 00:02:51,010
que esté el primario.

64
00:02:51,010 --> 00:02:54,180
El primario está en 27018.

65
00:02:54,180 --> 00:02:57,110
Así que voy a
conectarme a ese host.

66
00:02:57,110 --> 00:02:59,750
Y luego voy a hacer un
"rs.stepDown", un apagado

67
00:02:59,750 --> 00:03:02,400
de conjunto de réplicas.

68
00:03:02,400 --> 00:03:03,620
Bueno, lo hice.

69
00:03:03,620 --> 00:03:05,210
Detuve el primario.

70
00:03:05,210 --> 00:03:06,390
Y por detrás--
71
00:03:06,390 --> 00:03:08,720
No sé si puedes ver--
pero tan pronto lo hice--

72
00:03:08,720 --> 00:03:11,470
este programa terminó
por completo.

73
00:03:11,470 --> 00:03:13,740
Muy bien, por lo que pudo
insertar e insertó 47 números,

74
00:03:13,740 --> 00:03:16,940
y luego terminó.

75
00:03:16,940 --> 00:03:20,270
Ahora si no se captura las
excepciones que ocurren cuando el

76
00:03:20,270 --> 00:03:23,570
conjunto de réplicas está eligiendo
un nuevo primario, en realidad

77
00:03:23,570 --> 00:03:25,260
el programa terminará.

78
00:03:25,260 --> 00:03:27,270
Ahora, sólo para mostrarte
eso, no importa si leo

79
00:03:27,270 --> 00:03:29,700
o escribo, esto es cierto en
ambos casos, voy a cambiar

80
00:03:29,700 --> 00:03:31,480
este programa para
que haga lecturas.

81
00:03:31,480 --> 00:03:34,540
Voy a comentar esta
línea que elimina la

82
00:03:34,540 --> 00:03:36,970
colección, que elimina todos
los documentos de la colección.

83
00:03:36,970 --> 00:03:40,620
Y voy a cambiar esto
por "readsome".

84
00:03:40,620 --> 00:03:42,040
Por lo que lo voy
a llamar otra vez.

85
00:03:42,040 --> 00:03:43,370
Ahora sólo va a leer
el mismo número

86
00:03:43,370 --> 00:03:44,860
una y otra vez.

87
00:03:44,860 --> 00:03:48,880
Y ahora, vamos, una vez más,
a detener el primario.

88
00:03:48,880 --> 00:03:51,570
Necesito averiguar
dónde está el primario.

89
00:03:51,570 --> 00:03:55,680
Usando "rs.status",
parece que está en 27017.

90
00:03:55,680 --> 00:03:58,540
Voy a salir de aquí y conectarme.

91
00:03:58,540 --> 00:04:02,050
Y luego voy a detener al primario.

92
00:04:02,050 --> 00:04:03,990
Y puedes ver que
tan pronto lo hice,

93
00:04:03,990 --> 00:04:05,030
este programa terminó.

94
00:04:05,030 --> 00:04:07,160
Este programa que está ahora
sólo leyendo números de la

95
00:04:07,160 --> 00:04:10,820
colección, también terminó
porque esta línea

96
00:04:10,820 --> 00:04:13,460
"findOne" ocurrió mientras
hubo una elección en el conjunto

97
00:04:13,460 --> 00:04:14,280
de réplicas.

98
00:04:14,280 --> 00:04:17,790
Y no había primario y
obtuvimos una excepción.

99
00:04:17,790 --> 00:04:20,500
Supongo que lo que deseo
mostrarte aquí es que si no haces

100
00:04:20,500 --> 00:04:22,670
nada especial, y hay una conmutación
por error de un conjunto de réplicas,

101
00:04:22,670 --> 00:04:24,960
toda la conmutación por error
es completamente automática,

102
00:04:24,960 --> 00:04:27,500
tu programa, si está funcionando con
una base de datos durante aquel tiempo,

103
00:04:27,500 --> 00:04:29,840
en realidad terminará.

104
00:04:29,840 --> 00:04:31,460
Muy bien, así que es tiempo
para un cuestionario.

105
00:04:31,460 --> 00:04:34,450
Así que vamos a decir que
tuvimos esta inserción aquí--

106
00:04:34,450 --> 00:04:35,960
"db.test.insert".

107
00:04:35,960 --> 00:04:37,830
¿Qué sucederá si la
siguiente instrucción es

108
00:04:37,830 --> 00:04:40,830
ejecutada en Python durante
una elección de primario?

109
00:04:40,830 --> 00:04:42,740
Estás luego que una conmutación 
por error se ha producido y está

110
00:04:42,740 --> 00:04:43,880
eligiéndose un nuevo primario.

111
00:04:43,880 --> 00:04:46,230
Y las cuatro opciones son, La
inserción fallará pero el

112
00:04:46,230 --> 00:04:49,330
programa continuará, La
inserción sucederá a un nuevo

113
00:04:49,330 --> 00:04:52,750
primario porque la conmutación por
error es automática en MongoDB, La

114
00:04:52,750 --> 00:04:55,270
inserción fallará y el
programa terminará, o, La

115
00:04:55,270 --> 00:04:57,880
inserción sucederá y
el programa terminará.

116
00:04:57,880 --> 00:04:59,130
Y elige la mejor opción.

117
00:04:59,130 --> 00:05:00,200

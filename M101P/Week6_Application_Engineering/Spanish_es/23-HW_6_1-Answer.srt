1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:00,430
Bien.

3
00:00:00,430 --> 00:00:03,350
En esta pregunta, sólo te estamos
pidiendo algunas afirmaciones acerca

4
00:00:03,350 --> 00:00:05,590
del sistema de replicación
construido sobre MongoDB.

5
00:00:05,590 --> 00:00:07,680
Y era una pregunta de tipo
"marca todas las que apliquen".

6
00:00:07,680 --> 00:00:08,970
¿Cuáles de las siguientes
declaraciones son ciertas acerca

7
00:00:08,970 --> 00:00:10,570
de la replicación de MongoDB?

8
00:00:10,570 --> 00:00:12,890
La primera es cierta. "El
mínimo número sensible de

9
00:00:12,890 --> 00:00:15,740
nodos votantes para un conjunto de
réplicas es tres". Si tuvieras dos

10
00:00:15,740 --> 00:00:18,065
nodos, entonces no podrías
elegir un nuevo primario.

11
00:00:18,065 --> 00:00:20,070
Y si tuvieras un nodo, no
podrías elegir un nuevo primario.

12
00:00:20,070 --> 00:00:21,290
No habrían quedado nodos.

13
00:00:21,290 --> 00:00:23,140
Por lo que la respuesta para
ésa es cierta.

14
00:00:23,140 --> 00:00:24,350
"La replicación de MongoDB es

15
00:00:24,350 --> 00:00:26,040
síncrona." Eso no es cierto.

16
00:00:26,040 --> 00:00:27,450
Es asíncrona.

17
00:00:27,450 --> 00:00:29,550
Sincroniza en segundo
plano y envía las

18
00:00:29,550 --> 00:00:31,680
actualizaciones a los otros nodos.

19
00:00:31,680 --> 00:00:34,780
Usando "getLastError" y estableciendo
el parámetro "w", puedes 

20
00:00:34,780 --> 00:00:39,100
esencialmente establecer un límite y 
pedir que ciertas acciones ocurran

21
00:00:39,100 --> 00:00:39,920
antes de continuar.

22
00:00:39,920 --> 00:00:42,600
Pero aún así es realmente un
proceso asíncrono.

23
00:00:42,600 --> 00:00:44,880
"El shell Mongo es capaz de
vincularse a un conjunto de réplicas

24
00:00:44,880 --> 00:00:48,270
y conmutar automáticamente por error."
Esto es también falso.

25
00:00:48,270 --> 00:00:52,440
Como sabemos, conectas Mongo
a un mongod particular.

26
00:00:52,440 --> 00:00:55,920
Y si ese mongod se cae,
no se reconecta a un

27
00:00:55,920 --> 00:00:56,580
servidor diferente.

28
00:00:56,580 --> 00:00:58,400
Ésa no es la forma en que
funciona el shell Mongo.

29
00:00:58,400 --> 00:00:59,200
Por lo tanto, es falso.

30
00:00:59,200 --> 00:00:59,840
¡Oh!, lo siento.

31
00:00:59,840 --> 00:01:01,435
No quería resaltar eso.

32
00:01:01,435 --> 00:01:04,720
La siguiente es, "Por defecto,
usando la nueva clase de conexión

33
00:01:04,720 --> 00:01:08,460
MongoClient tienes
'w = 1' y 'j = 1'." Y

34
00:01:08,460 --> 00:01:10,190
eso tampoco es cierto.

35
00:01:10,190 --> 00:01:13,100
Te da "w = 1" y "j = 0".

36
00:01:13,100 --> 00:01:14,980
Esperará a que la escritura
sea confirmada en el

37
00:01:14,980 --> 00:01:18,470
primario y no espera a
que ocurra el "journaling".

38
00:01:18,470 --> 00:01:21,120
La última respuesta era, "El
'oplog' utiliza una colección con

39
00:01:21,120 --> 00:01:23,650
tope." Y eso es cierto.

40
00:01:23,650 --> 00:01:26,860
Utiliza una colección con
tope, que rota al

41
00:01:26,860 --> 00:01:28,750
final de la colección.

42
00:01:28,750 --> 00:01:31,570
Si necesita más espacio,
reutiliza el espacio del

43
00:01:31,570 --> 00:01:32,820
primer documento en
la colección.

44
00:01:32,820 --> 00:01:34,030
1
00:00:00,000 --> 00:00:02,090
Bien, hablemos sobre cómo
funciona la replicación

2
00:00:02,090 --> 00:00:03,050
internamente.

3
00:00:03,050 --> 00:00:06,830
Me he conectado a dos de los
mongod justo ahora a través

4
00:00:06,830 --> 00:00:07,660
del shell Mongo.

5
00:00:07,660 --> 00:00:09,980
Éste es, me he conectado
al primario --

6
00:00:09,980 --> 00:00:12,530
al 27018, a ese puerto.

7
00:00:12,530 --> 00:00:15,040
En esta segunda ventana, me he
conectado a este

8
00:00:15,040 --> 00:00:19,320
mongod secundario en el 27019.

9
00:00:19,320 --> 00:00:21,340
Y lo que voy a 
hacer aquí --

10
00:00:21,340 --> 00:00:25,840
sólo quiero obtener un "rs.status()"
otra vez, para echar un vistazo a la

11
00:00:25,840 --> 00:00:27,600
diferente configuración.

12
00:00:27,600 --> 00:00:31,315
Y puedes ver aquí que estoy en el
27018 y soy el primario.

13
00:00:31,315 --> 00:00:35,440
También puedes llamar a "rs.isMaster()",
que te dirá si eres

14
00:00:35,440 --> 00:00:36,710
o no el maestro.

15
00:00:36,710 --> 00:00:44,360
Por tanto, "rs.isMaster()" es "true" aquí,
y "rs.isMaster()" va a ser

16
00:00:44,360 --> 00:00:47,930
"false" aquí, porque no
soy el maestro aquí.

17
00:00:47,930 --> 00:00:50,690
Ahora, continuemos e insertemos
algo de nuevo.

18
00:00:50,690 --> 00:00:53,600
Voy a usar la 
base de datos "test" otra vez.

19
00:00:53,600 --> 00:00:57,660
Y voy a echar un vistazo a
"db.people.find()", y ahora voy

20
00:00:57,660 --> 00:00:59,100
a añadir algo
-- "db.people.insert" --

21
00:00:59,100 --> 00:01:02,700

22
00:01:02,700 --> 00:01:04,330
y voy a añadir un nuevo nombre.

23
00:01:04,330 --> 00:01:08,540
Añadiremos "Richard".

24
00:01:08,540 --> 00:01:10,940
Y en cuanto hago eso,
si hacemos el "find"

25
00:01:10,940 --> 00:01:12,610
aquí, puedo verlo.

26
00:01:12,610 --> 00:01:14,820
Y si hago el "find" aquí --

27
00:01:14,820 --> 00:01:18,670

28
00:01:18,670 --> 00:01:20,735
oh, todavía no puedo ejecutarlo.

29
00:01:20,735 --> 00:01:24,750
Tengo que decirle "rs.slaveOk()" para 
poder leer de éste.

30
00:01:24,750 --> 00:01:27,230
Y puedes ver que los datos han
sido sincronizados.

31
00:01:27,230 --> 00:01:29,012
Así que, ¿cómo funciona eso?

32
00:01:29,012 --> 00:01:33,200
Bien, hay una colección 
especial, una colección

33
00:01:33,200 --> 00:01:34,260
con tope ("capped") --

34
00:01:34,260 --> 00:01:37,220
que significa que tiene un cierto
tamaño y rotará

35
00:01:37,220 --> 00:01:38,770
una vez se llene --

36
00:01:38,770 --> 00:01:42,210
en la base de datos local, que
contiene un "oplog" para

37
00:01:42,210 --> 00:01:43,510
replicación.

38
00:01:43,510 --> 00:01:44,430
Así que --

39
00:01:44,430 --> 00:01:46,760
si mostramos las colecciones,
puedes verla justo aquí.

40
00:01:46,760 --> 00:01:51,020
Se llama "oplog.rs".

41
00:01:51,020 --> 00:01:52,380
Así que voy a echarle un vistazo.

42
00:01:52,380 --> 00:01:53,630
"db.oplog.rs.find().pretty()".

43
00:01:53,630 --> 00:02:00,630

44
00:02:00,630 --> 00:02:06,320
Y aquí puedes ver que en
este "oplog" tenemos un "insert"

45
00:02:06,320 --> 00:02:08,320
en "test.people" con --

46
00:02:08,320 --> 00:02:11,150
aquí está el objeto que fue
insertado llamado "Richard".

47
00:02:11,150 --> 00:02:14,080
Y si echamos un vistazo al "oplog" por
este lado, deberíamos ver 

48
00:02:14,080 --> 00:02:15,760
exactamente el mismo elemento.

49
00:02:15,760 --> 00:02:18,960
Así que hagamos eso.

50
00:02:18,960 --> 00:02:23,255
Ahora, ésta es una colección con tope,
y está en orden natural.

51
00:02:23,255 --> 00:02:25,530
No necesita un "_id",
porque las colecciones con tope

52
00:02:25,530 --> 00:02:26,810
no lo necesitan.

53
00:02:26,810 --> 00:02:30,720
Y puedes ver aquí que éste
es el mismo elemento que

54
00:02:30,720 --> 00:02:32,120
apareció en el "oplog".

55
00:02:32,120 --> 00:02:35,750
Y la forma en que ocurre esta
replicación es que los

56
00:02:35,750 --> 00:02:39,020
secundarios consultan el primario
y le piden cualquiera de los 

57
00:02:39,020 --> 00:02:41,600
elementos desde un cierto
"timestamp".

58
00:02:41,600 --> 00:02:43,690
Y entonces se trajo todos los datos
hasta la fecha que

59
00:02:43,690 --> 00:02:45,330
vinieron mientras tanto.

60
00:02:45,330 --> 00:02:48,800
También puede añadir un índice.

61
00:02:48,800 --> 00:02:50,650
Y si haces eso, entonces
también lo 

62
00:02:50,650 --> 00:02:51,270
añadirá al "oplog".

63
00:02:51,270 --> 00:02:53,780
Hagamos eso para que
puedas verlo.

64
00:02:53,780 --> 00:03:00,780
"db.people.ensureIndex({name: 1})".

65
00:03:00,780 --> 00:03:05,880
Hacemos eso y 
obtendremos los índices ahora.

66
00:03:05,880 --> 00:03:08,100
Mira, hay un índice.

67
00:03:08,100 --> 00:03:11,660
Y si miras aquí en el
"oplog" en el otro lado, 

68
00:03:11,660 --> 00:03:14,600
podemos ver que también va a haber
un índice en este lado,

69
00:03:14,600 --> 00:03:16,140
-- y uno secundario --

70
00:03:16,140 --> 00:03:17,370
además del propio índice --

71
00:03:17,370 --> 00:03:20,750
la creación del índice apareció
en el "oplog".

72
00:03:20,750 --> 00:03:23,280
"insert" en
"test.system.indexes".

73
00:03:23,280 --> 00:03:26,000
La forma en que los índices se
gestionan realmente en MongoDB es

74
00:03:26,000 --> 00:03:28,450
que básicamente son
inserciones en una colección

75
00:03:28,450 --> 00:03:31,230
para decirle al servidor Mongo
que el índice existe.

76
00:03:31,230 --> 00:03:32,740
Algo genial, en realidad.

77
00:03:32,740 --> 00:03:35,385
Así que, así es como funciona
la replicación.

78
00:03:35,385 --> 00:03:38,055
Usa este concepto de "oplog".

79
00:03:38,055 --> 00:03:38,890
De acuerdo.

80
00:03:38,890 --> 00:03:41,900
Entonces la pregunta es, ¿qué
ocurriría si

81
00:03:41,900 --> 00:03:44,620
apago el primario?

82
00:03:44,620 --> 00:03:48,280
¿Cuánto tardaría un
secundario en ser elegido?

83
00:03:48,280 --> 00:03:49,370
Vamos a hacer eso.

84
00:03:49,370 --> 00:03:51,740
Veamos cuánto tardaría una
conmutación por error.

85
00:03:51,740 --> 00:03:56,810
Así, voy a quitar este
primario que estaba en el 27018.

86
00:03:56,810 --> 00:03:58,010
Voy a apargarlo.

87
00:03:58,010 --> 00:04:00,410
Voy a buscar con "grep" los
mongo en ejecución.

88
00:04:00,410 --> 00:04:06,150
Y el 27018 parece que
está justo aquí, 6463.

89
00:04:06,150 --> 00:04:08,320
Simplemente voy a hacerle un "kill".

90
00:04:08,320 --> 00:04:09,930
"kill 6463".

91
00:04:09,930 --> 00:04:12,256
Pero estemos preparados para mirar
esto, asegurémonos

92
00:04:12,256 --> 00:04:13,500
que tengo esto bien.

93
00:04:13,500 --> 00:04:18,170
27018, identificador de proceso 6463.

94
00:04:18,170 --> 00:04:23,060
Hagamos un "rs.status()" aquí y
veamos cuánto tarda.

95
00:04:23,060 --> 00:04:25,040
Justo ahora todo
parece que está bien.

96
00:04:25,040 --> 00:04:26,830
27018 es el primario.

97
00:04:26,830 --> 00:04:28,330
Vamos a continuar, vamos
a hacerle un "kill".

98
00:04:28,330 --> 00:04:30,850

99
00:04:30,850 --> 00:04:35,550
Y ahora, vamos a ver
cuánto tarda en elegir

100
00:04:35,550 --> 00:04:37,170
un nuevo primario.

101
00:04:37,170 --> 00:04:42,010
Y puedes ver que el 27018 es
ahora inaccesible y parece que

102
00:04:42,010 --> 00:04:44,040
el 27019 --

103
00:04:44,040 --> 00:04:45,450
éste -- es ahora el primario.

104
00:04:45,450 --> 00:04:47,660
Por lo que fue bastante rápido.

105
00:04:47,660 --> 00:04:50,230
Así de rápida es una conmutación por
error en este caso.

106
00:04:50,230 --> 00:04:52,090
Y piensa que es
bastante normal.

107
00:04:52,090 --> 00:04:53,150
Creo que tardaría
un poco más en un

108
00:04:53,150 --> 00:04:54,140
sistema en ejecución más grande.

109
00:04:54,140 --> 00:04:56,060
Pero fue rápido.

110
00:04:56,060 --> 00:05:00,800
Bien, hora de hacer
un cuestionario.

111
00:05:00,800 --> 00:05:04,570
Y el cuestionario es, en el vídeo,
¿cuánto tardó en elegir

112
00:05:04,570 --> 00:05:05,660
un nuevo primario?

113
00:05:05,660 --> 00:05:06,860
Alrededor de 3 segundos --

114
00:05:06,860 --> 00:05:11,110
o quizá menos, alrededor de 10 segundos,
unos 30 segundos o

115
00:05:11,110 --> 00:05:11,890
en torno a un minuto?

116
00:05:11,890 --> 00:05:13,540
Y eso es, responde a la pregunta.

117
00:05:13,540 --> 00:05:14,790
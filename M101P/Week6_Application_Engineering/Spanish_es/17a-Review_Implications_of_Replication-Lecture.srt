1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:03,470
OK, analicemos las
repercusiones de la replicación

3
00:00:03,470 --> 00:00:05,990
para el desarrollo de aplicaciones.

4
00:00:05,990 --> 00:00:09,210
Por un lado, la idea global
de usar conjuntos de réplicas es

5
00:00:09,210 --> 00:00:11,850
que son muy transparentes
para el desarrollador y por eso

6
00:00:11,850 --> 00:00:14,170
no tienes que comprender
realmente que están ahí.

7
00:00:14,170 --> 00:00:17,050
Se supone que sólo crean
mayor disponibilidad y tolerancia

8
00:00:17,050 --> 00:00:19,730
a fallos sin interferir
en tu camino.

9
00:00:19,730 --> 00:00:21,260
Pero hay unas cuantas cosas
que necesitas recordar.

10
00:00:21,260 --> 00:00:24,180
La primera es que,
por supuesto, existen

11
00:00:24,180 --> 00:00:26,120
estas "seedlists".

12
00:00:26,120 --> 00:00:28,500
Por lo que necesitas recordar que
cuando estás usando los drivers,

13
00:00:28,500 --> 00:00:30,560
que son pincipalmente los 
responsables de conectarte

14
00:00:30,560 --> 00:00:34,590
a un nuevo nodo durante una conmutación
por error, tras la elección de un

15
00:00:34,590 --> 00:00:37,960
nuevo primario, los drivers necesitan
conocer al menos a un miembro

16
00:00:37,960 --> 00:00:39,080
del conjunto de réplicas.

17
00:00:39,080 --> 00:00:41,850
Por lo que necesitas comprender
que existe una "seedlist".

18
00:00:41,850 --> 00:00:43,890
La segunda es que ahora que
estamos en este entorno

19
00:00:43,890 --> 00:00:46,620
distribuido, necesitas
comprender esta idea de concernencia

20
00:00:46,620 --> 00:00:50,460
de escritura, y en particular, la
idea de esperar a que algún

21
00:00:50,460 --> 00:00:53,880
número de nodos confirme
tus escrituras a través del parámetro

22
00:00:53,880 --> 00:00:57,480
"w", el parámetro "j",
que te permiten esperar o no

23
00:00:57,480 --> 00:01:00,700
a que el nodo primario asegure 
la escritura al disco.

24
00:01:00,700 --> 00:01:04,599
Y también el parámetro "wtimeout",
que es cuánto

25
00:01:04,599 --> 00:01:07,090
vas a esperar hasta ver
tu escritura replicada a

26
00:01:07,090 --> 00:01:09,000
otros miembros del
conjunto de réplicas.

27
00:01:09,000 --> 00:01:13,160
Así que tienes que tener eso en
mente, porque va a tener

28
00:01:13,160 --> 00:01:15,840
repercusiones en la forma
en que escribes aplicaciones,

29
00:01:15,840 --> 00:01:18,410
suponiendo que estos valores por
defecto no han sido establecidos en

30
00:01:18,410 --> 00:01:20,260
el conjunto de réplicas por ti.

31
00:01:20,260 --> 00:01:22,800
Bien, la siguiente es que
ahora que existen múltiples

32
00:01:22,800 --> 00:01:25,800
nodos de los que potencialmente
puedes leer, tienes que decidir

33
00:01:25,800 --> 00:01:27,720
si quieres leer o no
de tu primario, que

34
00:01:27,720 --> 00:01:30,530
es por defecto, lo más obvio y 
lo ideal, o

35
00:01:30,530 --> 00:01:33,310
si quieres efectuar tus
lecturas sobre los secundarios.

36
00:01:33,310 --> 00:01:35,210
Y si vas a tomar tus
lecturas de los secundarios,

37
00:01:35,210 --> 00:01:37,510
la aplicación tiene que estar
perparada para usar datos

38
00:01:37,510 --> 00:01:40,070
potencialmente obsoletos con 
respecto a lo que se escribió.

39
00:01:40,070 --> 00:01:43,070
Y la idea final es que
aún existiendo la

40
00:01:43,070 --> 00:01:47,200
replicación, y que tengas estos
nodos preparados para tratar

41
00:01:47,200 --> 00:01:51,370
los errores y defectos y elegir
un nuevo primario si es necesario,

42
00:01:51,370 --> 00:01:53,700
aún así, siempre pueden
producirse errores.

43
00:01:53,700 --> 00:01:57,640
Y estos errores pueden ocurrir
por situaciones transitorias

44
00:01:57,640 --> 00:02:00,510
como una conmutación por error,
o pueden suceder

45
00:02:00,510 --> 00:02:02,760
porque hay posibles errores
de red.

46
00:02:02,760 --> 00:02:05,220
O en realidad podría haber errores
en términos de incumplimiento

47
00:02:05,220 --> 00:02:08,570
de las restricciones de clave única
u otras cosas sintácticas.

48
00:02:08,570 --> 00:02:11,520
Y por eso, hablando en general, para
crear una aplicación robusta

49
00:02:11,520 --> 00:02:14,470
necesitas comprobar las
excepciones cuando lees y cuando

50
00:02:14,470 --> 00:02:17,600
escribes en la base de datos para
asegurarte que si surge algo,

51
00:02:17,600 --> 00:02:18,370
lo sabes.

52
00:02:18,370 --> 00:02:20,910
Así que puedes asegurarte que
entiendes la aplicación sobre

53
00:02:20,910 --> 00:02:24,040
qué datos han sido confirmados,
y qué datos son persistentes

54
00:02:24,040 --> 00:02:25,320
en tu aplicación.

55
00:02:25,320 --> 00:02:27,470
OK, hagamos un pequeño cuestionario.

56
00:02:27,470 --> 00:02:28,930
Y aquí está el cuestionario.

57
00:02:28,930 --> 00:02:32,140
Si estableces "w" igual a 4 en una
conexión y hay sólo tres

58
00:02:32,140 --> 00:02:34,790
nodos en el conjunto de réplicas,
¿cuánto esperarás en

59
00:02:34,790 --> 00:02:36,880
PyMongo para una respuesta
de un "insert" si 

60
00:02:36,880 --> 00:02:38,220
no estableciste un "wtimeout"?

61
00:02:38,220 --> 00:02:39,670
No estableces un "wtimeout".

62
00:02:39,670 --> 00:02:42,310
Y sé que no hemos visto
esto explícitamente, pero 

63
00:02:42,310 --> 00:02:45,960
quiero que supongas cuál es
la respuesta basándote en el hecho

64
00:02:45,960 --> 00:02:48,380
que "wtimeout" controla cuánto
vas a esperar

65
00:02:48,380 --> 00:02:50,890
a estos "commits" y sólo 
hay tres nodos, y has

66
00:02:50,890 --> 00:02:52,370
establecido "w" igual a cuatro.

67
00:02:52,370 --> 00:02:55,260
¿Cuánto crees que tardará
en volver y 

68
00:02:55,260 --> 00:02:56,260
dar algún tipo de error?

69
00:02:56,260 --> 00:02:58,940
Obviamente no va a hacer
"commit" a cuatro nodos si

70
00:02:58,940 --> 00:03:00,770
hay sólo tres nodos
en el conjunto de réplicas.

71
00:03:00,770 --> 00:03:02,050
Así que marca la respuesta.

72
00:03:02,050 --> 00:03:03,300
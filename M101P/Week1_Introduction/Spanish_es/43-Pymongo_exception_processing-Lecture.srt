1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:00,450
Bien.

3
00:00:00,450 --> 00:00:02,520
Hemos hablado sobre cómo
funciona PyMongo.

4
00:00:02,520 --> 00:00:05,080
Y también hemos enseñado un poco
acerca de cómo funciona el

5
00:00:05,080 --> 00:00:07,410
procesamiento de excepciones
en Python.

6
00:00:07,410 --> 00:00:10,030
Y quiero juntar esos dos
conceptos justo ahora

7
00:00:10,030 --> 00:00:12,570
y mostrar cómo el procesamiento
de excepciones y

8
00:00:12,570 --> 00:00:14,330
PyMongo funcionan juntos.

9
00:00:14,330 --> 00:00:16,600
Ahora, he escrito un pequeño
programa aquí que va a 

10
00:00:16,600 --> 00:00:19,100
crear un documento con
"firstname" Andrew

11
00:00:19,100 --> 00:00:20,580
y "lastname" Erlichson.

12
00:00:20,580 --> 00:00:24,350
Y lo va a insertar
en MongoDB.

13
00:00:24,350 --> 00:00:26,550
Así que antes de hacer eso,
lo imprime.

14
00:00:26,550 --> 00:00:28,680
Y luego hace la
inserción justo aquí.

15
00:00:28,680 --> 00:00:31,420
A continuación comprueba para asegurarse
que si se lanzó una excepción

16
00:00:31,420 --> 00:00:34,360
imprima "insert
failed" y lo imprime

17
00:00:34,360 --> 00:00:39,330
usando este "sys.exc_info",
imprime la

18
00:00:39,330 --> 00:00:42,050
excepción que se produjo.

19
00:00:42,050 --> 00:00:46,060
Y después de esto, imprime
el documento de nuevo y

20
00:00:46,060 --> 00:00:48,450
lo inserta otra vez 
en la base de datos.

21
00:00:48,450 --> 00:00:51,330
Veamos qué ocurre cuando
ejecutamos este programa.

22
00:00:51,330 --> 00:00:54,110
Vamos a ejecutar este
programa, que se llama

23
00:00:54,110 --> 00:00:57,520
"mongo_exception", y veamos
qué ocurre.

24
00:00:57,520 --> 00:00:59,160
Vamos a verlo.

25
00:00:59,160 --> 00:01:00,670
Imprimió el documento
antes de

26
00:01:00,670 --> 00:01:02,500
insertarlo justo aquí.

27
00:01:02,500 --> 00:01:05,660
Y podemos ver aquí que
"lastname" es Erlichson y

28
00:01:05,660 --> 00:01:06,910
"firstname" Andrew.

29
00:01:06,910 --> 00:01:09,080

30
00:01:09,080 --> 00:01:10,880
Luego inserta el documento.

31
00:01:10,880 --> 00:01:14,290
Y tras insertar el
documento, este documento es

32
00:01:14,290 --> 00:01:16,470
como éste aquí.

33
00:01:16,470 --> 00:01:18,980
Ahora, ésta es la segunda
sentencia "print".

34
00:01:18,980 --> 00:01:20,980
Te mostraré
dónde ocurre.

35
00:01:20,980 --> 00:01:24,980
Así que imprime el documento
antes de insertarlo.

36
00:01:24,980 --> 00:01:26,340
Y luego lo inserta.

37
00:01:26,340 --> 00:01:27,940
Y entonces lo imprime de nuevo.

38
00:01:27,940 --> 00:01:30,560
Y a continuación lo inserta otra vez
y lo imprime una tercera

39
00:01:30,560 --> 00:01:32,070
vez después de insertarlo.

40
00:01:32,070 --> 00:01:35,010
Ahora, cuando intenta insertar la
segunda vez, puedes ver

41
00:01:35,010 --> 00:01:38,580
que da un error, que se captura
en el bloque "try-catch".

42
00:01:38,580 --> 00:01:40,440
E imprime
"insert failed".

43
00:01:40,440 --> 00:01:42,950
Y te da el propio error,
que es un

44
00:01:42,950 --> 00:01:45,080
"DuplicateKeyError".

45
00:01:45,080 --> 00:01:46,580
Eso es un poco inusual.

46
00:01:46,580 --> 00:01:50,870
Y luego muestra el documento
que intentó insertar, que

47
00:01:50,870 --> 00:01:54,540
puedes ver que es el mismo documento
que existía en la 

48
00:01:54,540 --> 00:01:56,760
variable después de la
primera inserción.

49
00:01:56,760 --> 00:01:59,970
Vamos a entender qué está
sucediendo aquí.

50
00:01:59,970 --> 00:02:01,750
Inicialmente, teníamos 
un documento sin

51
00:02:01,750 --> 00:02:03,820
_id.

52
00:02:03,820 --> 00:02:08,090
El propio driver añadió un
_id cuando hizo la

53
00:02:08,090 --> 00:02:10,100
inserción en la base de datos.

54
00:02:10,100 --> 00:02:12,620
Y entonces cuando fuimos a insertar
el mismo documento

55
00:02:12,620 --> 00:02:16,030
otra vez, como el driver también
lo añadió a la variable "doc"

56
00:02:16,030 --> 00:02:17,780
justo aquí --

57
00:02:17,780 --> 00:02:19,760
por lo que en este punto, imprimimos
tras la inserción.

58
00:02:19,760 --> 00:02:21,740
Tenía un campo _id.

59
00:02:21,740 --> 00:02:25,170
Y luego, en la segunda inserción,
falló porque todos

60
00:02:25,170 --> 00:02:28,430
los _id
deben ser únicos.

61
00:02:28,430 --> 00:02:31,380
Y como consecuencia, esto fue un
conflicto, porque estaba

62
00:02:31,380 --> 00:02:33,870
intentando insertar un documento
que tenía el mismo

63
00:02:33,870 --> 00:02:34,980
_id.

64
00:02:34,980 --> 00:02:38,110
Y si miramos en la colección
real, deberías ver

65
00:02:38,110 --> 00:02:39,980
que sólo está ahí una vez.

66
00:02:39,980 --> 00:02:42,740
Así que echemos un vistazo y veamos
si esto es cierto.

67
00:02:42,740 --> 00:02:48,100
Echemos un vistazo a
"db.users.find".

68
00:02:48,100 --> 00:02:49,640
Y ahí está el documento.

69
00:02:49,640 --> 00:02:51,810
Podemos imprimirlo de forma elegante.

70
00:02:51,810 --> 00:02:53,810
Puedes ver que ahí está
el documento.

71
00:02:53,810 --> 00:02:58,940
Y sólo está ahí una vez,
porque la segunda inserción falló.

72
00:02:58,940 --> 00:03:02,510
Ahora, si quisiéramos realmente
insertarlo dos veces, tenemos un montón

73
00:03:02,510 --> 00:03:04,060
de opciones.

74
00:03:04,060 --> 00:03:08,140
Y una de ellas sería
ir justo aquí

75
00:03:08,140 --> 00:03:11,110
y reasignar "doc".

76
00:03:11,110 --> 00:03:15,370
Por lo que tras la primera inserción justo
aquí, podríamos reasignar

77
00:03:15,370 --> 00:03:18,720
la variable del documento,
que limpiará el

78
00:03:18,720 --> 00:03:19,690
campo _id.

79
00:03:19,690 --> 00:03:21,650
Y ahora, cuando hacemos la
segunda inserción,

80
00:03:21,650 --> 00:03:22,750
debería estar bien.

81
00:03:22,750 --> 00:03:23,930
Hagamos eso.

82
00:03:23,930 --> 00:03:26,920
Sólo para tener la misma
precondición, borremos la

83
00:03:26,920 --> 00:03:28,010
colección.

84
00:03:28,010 --> 00:03:30,870
Y confirmaremos que no hay
nada ahí --

85
00:03:30,870 --> 00:03:32,930
no, nada ahí.

86
00:03:32,930 --> 00:03:34,180
Ejecutémoslo.

87
00:03:34,180 --> 00:03:36,260

88
00:03:36,260 --> 00:03:38,610
Y ahora no obtenemos error.

89
00:03:38,610 --> 00:03:40,040
Tras la segunda inserción,
por supuesto, hay

90
00:03:40,040 --> 00:03:41,800
un _id.

91
00:03:41,800 --> 00:03:48,090
Y miramos en MongoDB, puedes
ver que estoy ahí dos veces

92
00:03:48,090 --> 00:03:52,100
con dos _id diferentes
justo aquí, dos

93
00:03:52,100 --> 00:03:53,670
_id diferentes.

94
00:03:53,670 --> 00:03:56,720
Y el driver ha generado un
_id para cada una de

95
00:03:56,720 --> 00:03:59,530
estas inserciones, porque el
documento no tenía uno cuando

96
00:03:59,530 --> 00:04:00,600
el driver lo tomó.

97
00:04:00,600 --> 00:04:03,170
Así que recuerda, si no
especificas un _id, el

98
00:04:03,170 --> 00:04:06,330
driver añadirá uno por ti y
también lo insertará en

99
00:04:06,330 --> 00:04:08,330
tu variable por lo que
puedes verlo una vez que

100
00:04:08,330 --> 00:04:09,660
la inserción se ha completado.

101
00:04:09,660 --> 00:04:12,690
Y si lanza cualquier
excepción por cualquier motivo en

102
00:04:12,690 --> 00:04:16,180
la inserción, entonces puedes capturarla
e imprimir la

103
00:04:16,180 --> 00:04:20,019
propia excepción usando
esta llamada justo aquí.

104
00:04:20,019 --> 00:04:23,520
Así es como interactúan las 
excepciones con PyMongo y

105
00:04:23,520 --> 00:04:27,720
mongod para ofrecer información
de depuración cuando

106
00:04:27,720 --> 00:04:28,970
estés escribiendo tus programas Python.

107
00:04:28,970 --> 00:04:30,090
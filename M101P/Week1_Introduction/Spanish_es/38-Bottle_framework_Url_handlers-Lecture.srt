1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:02,530
En esta sección opcional, voy
a analizar cómo funciona

3
00:00:02,530 --> 00:00:04,940
el framework Bottle y veremos
un poco de fundamentos de

4
00:00:04,940 --> 00:00:06,880
servidores web en general, en caso
de que no tengas mucha

5
00:00:06,880 --> 00:00:08,770
experiencia programando
en la web.

6
00:00:08,770 --> 00:00:11,500
Esto es completamente opcional,
y también puedes aprender sobre esto

7
00:00:11,500 --> 00:00:13,130
por tu cuenta si quieres
ir a la web

8
00:00:13,130 --> 00:00:14,880
y buscar en Google "Bottle.py".

9
00:00:14,880 --> 00:00:16,840
Bien, hablemos acerca
de la web durante un segundo.

10
00:00:16,840 --> 00:00:19,910
En la web, se usa un navegador
web, tal como Chrome.

11
00:00:19,910 --> 00:00:22,240
Y ese navegador web
muestra páginas web.

12
00:00:22,240 --> 00:00:25,340
Esas páginas web están en HTML (HyperText
Markup Language).

13
00:00:25,340 --> 00:00:29,180
Y tu navegador web muestra
esas páginas haciendo peticiones

14
00:00:29,180 --> 00:00:32,055
sobre TCP/IP, normalmente
en el puerto 80

15
00:00:32,055 --> 00:00:34,160
usando el protocolo HTTP.

16
00:00:34,160 --> 00:00:37,600
Por lo tanto, la forma en que encaja esto
es que en el fondo es IP,

17
00:00:37,600 --> 00:00:41,055
y TCP está construido sobre él,
y HTTP está construido sobre

18
00:00:41,055 --> 00:00:43,030
él, hasta algún tipo
de servidor web.

19
00:00:43,030 --> 00:00:45,610
Y este servidor web, en nuestro
caso, va a estar ejecutando

20
00:00:45,610 --> 00:00:47,850
Python con el framework
Bottle.

21
00:00:47,850 --> 00:00:52,270
Si has visto URLs, tienen
un nombre de "host" y luego

22
00:00:52,270 --> 00:00:54,390
normalmente alguna ruta,
como "mypage".

23
00:00:54,390 --> 00:00:57,100
Por defecto, si no hay
ruta, entonces estás pidiendo

24
00:00:57,100 --> 00:01:00,480
la página "index" del sitio web-- la
página principal, la página /.

25
00:01:00,480 --> 00:01:03,350
Una petición para obtener una página se
llama petición "get".

26
00:01:03,350 --> 00:01:06,800
De acuerdo, vamos a revisar cómo
crearíamos un simple programa

27
00:01:06,800 --> 00:01:10,930
basado en Bottle para responder
a peticiones web en un puerto.

28
00:01:10,930 --> 00:01:14,420
Una pequeña nota -- no podemos usar
el puerto 80, normalmente, cuando no

29
00:01:14,420 --> 00:01:15,510
somos "root" en un equipo.

30
00:01:15,510 --> 00:01:19,970
Por eso en los ejemplos anteriores
he estado usando el puerto 8082 y

31
00:01:19,970 --> 00:01:23,460
ahora voy a usar el puerto
8080, que es un puerto

32
00:01:23,460 --> 00:01:26,580
no reservado y puede usarse por un usuario
que no tiene muchos privilegios,

33
00:01:26,580 --> 00:01:29,530
por supuesto en un equipo Unix.

34
00:01:29,530 --> 00:01:31,040
OK, así que vamos a ello.

35
00:01:31,040 --> 00:01:34,130
Aquí tenemos un programa muy pequeño que
imprime "Hello World".

36
00:01:34,130 --> 00:01:36,760
Y vayamos sobre las partes
básicas de este programa porque

37
00:01:36,760 --> 00:01:39,040
van a ser las mismas 
en todos los programas Bottle.

38
00:01:39,040 --> 00:01:41,020
Así que comencemos por importar
el framework justo

39
00:01:41,020 --> 00:01:42,370
aquí, "import bottle".

40
00:01:42,370 --> 00:01:43,480
De esa forma, tendrás
acceso a los

41
00:01:43,480 --> 00:01:44,860
métodos dentro del framework.

42
00:01:44,860 --> 00:01:48,590
Y luego, si quieres especificar
un manejador que

43
00:01:48,590 --> 00:01:51,830
mostrará páginas web cuando los usuarios
pidan tu sitio web, sin

44
00:01:51,830 --> 00:01:55,990
ninguna ruta, la /, como
www.google.com, o simplemente "localhost",

45
00:01:55,990 --> 00:02:00,140
entonces se hace con este
decorador "@bottle.route", configurado

46
00:02:00,140 --> 00:02:02,390
para "/", y entonces tienes una
función aquí, y este nombre

47
00:02:02,390 --> 00:02:04,000
aquí, "home_page",
es arbitrario.

48
00:02:04,000 --> 00:02:05,780
Puedes llamarlo de la forma
que quieras.

49
00:02:05,780 --> 00:02:08,530
Y en este caso, simplemente
vamos a devolver "Hello World".

50
00:02:08,530 --> 00:02:10,300
Eso es todo lo que vamos a hacer.

51
00:02:10,300 --> 00:02:14,290
Ahora, si queremos crear un
manejador para la URL de "testpage",

52
00:02:14,290 --> 00:02:15,550
podemos hacerlo también.

53
00:02:15,550 --> 00:02:18,675
Declaramos "@bottle.route"
y luego "/testpage".

54
00:02:18,675 --> 00:02:20,740
Y de nuevo, tras esto el
nombre de función es arbitrario,

55
00:02:20,740 --> 00:02:22,650
y devuelve "this is a test page".

56
00:02:22,650 --> 00:02:25,050
Estas dos sentencias finales,
probablemente querrás tenerlas

57
00:02:25,050 --> 00:02:26,780
en todos tus
programas bottle.

58
00:02:26,780 --> 00:02:28,070
La primera activa
el modo depuración,

59
00:02:28,070 --> 00:02:29,110
lo cual es muy útil.

60
00:02:29,110 --> 00:02:31,170
Por un lado, no tendrás
que reiniciar el servidor web

61
00:02:31,170 --> 00:02:33,260
cada vez que quieras
hacer un cambio.

62
00:02:33,260 --> 00:02:34,220
Recargará las páginas.

63
00:02:34,220 --> 00:02:35,760
Observará las páginas.

64
00:02:35,760 --> 00:02:37,670
Y la segunda es
el comando "run".

65
00:02:37,670 --> 00:02:38,930
Y éste hace dos cosas.

66
00:02:38,930 --> 00:02:41,080
Especifica sobre qué puerto vas
a escuchar, que en este 

67
00:02:41,080 --> 00:02:42,790
caso es el puerto 8080.

68
00:02:42,790 --> 00:02:45,840
Y la segunda es que establece
el "hostname" para el que

69
00:02:45,840 --> 00:02:47,500
vamos a aceptar peticiones.

70
00:02:47,500 --> 00:02:50,970
Bajo el protocolo HTTP 1.1 todas
las peticiones web tienen un "hostname"

71
00:02:50,970 --> 00:02:53,100
en ellas de forma que múltiples
servicios web pueden

72
00:02:53,100 --> 00:02:54,410
ejecutarse en el mismo puerto.

73
00:02:54,410 --> 00:02:56,460
Así que veamos qué ocurre
si lo llamamos.

74
00:02:56,460 --> 00:02:58,170
Primero, iniciemos
el servidor web.

75
00:02:58,170 --> 00:03:02,760
Y ya está iniciado, pero 
voy a reiniciarlo ya que

76
00:03:02,760 --> 00:03:06,450
voy a iniciar el servidor web ahora 
llamando a "python hello_world.py".

77
00:03:06,450 --> 00:03:07,240
Lo inicia.

78
00:03:07,240 --> 00:03:08,660
Imprime mensajes
a la salida estándar.

79
00:03:08,660 --> 00:03:10,390
Por lo que éste es un buen lugar para mirar
si se produce cualquier error.

80
00:03:10,390 --> 00:03:13,790
Y luego puedo ir a
mi navegador web.

81
00:03:13,790 --> 00:03:16,390
Y puedo hacer una petición
a "localhost".

82
00:03:16,390 --> 00:03:20,450
Y voy a hacer esa
petición a :8080, que es

83
00:03:20,450 --> 00:03:21,685
el puerto web que configuramos.

84
00:03:21,685 --> 00:03:24,770
Y si hacemos eso, podemos ver
que ocurren un par de cosas.

85
00:03:24,770 --> 00:03:27,260
La primera es que imprime "Hello
World" en pantalla.

86
00:03:27,260 --> 00:03:30,820
Y la segunda es que el servidor
web responmde aceptando

87
00:03:30,820 --> 00:03:31,250
tu petición.

88
00:03:31,250 --> 00:03:36,690
Puedes ver que dice "GET"
justo aquí desde 1.0.0.127

89
00:03:36,690 --> 00:03:39,840
que es la "loopback IP" 
para mi equipo.

90
00:03:39,840 --> 00:03:41,930
Así que de acuerdo, eso funciona bien.

91
00:03:41,930 --> 00:03:44,550
Si quieres ver exactamente qué
viajó por la red, puedes

92
00:03:44,550 --> 00:03:47,320
usar "curl" para hacerlo,
y haré eso ahora.

93
00:03:47,320 --> 00:03:49,060
"curl", si no lo tienes
instalado, es un potente y pequeño

94
00:03:49,060 --> 00:03:51,210
programa para hacer peticiones
a servidores web

95
00:03:51,210 --> 00:03:52,380
desde la línea de comandos.

96
00:03:52,380 --> 00:03:54,990
Así que voy a hacer un "curl -i",
que me da las cabeceras, 

97
00:03:54,990 --> 00:03:56,990
a 
"localhost:8080".

98
00:03:56,990 --> 00:04:00,800
Y cuando hago eso, puedes ver
que obtengo un "200 OK",

99
00:04:00,800 --> 00:04:04,750
la fecha y realmente el servidor
web se identifica a sí mismo como

100
00:04:04,750 --> 00:04:08,280
"Python server", "WSGI server" y
a continuación dice que el

101
00:04:08,280 --> 00:04:10,120
contenido es "text/html".

102
00:04:10,120 --> 00:04:12,220
Y esto no es realmente
una página HTML válida.

103
00:04:12,220 --> 00:04:15,130
Le falta el HTML en el
cuerpo y todo lo demás.

104
00:04:15,130 --> 00:04:16,089
Pero está OK.

105
00:04:16,089 --> 00:04:17,720
Te mostraré cómo añadirlo
en un segundo.

106
00:04:17,720 --> 00:04:20,380
Y luego si queremos hacer un
cambio aquí y una petición a

107
00:04:20,380 --> 00:04:23,350
/testpage, porque también vamos
a listar /testpage,

108
00:04:23,350 --> 00:04:26,790
entonces podemos hacer eso,
/testpage.

109
00:04:26,790 --> 00:04:29,590
Y entonces obtenemos "this is
a test" justo aquí.

110
00:04:29,590 --> 00:04:30,760
Y eso es lo mismo 
que obtendríamos si

111
00:04:30,760 --> 00:04:32,800
fuéramos un navegador web.

112
00:04:32,800 --> 00:04:34,230
"this is a test page".

113
00:04:34,230 --> 00:04:37,820
Ahora, si quisiéramos devolver
una página más adecuada, podría.

114
00:04:37,820 --> 00:04:39,570
Tengo que conocer un poco
de HTML.

115
00:04:39,570 --> 00:04:41,850
Pero la página básica
es similar a esto --

116
00:04:41,850 --> 00:04:46,940
"html", "title", cierro "title", "body",
y luego cierro el "body",

117
00:04:46,940 --> 00:04:48,980
y después cierro el "html".

118
00:04:48,980 --> 00:04:51,760
Y ésa es una página web
más completa.

119
00:04:51,760 --> 00:04:54,710
A continuación si volvemos a nuestro
navegador web y hacemos una simple

120
00:04:54,710 --> 00:04:56,980
petición a la página raíz del
servidor web, imprime

121
00:04:56,980 --> 00:04:57,930
"Hello World".

122
00:04:57,930 --> 00:04:59,850
Pero ahora, si vemos
el código fuente --

123
00:04:59,850 --> 00:05:01,765
oh, podría necesitar reiniciar
el servidor aquí.

124
00:05:01,765 --> 00:05:03,170
Y lo haré.

125
00:05:03,170 --> 00:05:04,350
Allá vamos.

126
00:05:04,350 --> 00:05:06,230
Creo, con la depuración activada, 
creo que tus

127
00:05:06,230 --> 00:05:08,030
vistas serán releídas.

128
00:05:08,030 --> 00:05:09,640
Y todavía no hemos llegado a
qué son las vistas.

129
00:05:09,640 --> 00:05:11,480
Pero no hay código fuente.

130
00:05:11,480 --> 00:05:13,390
Así que veremos qué ocurrió.

131
00:05:13,390 --> 00:05:16,080
Ahora parece más de lo
mismo, debido a que

132
00:05:16,080 --> 00:05:19,710
el navegador web va a ocultar el
hecho de que la página no era

133
00:05:19,710 --> 00:05:20,740
válida antes.

134
00:05:20,740 --> 00:05:22,270
Los navegadores web perdonan
mucho actualmente.

135
00:05:22,270 --> 00:05:25,380
Pero si vemos el código fuente,
podemos ver que ahora tiene "html",

136
00:05:25,380 --> 00:05:29,010
"title", cierre del "title", y luego el
"body", y a continuación el cierre de la

137
00:05:29,010 --> 00:05:30,960
etiqueta "body", y el cierre de la etiqueta "html".

138
00:05:30,960 --> 00:05:34,950
Y si continuamos usando curl,
deberías ver lo mismo.

139
00:05:34,950 --> 00:05:36,130
Así que haré eso.

140
00:05:36,130 --> 00:05:39,770
Y entonces puedes ver que dice
"html", "title" y luego "body".

141
00:05:39,770 --> 00:05:42,200
OK, así es como se 
crean las rutas

142
00:05:42,200 --> 00:05:44,450
dentro de los scripts de Bottle.

143
00:05:44,450 --> 00:05:45,700
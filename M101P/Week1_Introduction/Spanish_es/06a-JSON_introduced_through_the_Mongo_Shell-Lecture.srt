1
00:00:00,000 --> 00:00:00,390

2
00:00:00,390 --> 00:00:02,730
Bien, hay un par de cosas 
más que quería enseñarte

3
00:00:02,730 --> 00:00:05,940
sobre JSON y el shell Mongo 
antes de pasar a la 

4
00:00:05,940 --> 00:00:08,240
construcción del resto de nuestra 
primera aplicación --

5
00:00:08,240 --> 00:00:10,010
nuestra muy pequeña aplicación.

6
00:00:10,010 --> 00:00:13,330
La primera es de la que hablamos
antes, podemos crear

7
00:00:13,330 --> 00:00:15,350
documentos que tienen cierta
jerarquía en ellos.

8
00:00:15,350 --> 00:00:19,160
Así que en éste, voy a 
crear una clave "a", una clave "b",

9
00:00:19,160 --> 00:00:20,280
así como una clave "c".

10
00:00:20,280 --> 00:00:22,720
Y lo llamaré "fruits" otra vez,
o "fruit".

11
00:00:22,720 --> 00:00:27,360
Y luego voy a incluir en
ese array, 'apple', 'orange',

12
00:00:27,360 --> 00:00:30,680
y 'pear' y cierro
los paréntesis.

13
00:00:30,680 --> 00:00:33,060
Voy a guardarlo en
la colección.

14
00:00:33,060 --> 00:00:36,850
Ahora si hago un db.thing.find,
encontraré

15
00:00:36,850 --> 00:00:38,250
mi documento ahí.

16
00:00:38,250 --> 00:00:41,410
Puedes ver, una vez más,
la naturaleza heterogénea de las

17
00:00:41,410 --> 00:00:42,460
colecciones.

18
00:00:42,460 --> 00:00:46,930
Entonces tenemos ahora un documento con
"a", "b" y un array 

19
00:00:46,930 --> 00:00:49,830
"fruit" con "apple", "orange"
y "pear".

20
00:00:49,830 --> 00:00:52,170
Y se puede anidar
de la forma que quieras.

21
00:00:52,170 --> 00:00:55,500
Podrías imaginar que si
estuviera creando un registro de

22
00:00:55,500 --> 00:00:58,810
dirección, por ejemplo, podría
hacer algo como esto.

23
00:00:58,810 --> 00:01:02,940
Con mi nombre, "Andrew", y 
mi dirección, podía poner un 

24
00:01:02,940 --> 00:01:07,125
subdocumento justo aquí 
siendo la calle "elm

25
00:01:07,125 --> 00:01:12,560
drive" y la ciudad "Palo 
Alto", y el código postal

26
00:01:12,560 --> 00:01:16,400
"94305", que creo que es 
el código postal de Palo Alto.

27
00:01:16,400 --> 00:01:18,170
Tal vez necesitemos ahí un número de 
vivienda, por lo que pondremos un número

28
00:01:18,170 --> 00:01:20,590
de vivienda, 34.

29
00:01:20,590 --> 00:01:23,660
Y voy a cerrar esto
justo aquí, voy a

30
00:01:23,660 --> 00:01:24,970
terminarlo.

31
00:01:24,970 --> 00:01:25,060
Ooh --

32
00:01:25,060 --> 00:01:26,570
Puedo ver un error.

33
00:01:26,570 --> 00:01:29,540
Puedo volver atrás en el shell y
ver justo ahí que no

34
00:01:29,540 --> 00:01:31,660
hice realmente que todo esto
sea un documento JSON.

35
00:01:31,660 --> 00:01:32,910
Así que voy a poner eso.

36
00:01:32,910 --> 00:01:34,270
Estoy usando Emacs.

37
00:01:34,270 --> 00:01:36,600
Esto es un Control-F para ir
hacia delante en el shell.

38
00:01:36,600 --> 00:01:37,680
Creo que, que es un

39
00:01:37,680 --> 00:01:39,470
subdocumento dentro del documento.

40
00:01:39,470 --> 00:01:41,530
Así que necesito cerrar dos
paréntesis y luego puedo

41
00:01:41,530 --> 00:01:42,160
cerrar esto.

42
00:01:42,160 --> 00:01:42,980
Y allá vamos.

43
00:01:42,980 --> 00:01:46,910
Ahora echemos un vistazo a 
db.things.find, y hagámoslo

44
00:01:46,910 --> 00:01:49,106
de forma elegante.

45
00:01:49,106 --> 00:01:51,260
Hay un comando "pretty"
en el shell que 

46
00:01:51,260 --> 00:01:53,575
permite imprimir 
de forma elegante.

47
00:01:53,575 --> 00:01:55,590
Y ahí lo ves, en realidad está
desplazado fuera de la 

48
00:01:55,590 --> 00:01:59,170
pantalla, pero puedes ver que este 
documento final que añadí tiene un 

49
00:01:59,170 --> 00:02:01,800
ID que ha sido asignado por la 
base de datos, el nombre Andrew, 

50
00:02:01,800 --> 00:02:04,770
y luego una dirección, que 
es en sí misma un subdocumento.

51
00:02:04,770 --> 00:02:06,970
Y este tipo de documento muestra la 
jerarquía que puede existir 

52
00:02:06,970 --> 00:02:08,810
dentro de MongoDB.

53
00:02:08,810 --> 00:02:11,210
Y vamos a llegar a esto más 
adelante, pero esto encaja realmente

54
00:02:11,210 --> 00:02:14,750
bien con la programación, porque 
cuando tienes estructuras de datos 

55
00:02:14,750 --> 00:02:16,880
dentro del código, ésta es la 
forma en que tus estructuras

56
00:02:16,880 --> 00:02:17,900
de datos se ven, ¿verdad?

57
00:02:17,900 --> 00:02:19,590
Tienen alguna jerarquía en ellos.

58
00:02:19,590 --> 00:02:20,910
A menudo tienen diccionarios.

59
00:02:20,910 --> 00:02:22,830
Esto es realmente un diccionario,
si lo piensas,

60
00:02:22,830 --> 00:02:24,750
en Python.

61
00:02:24,750 --> 00:02:27,910
A menudo tienen arrays y
puedes expresar eso directamente

62
00:02:27,910 --> 00:02:30,820
dentro de Mongo por lo que no hay
discrepancia entre la forma en que 

63
00:02:30,820 --> 00:02:33,510
los datos se expresan dentro de 
las tablas y la forma en que se 

64
00:02:33,510 --> 00:02:35,800
expresan dentro del programa.

65
00:02:35,800 --> 00:02:37,850
Muy bien, vamos a hacer un breve 
cuestionario en base a lo que acabamos

66
00:02:37,850 --> 00:02:41,200
de aprender y, de nuevo, tratemos 
de identificar cuáles parecen documentos

67
00:02:41,200 --> 00:02:43,180
válidos en Mongo.

68
00:02:43,180 --> 00:02:44,280
OK, siguiente cuestionario.

69
00:02:44,280 --> 00:02:46,790
¿Cúales de los siguientes son
documentos JSON válidos?

70
00:02:46,790 --> 00:02:48,040
Puedes marcar todos los que correspondan.

71
00:02:48,040 --> 00:02:49,250
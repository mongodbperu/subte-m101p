1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:03,980
OK, entonces ¿dónde encaja
MongoDB en el mundo?

3
00:00:03,980 --> 00:00:06,840
Si piensas en bases de datos y
almacenamiento de datos en general,

4
00:00:06,840 --> 00:00:09,510
podrías pensar en estos dos
ejes, siendo uno de ellos

5
00:00:09,510 --> 00:00:11,880
la escalabilidad y el rendimiento
que es ofrecido por

6
00:00:11,880 --> 00:00:13,050
la base de datos--

7
00:00:13,050 --> 00:00:15,420
cuanto más, mejor-- y siendo el
otro la profundidad de

8
00:00:15,420 --> 00:00:17,580
la funcionalidad ofrecida
por la base de datos.

9
00:00:17,580 --> 00:00:21,330
Así que aquí, en esta esquina
a la izquierda, muy escalables pero

10
00:00:21,330 --> 00:00:24,030
sin mucha funcionalidad,
están los programas

11
00:00:24,030 --> 00:00:28,360
como Memcached y otros almacenes
clave / valor en general.

12
00:00:28,360 --> 00:00:32,630
Y estos programas realmente son
escalables y tienen alto rendimiento,

13
00:00:32,630 --> 00:00:35,590
pero casi no ofrecen
funcionalidad.

14
00:00:35,590 --> 00:00:38,950
Entonces en el otro extremo
de la escala, tienes 

15
00:00:38,950 --> 00:00:41,310
una funcionalidad muy rica
de los sistemas de gestión

16
00:00:41,310 --> 00:00:43,050
de bases de datos relacionales.

17
00:00:43,050 --> 00:00:46,980
Y éstos son los Oracles,
DB2s y SQL servers.

18
00:00:46,980 --> 00:00:52,110
Ahora la cuestión es ¿podemos
conseguir algo cercano a este nivel

19
00:00:52,110 --> 00:00:55,610
de funcionalidad pero sin
renunciar a toda la escalabilidad

20
00:00:55,610 --> 00:00:57,230
y rendimiento que 
teníamos por aquí?

21
00:00:57,230 --> 00:01:00,230
Porque los sistemas de gestión de
bases de datos relacionales no son

22
00:01:00,230 --> 00:01:02,710
conocidos por ser particularmente
escalables.

23
00:01:02,710 --> 00:01:04,540
Escalan verticalmente bastante bien.

24
00:01:04,540 --> 00:01:07,400
Puedes añadir más y más
hardware para conseguir un mayor

25
00:01:07,400 --> 00:01:08,940
rendimiento en
un nodo único.

26
00:01:08,940 --> 00:01:11,610
Pero si quieres escalar horizontalmente
y usar hardware estándar,

27
00:01:11,610 --> 00:01:13,120
no son particularmente 
buenos en eso.

28
00:01:13,120 --> 00:01:16,080
Así que MongoDB intenta
vivir por aquí.

29
00:01:16,080 --> 00:01:19,450
Y la idea es mantener
la mayoría de, si no toda la

30
00:01:19,450 --> 00:01:22,730
escalabilidad y el rendimiento
ofreciendo a la vez un montón de

31
00:01:22,730 --> 00:01:25,290
funcionalidad con la que trabajar,
pero no tanta como la que

32
00:01:25,290 --> 00:01:27,080
tendrías por aquí.

33
00:01:27,080 --> 00:01:30,120
Entonces, ¿qué es lo que falta aquí,
entre esto y esto?

34
00:01:30,120 --> 00:01:31,910
Bueno, hay unas cuantas cosas
diferentes que faltan.

35
00:01:31,910 --> 00:01:35,590
Una es que MongoDB
no soporta relaciones.

36
00:01:35,590 --> 00:01:39,130
Ya hablé del almacenamiento de 
documentos en MongoDB, y esos

37
00:01:39,130 --> 00:01:41,750
documentos, cada documento se 
almacena en una colección.

38
00:01:41,750 --> 00:01:46,420
Pero si quisieras hacer una relación
entre dos colecciones, 

39
00:01:46,420 --> 00:01:48,470
no puedes hacerlo dentro de MongoDB.

40
00:01:48,470 --> 00:01:50,860
Y la razón es que las relaciones son
uno de los elementos que escalan

41
00:01:50,860 --> 00:01:53,040
particularmente mal cuando
intentas escalar horizontalmente

42
00:01:53,040 --> 00:01:54,930
a múltiples nodos.

43
00:01:54,930 --> 00:01:57,820
Otra parte de funcionalidad
que falta en MongoDB son

44
00:01:57,820 --> 00:01:59,330
las transacciones.

45
00:01:59,330 --> 00:02:03,290
Ahora eso suena bastante mal, 
pero la verdad es que uno 

46
00:02:03,290 --> 00:02:06,915
a menudo no necesita transacciones 
en MongoDB en aplicaciones

47
00:02:06,915 --> 00:02:09,470
donde las necesitarías en 
un sistema relacional.

48
00:02:09,470 --> 00:02:12,300
Y la razón es que en
MongoDB los documentos son

49
00:02:12,300 --> 00:02:15,040
jerárquicos, como mostré
en el vídeo anterior.

50
00:02:15,040 --> 00:02:17,950
Y puedes acceder a esos
documentos de forma atómica.

51
00:02:17,950 --> 00:02:19,910
Por lo que algo que podría requerir
múltiples actualizaciones

52
00:02:19,910 --> 00:02:22,880
en un sistema relacional se puede
manejar dentro de una simple

53
00:02:22,880 --> 00:02:25,930
transacción atómica en
un único documento.

54
00:02:25,930 --> 00:02:28,810
Así que lo que MongoDB no soporta
son las transacciones entre

55
00:02:28,810 --> 00:02:30,090
múltiples documentos.

56
00:02:30,090 --> 00:02:32,320
Y la realidad es que la mayor 
parte del mundo no está en

57
00:02:32,320 --> 00:02:35,140
el mismo sistema, por lo que a menudo 
necesitas maneras de lidiar con sistemas

58
00:02:35,140 --> 00:02:38,160
que no están en el mismo 
espacio transaccional.

59
00:02:38,160 --> 00:02:42,100
OK, es hora de hacer un cuestionario.
Hablemos de MongoDB en comparación con

60
00:02:42,100 --> 00:02:43,710
las bases de datos relacionales.

61
00:02:43,710 --> 00:02:47,570
¿Qué características omite MongoDB
para mantener

62
00:02:47,570 --> 00:02:49,090
la escalabilidad horizontal?

63
00:02:49,090 --> 00:02:53,480
Relaciones, índices, índices
secundarios y transacciones

64
00:02:53,480 --> 00:02:54,820
entre múltiples colecciones.

65
00:02:54,820 --> 00:02:56,650
Así que ¿cuáles de éstas
omite MongoDB?

66
00:02:56,650 --> 00:02:57,910
1
00:00:00,000 --> 00:00:00,550

2
00:00:00,550 --> 00:00:04,350
Muy bien, ésta es la
ventana del terminal en Mac OS X.

3
00:00:04,350 --> 00:00:07,880
Y ya se ha instalado
Mongo aquí.

4
00:00:07,880 --> 00:00:10,430
Así que lo que vamos a
hacer es que vamos a

5
00:00:10,430 --> 00:00:13,080
iniciar el shell Mongo.

6
00:00:13,080 --> 00:00:16,200
Y lo primero que vamos
a hacer es, vamos a

7
00:00:16,200 --> 00:00:18,410
entrar en una base de datos determinada
donde vamos a poner nuestras

8
00:00:18,410 --> 00:00:19,480
colecciones.

9
00:00:19,480 --> 00:00:21,650
En este caso, vamos
a llamarla la base de datos

10
00:00:21,650 --> 00:00:23,460
test, use test.

11
00:00:23,460 --> 00:00:26,130
Y la forma en que Mongo funciona es que
si la base de datos no ha

12
00:00:26,130 --> 00:00:28,450
sido utilizada anteriormente, esto
automáticamente la crea.

13
00:00:28,450 --> 00:00:30,100
Y podrías poner colecciones
en ella.

14
00:00:30,100 --> 00:00:32,189
JavaScript Object Notation
es la forma de

15
00:00:32,189 --> 00:00:34,160
expresar los datos en Mongo.

16
00:00:34,160 --> 00:00:36,930
Y el shell utiliza JavaScript
por sí mismo.

17
00:00:36,930 --> 00:00:40,950
Así que imaginemos que hay
una colección llamada "things".

18
00:00:40,950 --> 00:00:44,160
Y en esta colección, deseamos
guardar algo.

19
00:00:44,160 --> 00:00:47,670
Entonces vamos a guardar un
pequeño documento en "things".

20
00:00:47,670 --> 00:00:51,140
Así que voy a poner el documento
con una clave "a" con el

21
00:00:51,140 --> 00:00:55,320
valor "1", clave "b", con el
valor "2", y una clave "c",

22
00:00:55,320 --> 00:00:57,080
con el valor "3".

23
00:00:57,080 --> 00:00:59,930
Lo que ves aquí es que he
especificado db, que es una

24
00:00:59,930 --> 00:01:01,790
palabra clave estándar en
el shell.

25
00:01:01,790 --> 00:01:04,890
"Things" como nuestra colección, "save"
como nuestro comando, abre

26
00:01:04,890 --> 00:01:09,400
paréntesis, y luego,
aquí, tenemos el JavaScript

27
00:01:09,400 --> 00:01:10,110
Object Notation.

28
00:01:10,110 --> 00:01:11,330
Este es un documento JSON.

29
00:01:11,330 --> 00:01:15,370
Así que tiene tres claves,
a, b, y c, con los

30
00:01:15,370 --> 00:01:16,810
valores 1, 2, y 3.

31
00:01:16,810 --> 00:01:20,480
Presiono "Enter", y entonces
se guarda en aquella

32
00:01:20,480 --> 00:01:21,640
colección.

33
00:01:21,640 --> 00:01:25,880
Si deseo encontrarlo, puedo
hacer un db.things.find,

34
00:01:25,880 --> 00:01:27,250
y ahí está.

35
00:01:27,250 --> 00:01:30,790
Podría añadir otro documento,
db.things.save.

36
00:01:30,790 --> 00:01:35,400
Y en este caso, voy
a poner a, b, c.

37
00:01:35,400 --> 00:01:37,940
Y luego voy a poner
otro campo, d.

38
00:01:37,940 --> 00:01:39,990
Y la razón por la que voy a hacer
esto es sólo para mostrar

39
00:01:39,990 --> 00:01:43,440
el punto que Mongo es
"schemaless", y que estos

40
00:01:43,440 --> 00:01:45,620
documentos pueden coexistir en
la misma colección.

41
00:01:45,620 --> 00:01:48,270
Esto es muy diferente que el
mundo relacional, donde

42
00:01:48,270 --> 00:01:50,430
no puedes tener dos diferentes
estructuras y dos diferentes

43
00:01:50,430 --> 00:01:51,810
filas en la misma tabla.

44
00:01:51,810 --> 00:01:53,240
Así que vamos a hacer esto.

45
00:01:53,240 --> 00:01:54,190
Entonces, ¿qué pasó allí?

46
00:01:54,190 --> 00:01:55,950
¿Ves el error de sintaxis?

47
00:01:55,950 --> 00:01:57,110
El error de sintaxis está aquí.

48
00:01:57,110 --> 00:01:58,480
Eso tiene que ser un dos puntos.

49
00:01:58,480 --> 00:01:59,840
Vamos a deshacer eso.

50
00:01:59,840 --> 00:02:00,870
Y ahí vamos.

51
00:02:00,870 --> 00:02:03,350
Ahora tenemos dos documentos
en la misma colección.

52
00:02:03,350 --> 00:02:05,900
Ahora puedes ver que han sido
asignados los ObjectId.

53
00:02:05,900 --> 00:02:07,960
Y vamos a hablar más
acerca de estos ObjectId luego.

54
00:02:07,960 --> 00:02:10,590
Pero son los indentificadores únicos
que la base de datos

55
00:02:10,590 --> 00:02:13,240
utiliza para mantener el seguimiento
de cada documento.

56
00:02:13,240 --> 00:02:16,550
Y siempre hay un índice en
estos indentificadores de objeto, por lo que

57
00:02:16,550 --> 00:02:19,610
si buscas por un documento
por el identificador de objeto,

58
00:02:19,610 --> 00:02:21,010
lo encontrará eficientemente.

59
00:02:21,010 --> 00:02:23,020
Ahora, vemos que tenemos estos
dos diferentes documentos, y

60
00:02:23,020 --> 00:02:24,560
tienen dos estructuras
diferentes.

61
00:02:24,560 --> 00:02:25,950
Si deseamos encontrar uno de estos

62
00:02:25,950 --> 00:02:27,525
documentos, podemos hacer eso.

63
00:02:27,525 --> 00:02:30,910
Y podemos especificar un documento
prototipo aquí.

64
00:02:30,910 --> 00:02:33,330
Vamos a decir find a:1.

65
00:02:33,330 --> 00:02:34,940
Encontrar los documentos
donde "a" es "1".

66
00:02:34,940 --> 00:02:38,470
Y si lo hacemos, puedes ver
que sólo encuentra este primer

67
00:02:38,470 --> 00:02:40,860
documento y deja afuera
el segundo documento.

68
00:02:40,860 --> 00:02:44,680
Bien, vamos a hacer un breve cuestionario
en base a lo que acabamos de aprender.

69
00:02:44,680 --> 00:02:47,460
Y luego te mostraré algunos
documentos más complejos.

70
00:02:47,460 --> 00:02:50,240
Para nuestro próximo cuestionario,
¿cuáles de las siguientes expresiones son

71
00:02:50,240 --> 00:02:51,990
documentos JSON válidos?

72
00:02:51,990 --> 00:02:53,240
Marca todos los que apliquen.

73
00:02:53,240 --> 00:02:54,090

1
00:00:00,000 --> 00:00:00,680

2
00:00:00,680 --> 00:00:03,810
Muy bien, ¿Qué es MongoDB?

3
00:00:03,810 --> 00:00:09,090
MongoDB es un almacén de datos
no relacional para documentos JSON.

4
00:00:09,090 --> 00:00:11,990
Y por no relacional, decimos
que no almacena sus datos

5
00:00:11,990 --> 00:00:15,900
en tablas, como lo hace una
base de datos relacional, sino almacena

6
00:00:15,900 --> 00:00:17,192
documentos JSON.

7
00:00:17,192 --> 00:00:19,840
Ahora todas las bases de datos, por supuesto,
en el mundo son representadas

8
00:00:19,840 --> 00:00:22,020
como grandes objectos tipo disco.

9
00:00:22,020 --> 00:00:24,680
Incluso si las guardamos en
discos de estado sólido hoy en día,

10
00:00:24,680 --> 00:00:27,640
siempre dibujamos una base de datos
de esta manera.

11
00:00:27,640 --> 00:00:29,840
Ahora, ¿qué es JSON?

12
00:00:29,840 --> 00:00:32,890
Bueno, JSON se entiende por
JavaScript Object Notation,

13
00:00:32,890 --> 00:00:34,560
y luce como esto.

14
00:00:34,560 --> 00:00:36,230
Hay un paréntesis de apertura,
y hay una

15
00:00:36,230 --> 00:00:37,810
clave, y luego un valor.

16
00:00:37,810 --> 00:00:40,840
Aquí hay un simple documento
JSON, y el documento JSON

17
00:00:40,840 --> 00:00:45,600
tiene la clave "name"
y el valor "Andrew".

18
00:00:45,600 --> 00:00:47,275
Puedes crear un documento JSON
más complejo.

19
00:00:47,275 --> 00:00:49,730
Te mostraré un documento JSON
un poco más complejo.

20
00:00:49,730 --> 00:00:52,420
He aquí un documento JSON
más complejo.

21
00:00:52,420 --> 00:00:55,860
Este documento JSON tiene tres
diferentes claves, a, b,

22
00:00:55,860 --> 00:00:58,365
y c, y estos son mis
intentos de comillas.

23
00:00:58,365 --> 00:01:02,660
Ves que hay dos puntos aquí,
y a tiene el valor 4, b tiene

24
00:01:02,660 --> 00:01:05,190
el valor 5, y c
tiene el valor 7.

25
00:01:05,190 --> 00:01:09,580
Y estos documentos JSON son
almacenados en MongoDB.

26
00:01:09,580 --> 00:01:11,310
Pero qué lo hace
no relacional--

27
00:01:11,310 --> 00:01:14,060
because you could sort of see
this similar to a table--

28
00:01:14,060 --> 00:01:16,630
is that they can have
some hierarchy.

29
00:01:16,630 --> 00:01:17,770
Permíteme mostrarte una manera--

30
00:01:17,770 --> 00:01:20,990
un documento JSON con alguna
jerarquía en el.

31
00:01:20,990 --> 00:01:23,640
Este es un documento JSON con
cierta jerarquía en él.

32
00:01:23,640 --> 00:01:28,160
Tiene una clave a, valor
6, clave b, valor 7.

33
00:01:28,160 --> 00:01:32,160
Y luego una clave llamada "fruit",
que es un arreglo que

34
00:01:32,160 --> 00:01:36,040
contiene los elementos apple,
pear y banana.

35
00:01:36,040 --> 00:01:36,980
Y eso es nuevo.

36
00:01:36,980 --> 00:01:38,760
Tú nunca podrías hacer esto
en una tabla relacional.

37
00:01:38,760 --> 00:01:41,470
So that's what MongoDB is
at its highest level.

38
00:01:41,470 --> 00:01:44,200
Es un almacén de documentos JSON.

39
00:01:44,200 --> 00:01:46,650
Y vas a ver que
es realmente útil al

40
00:01:46,650 --> 00:01:50,250
escribir programas, porque
es posible que hayas visto que

41
00:01:50,250 --> 00:01:54,450
este tipo de estructura de datos
se parece mucho más a lo que

42
00:01:54,450 --> 00:01:58,650
tienes en tus programas, que
cuando usas datos relacionales, donde

43
00:01:58,650 --> 00:02:00,760
los datos relacionales-- y
ustedes han visto

44
00:02:00,760 --> 00:02:02,330
esto antes, probablemente--

45
00:02:02,330 --> 00:02:06,470
son una serie de tablas donde
hay nombres de columnas en la

46
00:02:06,470 --> 00:02:08,750
fila superior y luego las
filas de datos.

47
00:02:08,750 --> 00:02:12,020
Esto no se ajusta muy bien
con lo que se hace normalmente

48
00:02:12,020 --> 00:02:13,620
dentro de los programas.

49
00:02:13,620 --> 00:02:16,830
Y el hecho fundamental que
MongoDB almacena documentos es

50
00:02:16,830 --> 00:02:20,330
lo que lo hace tan fácil de
usar al programar.

51
00:02:20,330 --> 00:02:23,440
Ahora hay otro aspecto de
MongoDB que es interesante,

52
00:02:23,440 --> 00:02:26,200
y es que también
es "schemaless".

53
00:02:26,200 --> 00:02:27,715
¿Qué significa esto?

54
00:02:27,715 --> 00:02:31,290
Bueno, "schemaless" significa que
dos documentos no necesitan

55
00:02:31,290 --> 00:02:32,250
tener el mismo esquema.

56
00:02:32,250 --> 00:02:35,420
Así que podrías almacenar algo en
una colección que tenga los

57
00:02:35,420 --> 00:02:37,780
valores a y b.

58
00:02:37,780 --> 00:02:41,310
Y puedes ver aquí que he dejado
de lado las comillas en a y b,

59
00:02:41,310 --> 00:02:43,250
ya que no siempre son
necesarios, aunque es

60
00:02:43,250 --> 00:02:44,570
más seguro tenerlos.

61
00:02:44,570 --> 00:02:46,120
Y podrías tener otro
documento en la misma

62
00:02:46,120 --> 00:02:52,021
colección que tenga los
valores a, b y c.

63
00:02:52,021 --> 00:02:53,750
De acuerdo, es hora de un
cuestionario.

64
00:02:53,750 --> 00:02:55,000
¿Cuáles de las siguientes
afirmaciones

65
00:02:55,000 --> 00:02:56,890
son verdaderas sobre MongoDB?

66
00:02:56,890 --> 00:02:58,670
MongoDB es orientado a documentos.

67
00:02:58,670 --> 00:03:00,660
MongoDB soporta relaciones.

68
00:03:00,660 --> 00:03:02,240
MongoDB es "schemaless".

69
00:03:02,240 --> 00:03:03,740
Y MongoDB soporta SQL.

70
00:03:03,740 --> 00:03:04,990

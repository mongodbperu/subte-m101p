1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:02,550
Ahora que sabemos cómo crear
índices únicos en las colecciones.

3
00:00:02,550 --> 00:00:05,900
La pregunta es, ¿qué sucede
si intentamos crear un índice

4
00:00:05,900 --> 00:00:09,900
único en una colección
y hay más de un

5
00:00:09,900 --> 00:00:12,960
documento que no tiene
la clave del índice?

6
00:00:12,960 --> 00:00:16,490
Por ejemplo, digamos que trato
de crear un índice único

7
00:00:16,490 --> 00:00:22,870
en estos tres documentos,
"a, b y c", "a, b" y "a, b".

8
00:00:22,870 --> 00:00:24,260
El primer documento
tiene a, b, c.

9
00:00:24,260 --> 00:00:25,380
El segundo documento
tiene a y b.

10
00:00:25,380 --> 00:00:27,480
Y el tercer documento
tiene a y b.

11
00:00:27,480 --> 00:00:31,320
Y deseo crear
un índice sólo en "c".

12
00:00:31,320 --> 00:00:34,200
Bueno, eso está bien
para el primer documento

13
00:00:34,200 --> 00:00:36,910
Pero para el segundo documento,
"c" no tiene un valor.

14
00:00:36,910 --> 00:00:40,950
Por ello la base de datos
considera que "c" es nulo.

15
00:00:40,950 --> 00:00:42,620
Y para el tercer documento,
la base de datos también

16
00:00:42,620 --> 00:00:45,040
considera que "c" es nulo.

17
00:00:45,040 --> 00:00:49,020
Pero "único" significa que
cada clave podría estar sólo

18
00:00:49,020 --> 00:00:50,420
una vez en el índice.

19
00:00:50,420 --> 00:00:53,110
Por lo que si hay varios
documentos donde la clave tiene

20
00:00:53,110 --> 00:00:56,210
valor nulo, no se puede
crear el índice.

21
00:00:56,210 --> 00:00:58,930
Y si no deseas eliminar los
duplicados, ¿qué hacer?

22
00:00:58,930 --> 00:01:02,660
Ahora, de nuevo, el problema es
que un índice único permite sólo

23
00:01:02,660 --> 00:01:04,970
que cada clave esté
en el índice una vez.

24
00:01:04,970 --> 00:01:08,380
Y si la clave no se encuentra
para múltiples documentos, todos

25
00:01:08,380 --> 00:01:09,860
ellos mapean a nulo.

26
00:01:09,860 --> 00:01:15,090
Por ello esto mapea a nulo, y
esto mapea a nulo para la clave.

27
00:01:15,090 --> 00:01:18,310
Y eso significa que ellos no
pueden coexistir en el índice.

28
00:01:18,310 --> 00:01:24,080
Y la respuesta a este problema
es índices dispersos.

29
00:01:24,080 --> 00:01:29,010
Lo que hacen los índices dispersos
es que ellos sólo indexan los documentos

30
00:01:29,010 --> 00:01:33,850
que tienen una clave establecida para
la clave que está siendo indexada.

31
00:01:33,850 --> 00:01:37,540
Así que este documento sería
indexado, pero estos dos

32
00:01:37,540 --> 00:01:40,170
documentos no
serían indexados.

33
00:01:40,170 --> 00:01:44,480
Por lo que tiene algunas interesantes
repercusiones, porque si estos

34
00:01:44,480 --> 00:01:48,700
dos documentos no son indexados,
entonces si usas el índice para

35
00:01:48,700 --> 00:01:51,680
encontrar la respuesta a una
consulta, estos documentos no

36
00:01:51,680 --> 00:01:52,740
serían considerados.

37
00:01:52,740 --> 00:01:55,340
Pero aparte de eso, funciona
tal como era de esperar.

38
00:01:55,340 --> 00:01:57,920
Déjame mostrarte un ejemplo
para explicarte cómo

39
00:01:57,920 --> 00:01:59,760
funcionan los índices dispersos.

40
00:01:59,760 --> 00:02:04,100
Aquí hay una pequeña
colección llamada "products".

41
00:02:04,100 --> 00:02:07,420
Y voy a hacer un "db.products.find"
en ella para poder verla.

42
00:02:07,420 --> 00:02:10,449
Y tal vez voy a
imprimirlos elegantemente.

43
00:02:10,449 --> 00:02:12,900
Y puedes ver aquí--

44
00:02:12,900 --> 00:02:15,740
los dos primeros se imprimen
elegantes, los otros dos son

45
00:02:15,740 --> 00:02:17,880
demasiado pequeños para ser
impresos como

46
00:02:17,880 --> 00:02:19,780
los dos primeros--

47
00:02:19,780 --> 00:02:21,590
el primero es un "polo shirt".

48
00:02:21,590 --> 00:02:23,090
Es una colección de productos.

49
00:02:23,090 --> 00:02:24,450
Tiene un "size" "medium".

50
00:02:24,450 --> 00:02:25,800
Y el segundo es "jeans".

51
00:02:25,800 --> 00:02:27,640
Tiene un "size" "32x32".

52
00:02:27,640 --> 00:02:31,150
Y el tercero y cuarto
documento, uno de ellos es un

53
00:02:31,150 --> 00:02:34,110
"DVI-to-VGA cable" y
no tiene "size".

54
00:02:34,110 --> 00:02:39,730
El otro es un "iPhone cradle"
que tampoco tiene "size".

55
00:02:39,730 --> 00:02:46,270
Ahora, si deseamos crear un índice
en él, digamos, en "size" y

56
00:02:46,270 --> 00:02:48,510
deseamos hacer que sea
un índice disperso--

57
00:02:48,510 --> 00:02:50,700
bueno, primeramente, no
podríamos crear un índice

58
00:02:50,700 --> 00:02:52,710
que fuese único.

59
00:02:52,710 --> 00:02:54,340
Y te voy a mostrar eso.

60
00:02:54,340 --> 00:02:58,530
Por ello hacemos
"db.products.ensureIndex"

61
00:02:58,530 --> 00:03:03,970
en "size", donde es único.

62
00:03:03,970 --> 00:03:05,910
Y puedes ver que
no podemos hacerlo,

63
00:03:05,910 --> 00:03:06,850
hay una clave duplicada.

64
00:03:06,850 --> 00:03:08,670
La clave duplicada es "null".

65
00:03:08,670 --> 00:03:09,040
¿De acuerdo?

66
00:03:09,040 --> 00:03:13,170
Así que si quisiéramos en vez
de crear el índice, permitir

67
00:03:13,170 --> 00:03:16,030
que sea disperso,
entonces podemos crearlo.

68
00:03:16,030 --> 00:03:19,070
Ahora, este es un ejemplo un
poco sencillo ya que no está

69
00:03:19,070 --> 00:03:23,610
claro por qué querría un
índice único en "size",

70
00:03:23,610 --> 00:03:25,320
ya que obviamente va a haber
más de un elemento con un

71
00:03:25,320 --> 00:03:28,180
"size", pero no tiene
que ser único para

72
00:03:28,180 --> 00:03:29,440
crear un índice disperso.

73
00:03:29,440 --> 00:03:31,320
Así que, de hecho--

74
00:03:31,320 --> 00:03:33,240
bueno, voy a crearlo de esta manera.

75
00:03:33,240 --> 00:03:35,520
Y ahora puedes ver que hay
un índice en él.

76
00:03:35,520 --> 00:03:40,880
Y puedo echar un vistazo
y ver lo que está ahí.

77
00:03:40,880 --> 00:03:42,460
Funciona tal
como esperaba.

78
00:03:42,460 --> 00:03:44,560
En realidad, no cambia
la mayoría de las consultas.

79
00:03:44,560 --> 00:03:50,920
Si hago un "find" y busco por
"size" con valor "medium", encuentro

80
00:03:50,920 --> 00:03:53,620
lo que esperaba, que es el
"polo shirt", "size" "medium".

81
00:03:53,620 --> 00:03:54,490
No es gran cosa.

82
00:03:54,490 --> 00:03:58,320
Pero si utilizo este nuevo índice
para ordenar, por ejemplo, no va a

83
00:03:58,320 --> 00:04:00,970
hacer exactamente lo
que se podría esperar.

84
00:04:00,970 --> 00:04:06,540
Así que digamos que hago
"db.products.find", vamos a

85
00:04:06,540 --> 00:04:11,030
encontrar todos los documentos y
ordenarlos por "size".

86
00:04:11,030 --> 00:04:11,880
Muy bien.

87
00:04:11,880 --> 00:04:15,165
Eso va a devolver
dos documentos.

88
00:04:15,165 --> 00:04:16,459
Eh... eso es interesante.

89
00:04:16,459 --> 00:04:19,149
Hay cuatro documentos en la
colección, pero si los ordeno

90
00:04:19,149 --> 00:04:22,190
por "size", sólo
obtengo dos documentos.

91
00:04:22,190 --> 00:04:23,820
OK, eso es extraño.

92
00:04:23,820 --> 00:04:24,750
¿Qué está pasando?

93
00:04:24,750 --> 00:04:28,360
Lo que pasa es que si este
índice es disperso y no hay

94
00:04:28,360 --> 00:04:31,750
registros para las dos
piezas de electrónica que

95
00:04:31,750 --> 00:04:34,910
están en la colección "products"
que no tienen un "size",

96
00:04:34,910 --> 00:04:38,840
no usarán este índice
que creamos en "size",

97
00:04:38,840 --> 00:04:42,220
ordena, no hay ninguna entrada
para los documentos que

98
00:04:42,220 --> 00:04:43,280
no tienen la clave "size".

99
00:04:43,280 --> 00:04:45,540
Por lo que son simplemente
excluidos del resultado final.

100
00:04:45,540 --> 00:04:46,940
Básicamente
están filtrados.

101
00:04:46,940 --> 00:04:48,370
Eso podría ser un
poco inesperado.

102
00:04:48,370 --> 00:04:51,260
Así que de nuevo, si sólo hacemos
una búsqueda sencilla sin ordenar,

103
00:04:51,260 --> 00:04:53,830
obtenemos cuatro documentos.

104
00:04:53,830 --> 00:04:57,250
Pero si ordenamos, obtenemos dos.

105
00:04:57,250 --> 00:04:58,660
OK.

106
00:04:58,660 --> 00:05:02,180
Muy extraño y la razón es que,
este es un resultado de la

107
00:05:02,180 --> 00:05:03,970
existencia de un índice
disperso en "size".

108
00:05:03,970 --> 00:05:05,230
Esto es un artefacto de eso.

109
00:05:05,230 --> 00:05:07,220
Y si eliminamos el índice--

110
00:05:07,220 --> 00:05:10,460
Voy a eliminar el
índice en "size"--

111
00:05:10,460 --> 00:05:13,860
y luego voy a volver a ejecutar
esta misma consulta con un orden--

112
00:05:13,860 --> 00:05:16,030
que ejecuté, ahora será lento
porque no puedo usar un índice

113
00:05:16,030 --> 00:05:17,542
para ordenar, pero hay
sólo dos documentos en esta

114
00:05:17,542 --> 00:05:19,200
colección, por lo
que no importa--

115
00:05:19,200 --> 00:05:21,920
entonces consigo cuatro documentos.

116
00:05:21,920 --> 00:05:23,570
Así que tienes que ser
un poco cuidadoso con

117
00:05:23,570 --> 00:05:24,740
estos índices dispersos.

118
00:05:24,740 --> 00:05:27,740
Ellos permitirán crear un
índice único, aún cuando

119
00:05:27,740 --> 00:05:29,560
múltiples documentos en la
colección no tienen la

120
00:05:29,560 --> 00:05:33,430
clave, pero ellos cambian la
naturaleza de algunas de las consultas,

121
00:05:33,430 --> 00:05:36,990
especialmente ordenando consultas y
también algunos elementos cuando estás

122
00:05:36,990 --> 00:05:37,500
filtrando.

123
00:05:37,500 --> 00:05:39,290
Puedes también ver
distintos resultados.

124
00:05:39,290 --> 00:05:41,290
Así que hay que ser un poco
cuidadoso y darse cuenta si el

125
00:05:41,290 --> 00:05:44,900
índice es usado y no va a
alcanzar los elementos que

126
00:05:44,900 --> 00:05:46,100
no están en el índice.

127
00:05:46,100 --> 00:05:48,490
Y vamos a mostrarte luego
cómo solicitar que este

128
00:05:48,490 --> 00:05:50,240
índice en paticular no sea usado.

129
00:05:50,240 --> 00:05:53,860
Así que hay formas de evitar
esto, incluso si deseas

130
00:05:53,860 --> 00:05:56,900
tener el índice en la
colección en general.

131
00:05:56,900 --> 00:05:57,200
Muy bien.

132
00:05:57,200 --> 00:05:59,390
Ahora es momento para un cuestionario.

133
00:05:59,390 --> 00:06:01,480
Supongamos que tenemos los siguientes
documentos en una colección

134
00:06:01,480 --> 00:06:04,250
llamada "people" con los
siguientes documentos.

135
00:06:04,250 --> 00:06:06,230
Tengo tres documentos
en la colección.

136
00:06:06,230 --> 00:06:09,880
El primero es llamado "Andrew",
tiene un "title" con valor "Jester".

137
00:06:09,880 --> 00:06:11,620
Y luego el segundo es llamado
"Dwight", y tiene un

138
00:06:11,620 --> 00:06:13,070
"title" con valor "CEO".

139
00:06:13,070 --> 00:06:16,490
Y el tercero es llamado "John",
y no tiene "title".

140
00:06:16,490 --> 00:06:20,210
Y luego decidí crear
un índice en "title".

141
00:06:20,210 --> 00:06:22,730
Y decidí que sea disperso,
y que no haya

142
00:06:22,730 --> 00:06:27,100
entradas en el índice para
elementos donde "title" no exista.

143
00:06:27,100 --> 00:06:31,050
Si realizas la siguiente consulta,
"db.people.find", con

144
00:06:31,050 --> 00:06:34,910
"title" con valor nulo, ¿qué crees
que retorne la base de datos?

145
00:06:34,910 --> 00:06:37,220
¿Qué crees que
retorne MongoDB?

146
00:06:37,220 --> 00:06:39,210
Y las cuatro opciones son--

147
00:06:39,210 --> 00:06:41,370
Ningún documento porque
la consulta usa el índice y

148
00:06:41,370 --> 00:06:44,030
no hay documentos con "title"
con valor nulo en el índice.

149
00:06:44,030 --> 00:06:46,490
Ningún documento porque consultando
por "title" con valor nulo sólo encuentra

150
00:06:46,490 --> 00:06:49,010
documentos que tengan
valor nulo explícitamente,

151
00:06:49,010 --> 00:06:50,530
independientemente del índice.

152
00:06:50,530 --> 00:06:54,070
Y sabes que puedes establecer "title"
con valor nulo a un documento.

153
00:06:54,070 --> 00:06:57,070
O el documento para "John",
porque la consulta no usará

154
00:06:57,070 --> 00:06:59,790
el índice, así sólo
obtendrás a "John" porque

155
00:06:59,790 --> 00:07:01,410
le falta un "title".

156
00:07:01,410 --> 00:07:04,500
O todos los documentos en la
colección, porque "title" "null"

157
00:07:04,500 --> 00:07:06,310
coincide con todos los documentos.

158
00:07:06,310 --> 00:07:08,620
O el documento para "John",
porque el comando "ensureIndex"

159
00:07:08,620 --> 00:07:13,170
de aquí arriba no tendrá
éxito en este caso.

160
00:07:13,170 --> 00:07:15,390
Por favor marca la
respuesta correcta.

161
00:07:15,390 --> 00:07:16,640

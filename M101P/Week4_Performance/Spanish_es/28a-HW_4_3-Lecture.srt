1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:02,680
Bien, en esta tarea
vas a hacer

3
00:00:02,680 --> 00:00:04,310
que el blog sea más rápido.

4
00:00:04,310 --> 00:00:07,230
Te hemos dado el código para
el blog en "blog.py" y

5
00:00:07,230 --> 00:00:10,860
"user.py" y las vistas, y también
te hemos dado un conjunto

6
00:00:10,860 --> 00:00:12,940
de datos de 1000 posts.

7
00:00:12,940 --> 00:00:14,700
Posts muy patrióticos si
eres americano.

8
00:00:14,700 --> 00:00:18,020
Tenemos aquí el discurso de Gettysburg,
también tenemos la constitución

9
00:00:18,020 --> 00:00:20,740
de los Estados Unidos, la declaración
de independencia 

10
00:00:20,740 --> 00:00:22,660
y la declaración de derechos.

11
00:00:22,660 --> 00:00:25,680
Y todos estos posts tienen 50
comentarios y tienen

12
00:00:25,680 --> 00:00:27,800
un montón de etiquetas.

13
00:00:27,800 --> 00:00:29,640
Ahora, hay tres páginas
que necesitas hacer que sean más rápidas.

14
00:00:29,640 --> 00:00:31,700
Tienes que hacer que la página inicial
del blog sea rápida, la cual recupera los

15
00:00:31,700 --> 00:00:35,580
10 posts del blog más
recientes y los imprime.

16
00:00:35,580 --> 00:00:38,170
También necesitas hacer que
esta página sea rápida.

17
00:00:38,170 --> 00:00:41,470
Ésta es una página que buscará
los 10 posts más

18
00:00:41,470 --> 00:00:43,330
recientes para una etiqueta dada.

19
00:00:43,330 --> 00:00:46,510
Simplemente hice clic en "tempo", por lo que ahora
todos estos posts van a

20
00:00:46,510 --> 00:00:47,850
contener "tempo".

21
00:00:47,850 --> 00:00:50,820
Si hago clic en "refund", entonces
todos estos posts

22
00:00:50,820 --> 00:00:52,690
contendrán "refund".

23
00:00:52,690 --> 00:00:55,370
Y la última página que tienes que hacer
que sea rápida es la página de un post

24
00:00:55,370 --> 00:00:58,840
del blog, que se referencia
con un enlace permanente.

25
00:00:58,840 --> 00:01:00,940
Te enseñaré el enlace permanente
justo aquí.

26
00:01:00,940 --> 00:01:04,140
Y luego, nos devuelve el post,
un único post junto con

27
00:01:04,140 --> 00:01:06,490
los comentarios del mismo y
hay 50 comentarios.

28
00:01:06,490 --> 00:01:09,520
Necesitas hacer que esta
página también sea rápida.

29
00:01:09,520 --> 00:01:12,190
Ahora, no necesitas ejecutar
el proyecto del blog para esta

30
00:01:12,190 --> 00:01:14,890
tarea, pero podrías
querer hacerlo 

31
00:01:14,890 --> 00:01:16,290
si quisieras ver los datos.

32
00:01:16,290 --> 00:01:18,520
Pero otro motivo por el cual quieres
echar un vistazo es

33
00:01:18,520 --> 00:01:21,070
que las consultas con las que vamos
a comprobar esto son las

34
00:01:21,070 --> 00:01:24,740
que están dentro del código
que generó estas páginas.

35
00:01:24,740 --> 00:01:27,600
Y no necesitas reescribirlas
desde cero, simplemente puedes

36
00:01:27,600 --> 00:01:32,140
echar un vistazo al fichero "blog.py" y
ver qué hacen esas consultas.

37
00:01:32,140 --> 00:01:35,850
Ahora, la idea es que estas
consultas deberían escanear sólo

38
00:01:35,850 --> 00:01:37,630
tantos documentos como devuelvan.

39
00:01:37,630 --> 00:01:40,630
Por lo que si devuelve 10 documentos
debería escanear 10 documentos.

40
00:01:40,630 --> 00:01:41,760
Si devuelve
un documento,

41
00:01:41,760 --> 00:01:43,310
debería escanear un documento.

42
00:01:43,310 --> 00:01:44,580
Y nuestro programa de validación.

43
00:01:44,580 --> 00:01:48,290
Lo que hace es ejecutar estas
consultas, obtiene la salida

44
00:01:48,290 --> 00:01:50,840
del "explain" y se asegura que
has añadido los índices

45
00:01:50,840 --> 00:01:53,840
correctos para que esto sea rápido.

46
00:01:53,840 --> 00:01:55,650
Y ésa es la tarea
para esta semana.

47
00:01:55,650 --> 00:01:56,900
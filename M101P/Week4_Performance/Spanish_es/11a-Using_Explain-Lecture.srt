1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:03,470
Ahora ya hemos visto cómo
crear un índice y entendemos

3
00:00:03,470 --> 00:00:06,910
básicamente cuándo
se usuará un índice.

4
00:00:06,910 --> 00:00:10,160
Pero hay un comando en
la base de datos, "explain", que

5
00:00:10,160 --> 00:00:12,690
te dirá exactamente qué
índices se usaron para tus

6
00:00:12,690 --> 00:00:15,290
consultas y cómo
fueron usados.

7
00:00:15,290 --> 00:00:16,390
Y en esta lección,
vamos a ver

8
00:00:16,390 --> 00:00:18,550
el comando "explain".

9
00:00:18,550 --> 00:00:21,320
He creado una colección llamada
"foo" dentro de la base de datos

10
00:00:21,320 --> 00:00:23,890
"test" que tiene 10000
documentos.

11
00:00:23,890 --> 00:00:25,220
Y los documentos son
bastante simples.

12
00:00:25,220 --> 00:00:26,090
Tienen una estructura.

13
00:00:26,090 --> 00:00:27,830
Tiene una clave "a", "b" y "c".

14
00:00:27,830 --> 00:00:30,410
Y puedes ver aquí que "a"
es 0, "b" es 0 y "c" es 0.

15
00:00:30,410 --> 00:00:34,520
Y luego incremento 1,
1, 1, 2, 2, 2, etcétera.

16
00:00:34,520 --> 00:00:37,900
Creo un índice sobre esta
colección, y el índice es un

17
00:00:37,900 --> 00:00:40,610
índice compuesto sobre "a", "b" y "c".

18
00:00:40,610 --> 00:00:42,330
Y permíteme que me desplace
para enseñarte

19
00:00:42,330 --> 00:00:44,580
ese comando "ensureIndex".

20
00:00:44,580 --> 00:00:47,250
Así que éste es el índice que
creé en la colección donde

21
00:00:47,250 --> 00:00:50,440
"a", "b" y "c"
están en el índice.

22
00:00:50,440 --> 00:00:53,790
Y ahora voy a hacer una consulta
donde esperaría

23
00:00:53,790 --> 00:00:57,920
que la base de datos no pudiera usar
un índice, como por ejemplo,

24
00:00:57,920 --> 00:01:01,650
una consulta donde "b" fuera
10 o algo así.

25
00:01:01,650 --> 00:01:03,630
Así que hagamos eso.

26
00:01:03,630 --> 00:01:04,930
Hay uno.

27
00:01:04,930 --> 00:01:06,730
Lo haremos para "c" igual a 1.

28
00:01:06,730 --> 00:01:09,200
Ésa es una consulta donde
esperaríamos que la base de datos no pudiera

29
00:01:09,200 --> 00:01:10,830
usar un índice.

30
00:01:10,830 --> 00:01:12,090
Y obtenemos el resultado.

31
00:01:12,090 --> 00:01:15,680
Hay un documento que
cumple ese criterio.

32
00:01:15,680 --> 00:01:18,040
Ahora vamos a llamar exactamente a la
misma consulta, pero vamos a

33
00:01:18,040 --> 00:01:19,720
concatenar un "explain" al
final, y vamos a 

34
00:01:19,720 --> 00:01:21,380
echar un vistazo al resultado.

35
00:01:21,380 --> 00:01:23,520
Así que añadí "explain" al final.

36
00:01:23,520 --> 00:01:26,120
Y ahora, en lugar de devolver
el documento en sí, 

37
00:01:26,120 --> 00:01:29,610
obtenemos una explicación sobre
qué hizo la base de datos

38
00:01:29,610 --> 00:01:30,770
para realizar la consulta.

39
00:01:30,770 --> 00:01:34,880
La primera cosa a notar aquí
es que dice "cursor: "

40
00:01:34,880 --> 00:01:36,390
"BasicCursor".

41
00:01:36,390 --> 00:01:39,950
"BasicCursor" significa que no
se usó un índice para

42
00:01:39,950 --> 00:01:41,350
ejecutar esta consulta.

43
00:01:41,350 --> 00:01:44,890
Eso no nos sorprende,
porque sabemos que pasamos

44
00:01:44,890 --> 00:01:47,790
sólo "c", y sabemos que el
índice está sobre "a", "b" y "c".

45
00:01:47,790 --> 00:01:49,965
Por lo que sabemos que el índice
no podía usarse, así que

46
00:01:49,965 --> 00:01:52,240
no nos sorprende
averiguar que

47
00:01:52,240 --> 00:01:53,520
no puede usar el índice.

48
00:01:53,520 --> 00:01:56,360
Ahora voy a analizar un montón
de estos campos, pero

49
00:01:56,360 --> 00:01:59,380
sólo quiero que prestes
atención justo ahora a este

50
00:01:59,380 --> 00:02:02,690
campo "millis", que es el
número de milisegundos que

51
00:02:02,690 --> 00:02:05,130
se requirieron para ejecutar
la consulta.

52
00:02:05,130 --> 00:02:07,700
Y como sabes, hay
1000 milisegundos en un

53
00:02:07,700 --> 00:02:12,200
segundo, por lo tardó 3/1000
de un segundo 

54
00:02:12,200 --> 00:02:13,603
en ejecutar esta consulta.

55
00:02:13,603 --> 00:02:14,470
¿De acuerdo?

56
00:02:14,470 --> 00:02:16,030
Eso es bastante lento
para una base de datos.

57
00:02:16,030 --> 00:02:18,300
Si quieres hacer miles y
miles de operaciones por

58
00:02:18,300 --> 00:02:20,300
segundo, eso va
a ser bastante lento.

59
00:02:20,300 --> 00:02:21,880
Ahora hagamos otra consulta.

60
00:02:21,880 --> 00:02:26,910
Pero esta vez hagamos que "a"
sea 1, o digamos que "a" es 500.

61
00:02:26,910 --> 00:02:28,730
No volveré a recuperar el
documento porque ya sabemos

62
00:02:28,730 --> 00:02:30,320
que hay uno ahí.

63
00:02:30,320 --> 00:02:32,840
Simplemente echaré un vistazo a
la salida de "explain".

64
00:02:32,840 --> 00:02:36,020
La salida de "explain" es mucho
más extensa esta vez.

65
00:02:36,020 --> 00:02:38,380
La primera cosa a notar es
que no dice que

66
00:02:38,380 --> 00:02:39,650
sea un "BasicCursor" aquí arriba.

67
00:02:39,650 --> 00:02:44,130
Dice que hay un
"BtreeCursor", "a_1_b_1_c_1",

68
00:02:44,130 --> 00:02:46,460
usado para realizar esta consulta.

69
00:02:46,460 --> 00:02:49,340
Ahora ése es el nombre del
índice, el índice

70
00:02:49,340 --> 00:02:52,690
compuesto, sobre "a", "b" y "c".

71
00:02:52,690 --> 00:02:55,890
Así que lo primero que notas aquí
es que la base de datos está

72
00:02:55,890 --> 00:02:57,670
usando el índice, lo cual
es excelente.

73
00:02:57,670 --> 00:02:59,460
Eso es exactamente lo que queríamos.

74
00:02:59,460 --> 00:03:02,230
Lo segundo a fijarse es que
"isMultiKey" es "false".

75
00:03:02,230 --> 00:03:04,820
Esto indica si el índice es un
índice multiclave o no.

76
00:03:04,820 --> 00:03:08,220
Ninguno de los valores en "a", "b"
y "c" son arrays, por lo que no es

77
00:03:08,220 --> 00:03:10,040
un índice multiclave.

78
00:03:10,040 --> 00:03:13,730
"n: 1" es el número de documentos
que se devuelven.

79
00:03:13,730 --> 00:03:16,040
Ésta es una consulta simple
donde "a" era 500.

80
00:03:16,040 --> 00:03:18,660
Hay 10000 documentos en
esta colección, y hay

81
00:03:18,660 --> 00:03:20,550
sólo uno de ellos donde
"a" es 500, por lo que

82
00:03:20,550 --> 00:03:23,260
devolvió ese documento.

83
00:03:23,260 --> 00:03:26,530
"nscannedObjects" es el número de
documentos que fueron escaneados

84
00:03:26,530 --> 00:03:29,960
para responder a la consulta,
que fue uno.

85
00:03:29,960 --> 00:03:32,290
El índice examinó a fondo,
encontró el

86
00:03:32,290 --> 00:03:34,280
documento y lo devolvió.

87
00:03:34,280 --> 00:03:38,650
"nscanned" es el número de entradas
del índice o documentos,

88
00:03:38,650 --> 00:03:41,810
creo, que fueron examinados,
el cual, de nuevo, es 1.

89
00:03:41,810 --> 00:03:44,840
Y no analizaremos algunos
de éstos, sólo quiero 

90
00:03:44,840 --> 00:03:46,160
destacar unos cuantos de ellos.

91
00:03:46,160 --> 00:03:49,230
Y uno es este
elemento

92
00:03:49,230 --> 00:03:50,950
"indexBounds" justo aquí.

93
00:03:50,950 --> 00:03:53,640
Es un elemento que quiero
destacar, el cual muestra

94
00:03:53,640 --> 00:03:56,060
los límites que se usaron para
buscar en el índice.

95
00:03:56,060 --> 00:03:59,910
Y no es sorprendente que
buscáramos 500, 500, el

96
00:03:59,910 --> 00:04:03,340
límite inferior y superior de 500 para
"a" para realizar esa consulta,

97
00:04:03,340 --> 00:04:05,890
y entonces el resto de ellos se
establecen a los elementos "min" y "max".

98
00:04:05,890 --> 00:04:07,520
No demasiado sorprendente.

99
00:04:07,520 --> 00:04:10,080
Este último campo que quiero
enseñarte justo ahora es este

100
00:04:10,080 --> 00:04:11,620
campo "indexOnly".

101
00:04:11,620 --> 00:04:15,950
Y este campo "indexOnly" nos 
dice si la consulta

102
00:04:15,950 --> 00:04:18,910
se puede satisfacer o no
sólo con el índice.

103
00:04:18,910 --> 00:04:20,769
Éste es un concepto del que aún
no me hemos hablado.

104
00:04:20,769 --> 00:04:22,340
Se llama índice cubierto.

105
00:04:22,340 --> 00:04:27,090
Si todo lo que estás pidiendo se
puede satisfacer con sólo

106
00:04:27,090 --> 00:04:30,920
el índice, entonces el campo
"indexOnly" será "true", y

107
00:04:30,920 --> 00:04:33,420
y el documento en sí no 
tendría que ser recuperado.

108
00:04:33,420 --> 00:04:37,310
Veamos si podemos modificar esta
consulta para hacer que sea "true".

109
00:04:37,310 --> 00:04:40,160
Voy a volver
a esta consulta donde

110
00:04:40,160 --> 00:04:42,480
busco "a" 500.

111
00:04:42,480 --> 00:04:46,240
Y esta vez lo que voy
a hacer es pedir

112
00:04:46,240 --> 00:04:49,010
simplemente que "a" sea 500.

113
00:04:49,010 --> 00:04:52,540
Y voy a pedir sólo
el campo "a" y el campo "b",

114
00:04:52,540 --> 00:04:55,260
y voy a suprimir
el campo "_id"

115
00:04:55,260 --> 00:04:56,420
y no lo voy a pedir.

116
00:04:56,420 --> 00:04:57,520
Echemos un vistazo a esa consulta.

117
00:04:57,520 --> 00:04:58,460
Vamos a ejecutarla.

118
00:04:58,460 --> 00:04:59,600
Vemos que hay un elemento.

119
00:04:59,600 --> 00:05:01,180
Ésta es una consulta que debería
ser completamente

120
00:05:01,180 --> 00:05:03,370
satisfecha por el índice.

121
00:05:03,370 --> 00:05:08,280
Llamemos a "explain" y 
veamos qué obtenemos.

122
00:05:08,280 --> 00:05:13,300
Y aquí puedes ver que ahora
"indexOnly" es "true",

123
00:05:13,300 --> 00:05:18,610
porque no necesitamos acceder
a la colección real para

124
00:05:18,610 --> 00:05:19,530
responder esta consulta.

125
00:05:19,530 --> 00:05:22,810
Toda la información que
necesitamos está en la consulta.

126
00:05:22,810 --> 00:05:23,600
Bien.

127
00:05:23,600 --> 00:05:25,780
Echemos un vistazo a una variante
ligeramente diferente.

128
00:05:25,780 --> 00:05:29,600
Veamos una consulta donde
MongoDB no puede usar el índice

129
00:05:29,600 --> 00:05:32,570
para encontrar los documentos pero
puede usar el índice para

130
00:05:32,570 --> 00:05:34,400
ordenar los documentos.

131
00:05:34,400 --> 00:05:38,040
Así en esta consulta tenemos una
cláusula "and", y estamos buscando

132
00:05:38,040 --> 00:05:40,470
valores de "c" que sean mayores
que 250 y menores

133
00:05:40,470 --> 00:05:42,420
o iguales que 500.

134
00:05:42,420 --> 00:05:44,810
Y vamos a ordenar por "a".

135
00:05:44,810 --> 00:05:48,600
Ahora que sabemos que el índice está sobre "a"
"b" y "c", no debería ser capaz

136
00:05:48,600 --> 00:05:51,250
de usarlo para encontrar los
documentos, pero debería ser

137
00:05:51,250 --> 00:05:53,200
capaz de usar el índice
para ordenarlos.

138
00:05:53,200 --> 00:05:54,910
Así que veamos qué ocurre
cuando ejecutas esa

139
00:05:54,910 --> 00:05:57,050
consulta y lanzamos un "explain".

140
00:05:57,050 --> 00:05:57,750
Bien.

141
00:05:57,750 --> 00:06:01,580
Así que lo que encontramos es que se
devolvieron 250 documentos,

142
00:06:01,580 --> 00:06:03,600
lo cual es lo que esperábamos.

143
00:06:03,600 --> 00:06:07,120
Y dice que usa un
índice "BtreeCursor", pero no

144
00:06:07,120 --> 00:06:09,790
lo usó para la parte
de la búsqueda real para

145
00:06:09,790 --> 00:06:10,960
seleccionar el criterio.

146
00:06:10,960 --> 00:06:12,970
En lugar de eso lo usó
para ordenar.

147
00:06:12,970 --> 00:06:16,370
Y la forma en que puedes decir eso es que
el número de escaneados --

148
00:06:16,370 --> 00:06:18,030
esto es índice o documentos --

149
00:06:18,030 --> 00:06:19,805
fue 9541.

150
00:06:19,805 --> 00:06:22,710
El número de documentos
escaneados fue 250.

151
00:06:22,710 --> 00:06:25,740
Por lo que en este caso, lo que
hizo MongoDB --

152
00:06:25,740 --> 00:06:28,170
y no soy optimista sobre esto,
pero estoy bastante seguro --

153
00:06:28,170 --> 00:06:29,950
fue que escaneó el
propio índice.

154
00:06:29,950 --> 00:06:34,340
Sólo tuvo que examinar 9541
entradas en el índice antes de que sintiera

155
00:06:34,340 --> 00:06:36,840
que había obtenido exhaustivamente
todos los documentos

156
00:06:36,840 --> 00:06:40,110
que estaban entre
"c" 250 y "c" 500.

157
00:06:40,110 --> 00:06:43,550
Y por eso en realidad entró en
esos 250 documentos, y

158
00:06:43,550 --> 00:06:46,250
éste justo aquí es el número
de documentos que revisó, y

159
00:06:46,250 --> 00:06:47,670
luego nos dio los resultados.

160
00:06:47,670 --> 00:06:49,520
Cambiemos esto un poco
para aclarar más

161
00:06:49,520 --> 00:06:51,500
qué está ocurriendo
aquí exactamente.

162
00:06:51,500 --> 00:06:56,330
Voy a eliminar este índice sobre
"a", "b" y "c", y voy a

163
00:06:56,330 --> 00:07:00,080
añadir un nuevo índice sobre sólo "a" y "b".

164
00:07:00,080 --> 00:07:03,110
Ahora somos absolutamente optimistas
sobre que no puede usar los valores

165
00:07:03,110 --> 00:07:06,360
del índice para la búsqueda, incluso
si escanea todos ellos.

166
00:07:06,360 --> 00:07:08,220
Ahora vamos a 
hacer el mismo "find".

167
00:07:08,220 --> 00:07:11,330
Recuerda, estamos buscando sólo por "c"
mayor que 250 o menor que

168
00:07:11,330 --> 00:07:14,810
500, y tenemos un índice
sobre sólo "a" y "b".

169
00:07:14,810 --> 00:07:17,530
Pero estamos pidiendo que ordene por "a",
por lo que debería ser capaz de usar

170
00:07:17,530 --> 00:07:19,420
el índice para la parte del ordenamiento.

171
00:07:19,420 --> 00:07:21,640
Veamos qué ocurre.

172
00:07:21,640 --> 00:07:24,260
En este caso, el resultado
es más claro.

173
00:07:24,260 --> 00:07:27,030
Puedes ver que, de nuevo,
devolvió 250 documentos.

174
00:07:27,030 --> 00:07:30,980
Pero puedes ver que el número de
documentos o elementos del índice escaneados es

175
00:07:30,980 --> 00:07:34,680
10000, y el número de
documentos escaneados en 10000.

176
00:07:34,680 --> 00:07:37,220
Así que en este caso, no podría
usar todo el índice, no podría

177
00:07:37,220 --> 00:07:39,940
incluso escanear el índice para averiguar
cuál sería la respuesta.

178
00:07:39,940 --> 00:07:42,430
Por lo que fue directo a la
colección, los escaneó todos,

179
00:07:42,430 --> 00:07:46,880
y luego fue capaz de usar
el índice "BtreeCursor" para

180
00:07:46,880 --> 00:07:49,730
devolver los resultados
ordenados.

181
00:07:49,730 --> 00:07:53,060
Y sólo para enseñarte que éste
es el índice sobre "a" y "b", voy

182
00:07:53,060 --> 00:07:55,870
voy a mostrarte el 
comando "getIndexes", que

183
00:07:55,870 --> 00:07:58,260
te enseñará los índices que
existen sobre la colección.

184
00:07:58,260 --> 00:08:02,300
Puedes ver que esta colección
tiene el índice sobre "a" y "b" y ahora

185
00:08:02,300 --> 00:08:07,080
se llama "a_1_b_1" por ascendente y
ascendente.

186
00:08:07,080 --> 00:08:07,390
De acuerdo.

187
00:08:07,390 --> 00:08:09,630
Hora de hacer un cuestionario.

188
00:08:09,630 --> 00:08:12,190
Dada la siguiente salida de
"explain", ¿cuál es la mejor

189
00:08:12,190 --> 00:08:14,530
descripción de lo que sucedió
durante la consulta?

190
00:08:14,530 --> 00:08:17,500
Y las opciones son que la consulta
usó un índice llamado

191
00:08:17,500 --> 00:08:23,750
"BasicCursor" y respondió en
5151 microsegundos; la consulta

192
00:08:23,750 --> 00:08:28,500
escaneó 10 millones de documentos,
devolviendo 10000 in 5,2

193
00:08:28,500 --> 00:08:33,240
segundos; la consulta escaneó
10000 documentos y respondió

194
00:08:33,240 --> 00:08:37,309
en 5 milisegundos; y la
consulta fue capaz de usar un

195
00:08:37,309 --> 00:08:39,750
índice cubierto para responder la
consulta completamente desde

196
00:08:39,750 --> 00:08:41,780
el índice sin examinar
los documentos.

197
00:08:41,780 --> 00:08:43,030
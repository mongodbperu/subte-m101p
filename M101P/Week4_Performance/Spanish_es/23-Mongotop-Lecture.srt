1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:01,840
Repasemos lo que hemos
aprendido hasta ahora.

3
00:00:01,840 --> 00:00:04,610
Aprendimos que los índices son
vitales para el rendimiento en

4
00:00:04,610 --> 00:00:06,670
una base de datos y en MongoDB.

5
00:00:06,670 --> 00:00:09,760
Aprendimos cómo usar el
comando "explain" para buscar lo

6
00:00:09,760 --> 00:00:12,850
que la base de datos está haciendo
para una consulta en particular en

7
00:00:12,850 --> 00:00:14,670
términos de cómo está
usando sus índices.

8
00:00:14,670 --> 00:00:17,200
Aprendimos cómo usar el comando
"hint" para decirle a la

9
00:00:17,200 --> 00:00:19,880
base de datos que use un índice
en particular para una consulta.

10
00:00:19,880 --> 00:00:22,070
Y hemos aprendido cómo activar el
"profiling" y echado un vistazo a la

11
00:00:22,070 --> 00:00:24,720
información del "profiling" para
averiguar cuáles de nuestras

12
00:00:24,720 --> 00:00:28,030
consultas son lentas para que
podamos usar el comando "explain",

13
00:00:28,030 --> 00:00:31,420
posiblemente usar el comando "hint",
posiblemente crear nuevos índices.

14
00:00:31,420 --> 00:00:33,980
Pero si deseas echar un vistazo
en un alto nivel en un programa

15
00:00:33,980 --> 00:00:37,320
y averiguar lo que está haciendo,
¿cómo lo haría?

16
00:00:37,320 --> 00:00:38,800
Bien, tenemos algunas
herramientas para hacerlo. 

17
00:00:38,800 --> 00:00:41,170
Y voy a mostrártelas
a continuación.

18
00:00:41,170 --> 00:00:44,560
La primera que me gustaría
mostrarte es "mongotop".

19
00:00:44,560 --> 00:00:48,710
Ahora, "mongotop" es llamada
así por el comando Unix "top".

20
00:00:48,710 --> 00:00:51,920
Esto te va a dar una visión, a un
alto nivel, de dónde está Mongo

21
00:00:51,920 --> 00:00:53,210
gastando su tiempo.

22
00:00:53,210 --> 00:00:56,510
Y para mostrarte cómo podría
ser interesante, permíteme llevarte

23
00:00:56,510 --> 00:01:00,890
a través de dos programas
que he escrito.

24
00:01:00,890 --> 00:01:04,430
El primer programa lo llamo
"stress_students".

25
00:01:04,430 --> 00:01:08,690
Ahora, "stress_students", que está
justo aquí, es un pequeño programa

26
00:01:08,690 --> 00:01:10,970
que se conecta a la base de datos
y va a buscar por un

27
00:01:10,970 --> 00:01:13,600
millón de registros de estudiantes
en mi colección "students".

28
00:01:13,600 --> 00:01:16,520
Mi colección "students"
no tiene índices y va a

29
00:01:16,520 --> 00:01:18,640
ser lenta.

30
00:01:18,640 --> 00:01:21,970
Así que ejecutamos eso.

31
00:01:21,970 --> 00:01:23,710
Ahora aquí está, trastabillando
a través de estos distintos

32
00:01:23,710 --> 00:01:24,280
registros de estudiantes.

33
00:01:24,280 --> 00:01:26,900
Parece que está tomando
casi un segundo por registro.

34
00:01:26,900 --> 00:01:30,135
Y luego en esta ventana,
estoy ejecutando "mongotop".

35
00:01:30,135 --> 00:01:32,960
Y voy a ejecutarlo
cada tres segundos--

36
00:01:32,960 --> 00:01:34,600
"mongotop 3".

37
00:01:34,600 --> 00:01:36,585
De cualquier modo, vamos a
ver la salida juntos.

38
00:01:36,585 --> 00:01:38,440
Voy a detenerlo.

39
00:01:38,440 --> 00:01:42,340
Ahora lo que está diciendo es que--
y no estoy seguro exactamente por qué


40
00:01:42,340 --> 00:01:44,210
está por encima de los tres
segundos cuando el intervalo

41
00:01:44,210 --> 00:01:45,510
de muestreo es tres segundos--

42
00:01:45,510 --> 00:01:50,650
pero está diciendo todo el tiempo
que es gastado en la colección

43
00:01:50,650 --> 00:01:51,190
"students".

44
00:01:51,190 --> 00:01:55,630
Notarás esto, una fila por
cada colección que está

45
00:01:55,630 --> 00:01:56,530
monitoreando.

46
00:01:56,530 --> 00:01:59,740
Y esto es genial porque en un
alto nivel, si tengo muchas

47
00:01:59,740 --> 00:02:01,800
colecciones, deseo
saber dónde está

48
00:02:01,800 --> 00:02:02,800
gastando su tiempo.

49
00:02:02,800 --> 00:02:06,470
Entonces está diciéndome mi
tiempo de lectura y de escritura.

50
00:02:06,470 --> 00:02:10,229
Y está claramente dominado
por el tiempo gastado en la

51
00:02:10,229 --> 00:02:13,180
lectura de la colección
"students".

52
00:02:13,180 --> 00:02:15,680
Por eso me dice que es lo que
debería mirar, ¿correcto?

53
00:02:15,680 --> 00:02:19,540
Y tengo el "profiling" activado,
si fuera hacia el "profiler",

54
00:02:19,540 --> 00:02:22,090
Encontraría que hay muchas
consultas lentas y que podría

55
00:02:22,090 --> 00:02:24,910
trabajar en esto de
buenas a primeras.

56
00:02:24,910 --> 00:02:28,250
Así que echemos un vistazo a un
programa diferente que debería estar

57
00:02:28,250 --> 00:02:30,380
ejecutándose de manera más
eficiente ya que usa índices y

58
00:02:30,380 --> 00:02:32,390
ver qué resultados obtenemos allí.

59
00:02:32,390 --> 00:02:33,480
Voy a volver aquí.

60
00:02:33,480 --> 00:02:35,610
Voy a detener
este programa.

61
00:02:35,610 --> 00:02:41,110
Y ahora, voy a mostrarte un
programa muy similar llamado

62
00:02:41,110 --> 00:02:43,090
"stress_students2.py".

63
00:02:43,090 --> 00:02:47,230
Ahora, este se conecta a mi
base de datos "school2" y hay

64
00:02:47,230 --> 00:02:50,430
otra colección "students"
allí que también tiene 10

65
00:02:50,430 --> 00:02:51,110
millones de registros.

66
00:02:51,110 --> 00:02:52,960
Pero ellos están siendo consultados de
una manera un poco diferente por "class_id"

67
00:02:52,960 --> 00:02:56,470
y "student_id", por lo
que luego, hago un bucle.

68
00:02:56,470 --> 00:02:59,920
Pero cada una de estas consultas
que buscan un estudiante por su

69
00:02:59,920 --> 00:03:02,150
"class_id" va a alcanzar a un
índice porque tengo un índice

70
00:03:02,150 --> 00:03:05,540
para "student_id" y "class_id"
en aquella colección.

71
00:03:05,540 --> 00:03:07,650
Y es bastante selectivo,
y sus "student_id"

72
00:03:07,650 --> 00:03:08,750
están justo ahí.

73
00:03:08,750 --> 00:03:10,700
Así que deberíamos
esperar obtener un buen

74
00:03:10,700 --> 00:03:12,690
rendimiento de este programa.

75
00:03:12,690 --> 00:03:16,710
Y veamos cuáles son los
resultados cuando lo ejecutamos.

76
00:03:16,710 --> 00:03:18,190
Bueno, quiero decir que lo
primero que notas es que está

77
00:03:18,190 --> 00:03:20,860
volando, por que sólo podrías
sentir que está ejecutando mucho

78
00:03:20,860 --> 00:03:22,420
más rápido a través
de la base de datos.

79
00:03:22,420 --> 00:03:26,220
Pero ahora voy a ejecutar
"mongotop" por tres segundos y

80
00:03:26,220 --> 00:03:27,850
ver lo que dice.

81
00:03:27,850 --> 00:03:32,420
Y dice que en el intervalo,
850 milisegundos de

82
00:03:32,420 --> 00:03:36,270
los tres segundos, los 3000
milisegundos, están gastados en

83
00:03:36,270 --> 00:03:40,750
la colección "school2.students",
y todo esto está en lectura.

84
00:03:40,750 --> 00:03:42,540
Pero eso es sólo una pequeña
fracción del intervalo de

85
00:03:42,540 --> 00:03:44,320
muestreo de tres segundos.

86
00:03:44,320 --> 00:03:47,100
Y lo que me da a
pensar es que esto

87
00:03:47,100 --> 00:03:51,060
no está vinculado a su
rendimiento a través de Mongo.

88
00:03:51,060 --> 00:03:54,480
Y si veo en el monitor de
actividad en mi Mac-- y esto

89
00:03:54,480 --> 00:03:57,300
es probablemente una pequeña
característa para ver--

90
00:03:57,300 --> 00:03:59,920
puedes ver que hay mucho
tiempo desgastado en Python

91
00:03:59,920 --> 00:04:00,950
que lo que hay en Mongo.

92
00:04:00,950 --> 00:04:04,300
Porque todo el I/O y los bucles
de allí, están accediendo a

93
00:04:04,300 --> 00:04:05,760
Mongo muy rápidamente.

94
00:04:05,760 --> 00:04:08,280
Y esto me diría que este
programa, en realidad, está

95
00:04:08,280 --> 00:04:09,320
rindiendo bastante bien.

96
00:04:09,320 --> 00:04:14,240
Ahora bien, si fui y miré en los
registros de "profiling", no vería

97
00:04:14,240 --> 00:04:17,019
ninguna consulta lenta porque
realmente no hay ninguna para

98
00:04:17,019 --> 00:04:18,690
este programa en particular.

99
00:04:18,690 --> 00:04:19,940
Así que esto es "mongotop".

100
00:04:19,940 --> 00:04:21,149

1
00:00:00,000 --> 00:00:00,200

2
00:00:00,200 --> 00:00:04,270
Deseo mostrarte cómo usar el
comando "hint" en PyMongo.

3
00:00:04,270 --> 00:00:06,770
Es bastante similar a la forma
en que se usa en el shell mongo,

4
00:00:06,770 --> 00:00:09,470
pero hay una
pequeña sutileza que

5
00:00:09,470 --> 00:00:10,830
vale la pena señalar.

6
00:00:10,830 --> 00:00:14,620
Así que este es un pequeño programa
que escribí llamado "using_hint.py".

7
00:00:14,620 --> 00:00:17,620
Se parece mucho a todos los
otros programas que hemos usado

8
00:00:17,620 --> 00:00:18,980
en este curso.

9
00:00:18,980 --> 00:00:21,360
Nos conectamos a la base de datos
Mongo y nos conectamos a la

10
00:00:21,360 --> 00:00:24,550
base de datos "test" en
particular, y luego a la

11
00:00:24,550 --> 00:00:25,870
colección "foo".

12
00:00:25,870 --> 00:00:30,160
Y vamos a hacer esta consulta en las
claves "a", "b" y "c", todas tienen

13
00:00:30,160 --> 00:00:31,950
el valor de 40000.

14
00:00:31,950 --> 00:00:34,060
Y vamos a hacer esa
consulta aquí y luego

15
00:00:34,060 --> 00:00:36,830
vamos a añadir este
comando "hint" en él.

16
00:00:36,830 --> 00:00:40,920
Pero lo que quiero destacar
es que, al igual que cuando

17
00:00:40,920 --> 00:00:45,770
deseas ordenar por un índice en
particular en Python, no puedes

18
00:00:45,770 --> 00:00:48,570
dar sólo un diccionario
para especificar el índice.

19
00:00:48,570 --> 00:00:51,090
Debes dar un array
de estas tuplas.

20
00:00:51,090 --> 00:00:53,670
Y por lo que este es un
array de tuplas donde--

21
00:00:53,670 --> 00:00:56,050
este no es un índice compuesto,
es un índice simple.

22
00:00:56,050 --> 00:00:57,770
Pero si fuera un índice
compuesto, habría múltiples

23
00:00:57,770 --> 00:00:58,960
tuplas aquí.

24
00:00:58,960 --> 00:01:02,255
Y puedes ver la tupla que es
"("c", pymongo.ASCENDING)".

25
00:01:02,255 --> 00:01:06,110
Y si hubiera otro elemento
en el índice entonces

26
00:01:06,110 --> 00:01:08,040
tendrías que añadir una
coma y otro elemento.

27
00:01:08,040 --> 00:01:11,800
Y la razón es que los
diccionarios por sí mismos en

28
00:01:11,800 --> 00:01:13,150
Python no son ordenados.

29
00:01:13,150 --> 00:01:17,230
Y así, con el fin de enviar
una lista ordenada de cosas a

30
00:01:17,230 --> 00:01:22,640
mongod, en realidad tienes que
usar este array de tuplas.

31
00:01:22,640 --> 00:01:24,730
Por lo que es una sintaxis ligeramente
diferente a lo que ves en el

32
00:01:24,730 --> 00:01:27,960
shell debido a que los diccionarios
en Python no son ordenados.

33
00:01:27,960 --> 00:01:29,700
Ellos son ordenados
en JavaScript.

34
00:01:29,700 --> 00:01:32,290
Bien, así que si lo hacemos--
y en realidad llamo a

35
00:01:32,290 --> 00:01:34,810
"explain" al final, lo que
vemos es lo que tenemos,

36
00:01:34,810 --> 00:01:36,190
sólo para confirmar que funciona.

37
00:01:36,190 --> 00:01:38,350
Y voy a ejecutar esa
consulta y voy a imprimir

38
00:01:38,350 --> 00:01:39,370
lo que obtengo.

39
00:01:39,370 --> 00:01:40,750
Voy a iterar a través
de lo que obtengo.

40
00:01:40,750 --> 00:01:43,150
Voy a obtener un documento
del comando "explain" y

41
00:01:43,150 --> 00:01:44,620
sólo voy a ir
a través de él.

42
00:01:44,620 --> 00:01:48,100
Así que hagamos eso y
veamos lo que obtenemos.

43
00:01:48,100 --> 00:01:49,500
Y es básicamente
lo que esperamos.

44
00:01:49,500 --> 00:01:51,120
Es la salida del
comando "explain".

45
00:01:51,120 --> 00:01:53,510
Se imprime en Python.

46
00:01:53,510 --> 00:01:56,660
El orden de estas diferentes
claves no son necesariamente las

47
00:01:56,660 --> 00:01:58,540
mismas como las viste en el
shell mongo, de nuevo porque

48
00:01:58,540 --> 00:02:00,200
Python no las
mantiene ordenadas.

49
00:02:00,200 --> 00:02:02,660
Pero si buscas el cursor,
puedes ver que está

50
00:02:02,660 --> 00:02:06,420
usando el índice sólo en "c"
para satisfacer esta consulta.

51
00:02:06,420 --> 00:02:07,670
Así funciona el comando "hint".

52
00:02:07,670 --> 00:02:08,690

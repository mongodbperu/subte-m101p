1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:03,520
OK, ahora ya tienes la mayoría de las
herramientas que necesitas para

3
00:00:03,520 --> 00:00:05,390
entender el uso de los índices.

4
00:00:05,390 --> 00:00:09,030
Pero antes de continuar, quiero
señalar que sólo porque

5
00:00:09,030 --> 00:00:11,900
uses un índice no quiere decir
que lo uses eficientemente.

6
00:00:11,900 --> 00:00:15,150
Así, ciertos tipos de operadores,
como por ejemplo "$gt" (mayor que)

7
00:00:15,150 --> 00:00:19,110
y "$lt" (menor que), podrían
usar un índice pero no hacerlo

8
00:00:19,110 --> 00:00:22,000
eficientemente porque aún 
podrían requerir la inspección

9
00:00:22,000 --> 00:00:23,720
de un montón de documentos.

10
00:00:23,720 --> 00:00:29,610
Por lo que podrías decir "$gt: 3",
y quizá eso sea

11
00:00:29,610 --> 00:00:31,200
la mitad de la colección.

12
00:00:31,200 --> 00:00:34,390
Y por tanto aunque use el índice,
es todavía muy lento.

13
00:00:34,390 --> 00:00:36,930
Otras cosas que podrían no usar
el índice o usarlo

14
00:00:36,930 --> 00:00:40,140
ineficientemente son
"$ne" (distinto de) o "$nin"

15
00:00:40,140 --> 00:00:42,430
(no incluido en) o no existe.

16
00:00:42,430 --> 00:00:45,310
Todos estos operadores negativos
son difíciles

17
00:00:45,310 --> 00:00:47,450
porque necesitan inspeccionar
cada elemento para ver si

18
00:00:47,450 --> 00:00:50,530
satisface el criterio, y 
podría haber devuelto un

19
00:00:50,530 --> 00:00:51,660
resultado enorme.

20
00:00:51,660 --> 00:00:55,080
También, cuando estás buscando con
expresiones regulares, si no pasas

21
00:00:55,080 --> 00:00:57,980
algo que coincida
con la parte izquierda

22
00:00:57,980 --> 00:00:59,580
del campo, es lento.

23
00:00:59,580 --> 00:01:04,739
Por lo que si dices que quieres buscar
por "/abcd/", esto realmente no puede

24
00:01:04,739 --> 00:01:09,240
usar el índice porque no
tenemos forma de hacer esa búsqueda

25
00:01:09,240 --> 00:01:10,060
de texto completo.

26
00:01:10,060 --> 00:01:15,370
Si por otro lado, dices
"/^abcd/" para que coincida con la parte

27
00:01:15,370 --> 00:01:20,230
izquierda de la cadena, entonces puede
usarlo y lo usará.

28
00:01:20,230 --> 00:01:22,310
Déjame que te dé un ejemplo
donde la información de primer

29
00:01:22,310 --> 00:01:24,550
orden puede ser un poco
confusa.

30
00:01:24,550 --> 00:01:27,050
Volvamos a nuestra colección
"students".

31
00:01:27,050 --> 00:01:28,250
Hice dos de estas
colecciones.

32
00:01:28,250 --> 00:01:31,810
Ésta tiene 10 millones
de documentos y unos

33
00:01:31,810 --> 00:01:33,260
cuantos índices.

34
00:01:33,260 --> 00:01:34,830
Eso es un documento de
la colección.

35
00:01:34,830 --> 00:01:36,560
Puedes ver que tiene
un "student_id" y un

36
00:01:36,560 --> 00:01:38,470
"class_id" y "scores".

37
00:01:38,470 --> 00:01:42,460
Y hay más de un
registro por cada estudiante.

38
00:01:42,460 --> 00:01:45,050
Hay un registro
por cada clase.

39
00:01:45,050 --> 00:01:48,080
Echemos un vistazo a los
índices.

40
00:01:48,080 --> 00:01:48,760
Oops.

41
00:01:48,760 --> 00:01:50,820
Cuando examinamos los índices,
vemos que hay un buen

42
00:01:50,820 --> 00:01:52,160
número de índices sobre ella.

43
00:01:52,160 --> 00:01:56,393
Tenemos uno sobre "_id"; uno
sobre "class_id"; uno sobre "student_id";

44
00:01:56,393 --> 00:01:59,920
uno sobre "student_id, class_id" --

45
00:01:59,920 --> 00:02:01,010
todo bien.

46
00:02:01,010 --> 00:02:05,590
Ahora, hagamos una consulta que sea
razonablemente selectiva pero que no 

47
00:02:05,590 --> 00:02:06,590
vaya a ser muy rápida.

48
00:02:06,590 --> 00:02:09,880
Y en particular, busquemos
todos los estudiantes

49
00:02:09,880 --> 00:02:13,770
con "student_id" mayor que
500 que están en la clase 20.

50
00:02:13,770 --> 00:02:14,930
No hay muchos
documentos que

51
00:02:14,930 --> 00:02:16,450
satisfagan este criterio.

52
00:02:16,450 --> 00:02:19,520
Y luego ordenemos por
"student_id" y hagamos un "explain".

53
00:02:19,520 --> 00:02:24,070
Y si hacemos eso, podemos ver
que es bastante lento.

54
00:02:24,070 --> 00:02:26,130
Tardó 3,6 segundos.

55
00:02:26,130 --> 00:02:29,600
Usó el
índice "student_id_1_class_id_1".

56
00:02:29,600 --> 00:02:34,120
Resulta que ésa no es
la mejor elección porque aunque

57
00:02:34,120 --> 00:02:38,060
sólo devolvió 20000
documentos, tuvo que escanear,

58
00:02:38,060 --> 00:02:44,260
eso parece, 1,3 millones de elementos
en el índice, y eso es un montón.

59
00:02:44,260 --> 00:02:46,340
Por lo que no usó el índice
más eficiente.

60
00:02:46,340 --> 00:02:47,660
Y puedes entender por qué.

61
00:02:47,660 --> 00:02:50,870
Si usas el índice "student_id",
y deliberadamente

62
00:02:50,870 --> 00:02:53,330
eliges un "student_id" que esté
en cualquier lugar en el medio,

63
00:02:53,330 --> 00:02:55,810
la mitad de los estudiantes tienen "student_id"
que es mayor que éste.

64
00:02:55,810 --> 00:02:59,140
Y por eso va a ser muy
ineficiente hacer eso.

65
00:02:59,140 --> 00:03:02,672
Pero por otro lado, si hago un "hint"
y digo, ya

66
00:03:02,672 --> 00:03:04,940
sabes, usa el índice "class_id".

67
00:03:04,940 --> 00:03:06,950
Y sé que no hay
muchos estudiantes en cada clase

68
00:03:06,950 --> 00:03:08,940
porque construí este conjunto de datos,
así que tengo información que

69
00:03:08,940 --> 00:03:10,680
necesariamente no tiene.

70
00:03:10,680 --> 00:03:12,270
Y es la misma consulta.

71
00:03:12,270 --> 00:03:13,790
Va a usar el
índice "class_id".

72
00:03:13,790 --> 00:03:15,730
Y luego, va a tener que
averiguar manualmente

73
00:03:15,730 --> 00:03:18,930
cuáles son los "student_id"
que son mayores que 500, pero

74
00:03:18,930 --> 00:03:21,240
va a ser
bastante mejor.

75
00:03:21,240 --> 00:03:23,000
Oh, fue mucho mejor.

76
00:03:23,000 --> 00:03:28,060
Puedes ver aquí que tardó
133 milisegundos, y 

77
00:03:28,060 --> 00:03:31,260
escaneó 20000 objetos aquí.

78
00:03:31,260 --> 00:03:34,770
Y si no ves ningún número
mayor que ése aquí, entonces el

79
00:03:34,770 --> 00:03:37,510
número de entradas en el índice escaneadas
parece que fue

80
00:03:37,510 --> 00:03:38,530
más o menos el mismo.

81
00:03:38,530 --> 00:03:43,070
Así que es mucho más eficiente usar
este índice "class_id" aunque

82
00:03:43,070 --> 00:03:46,000
se especificaron "class_id" y
"student_id".

83
00:03:46,000 --> 00:03:48,610
Y la razón es que la forma
en que estuvimos usando ese índice

84
00:03:48,610 --> 00:03:51,950
"student_id" fue con uno de estos
operadores, "$gt: 500".

85
00:03:51,950 --> 00:03:52,750
Mayor que --

86
00:03:52,750 --> 00:03:55,850
no es un operador particularmente
eficiente para usar con un índice.

87
00:03:55,850 --> 00:03:59,790
Así que simplemente ten en mente cuando
estés pensando en indexar

88
00:03:59,790 --> 00:04:03,870
y si estás usando un índice
o no, que tienes que

89
00:04:03,870 --> 00:04:06,180
considerar más que si se usó
un índice, también

90
00:04:06,180 --> 00:04:07,550
cómo se usó.

91
00:04:07,550 --> 00:04:09,180
¿Se usó sólo para el ordenamiento?

92
00:04:09,180 --> 00:04:11,410
¿Se usó de forma
ineficiente y provocó que la

93
00:04:11,410 --> 00:04:13,430
base de datos examinara
millones de registros?

94
00:04:13,430 --> 00:04:15,890
Todas estas cosas son importantes
cuando afectan al rendimiento

95
00:04:15,890 --> 00:04:17,140
final.

96
00:04:17,140 --> 00:04:17,440
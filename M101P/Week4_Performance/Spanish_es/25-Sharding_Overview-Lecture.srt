1
00:00:00,000 --> 00:00:00,230

2
00:00:00,230 --> 00:00:04,030
Bien, el último tema de
esta unidad es "Sharding".

3
00:00:04,030 --> 00:00:07,280
Y "Sharding" es una técnica
para dividir una colección

4
00:00:07,280 --> 00:00:09,620
grande a través de
múltiples servidores.

5
00:00:09,620 --> 00:00:13,420
Hasta ahora hemos estado hablando
sobre tener un único servidor

6
00:00:13,420 --> 00:00:16,129
Mongo, el cual representaré
como este disco.

7
00:00:16,129 --> 00:00:18,560
Pero llega un momento en que
no puedes obtener el rendimiento

8
00:00:18,560 --> 00:00:20,810
que quieres de un único servidor.

9
00:00:20,810 --> 00:00:24,290
Y para eso lo que puedes hacer
es "Sharding".

10
00:00:24,290 --> 00:00:28,520
Y cuando haces "Sharding", despliegas
múltiples servidores mongod y

11
00:00:28,520 --> 00:00:32,450
como frontal, tienes un mongos
que es un router.

12
00:00:32,450 --> 00:00:36,910
Y tu aplicación se comunica con el
mongos, que luego se comunica

13
00:00:36,910 --> 00:00:40,880
con los varios servidores,
los mongods.

14
00:00:40,880 --> 00:00:44,500
Ahora un consejo, en el que no
entraré aquí, es que más que

15
00:00:44,500 --> 00:00:48,820
ser un servidor único,
a menudo se

16
00:00:48,820 --> 00:00:51,950
recomienda que sea
un conjunto de servidores.

17
00:00:51,950 --> 00:00:56,750
Imagina tres de estas cosas
por aquí detrás en lo que se llama

18
00:00:56,750 --> 00:00:58,030
conjunto de réplicas.

19
00:00:58,030 --> 00:01:02,640
Y un conjunto de réplicas mantiene los datos
sincronizados a través de varias

20
00:01:02,640 --> 00:01:05,870
instancias diferentes para que si
una de ellas se cae,

21
00:01:05,870 --> 00:01:06,930
no pierdas tus datos.

22
00:01:06,930 --> 00:01:11,000
Pero lógicamente, puedes mirar
este conjunto de réplicas como un "shard".

23
00:01:11,000 --> 00:01:13,360
Y cuando estás haciendo esto --
y en su mayor parte es

24
00:01:13,360 --> 00:01:15,290
transparente a la
aplicación --

25
00:01:15,290 --> 00:01:17,820
sin embargo, la forma en que Mongo
hace "Sharding", es escogiendo

26
00:01:17,820 --> 00:01:19,580
una clave de "shard".

27
00:01:19,580 --> 00:01:21,730
Así por ejemplo, en esa colección
"student", podrías

28
00:01:21,730 --> 00:01:25,810
decidir que "student_id"
es tu clave del "shard".

29
00:01:25,810 --> 00:01:27,950
O podría ser una clave compuesta.

30
00:01:27,950 --> 00:01:30,930
Y el servidor mongos, es un
sistema basado en rangos.

31
00:01:30,930 --> 00:01:33,710
Así, basado en el "student_id" que
estás consultando, enviará la

32
00:01:33,710 --> 00:01:38,440
petición a la instancia
Mongo correcta.

33
00:01:38,440 --> 00:01:41,870
Entonces, ¿qué necesitas conocer
realmente como desarrollador?

34
00:01:41,870 --> 00:01:45,440
Bien, lo primero que necesitas
saber es que un "insert" debe

35
00:01:45,440 --> 00:01:48,110
incluir la clave del "shard",
la clave del "shard" completa.

36
00:01:48,110 --> 00:01:51,130
Por lo que si la clave del "shard"
es compuesta, tienes que incluir

37
00:01:51,130 --> 00:01:53,990
la clave del "shard" entera para
completar la inserción.

38
00:01:53,990 --> 00:01:57,700
Así que debes tener cuidado con cuál
es la clave del "shard" en la

39
00:01:57,700 --> 00:01:58,980
colección.

40
00:01:58,980 --> 00:02:03,330
Y la segunda cosa que necesitas
saber es que para un "update",

41
00:02:03,330 --> 00:02:08,211
"remove" o un "find", si no se le pasa
a "mongos" una clave del "shard",

42
00:02:08,211 --> 00:02:13,000
entonces lo que va a tener que
hacer es transmitir la

43
00:02:13,000 --> 00:02:16,180
petición a todos los "shards"
diferentes que cubren la

44
00:02:16,180 --> 00:02:17,310
colección.

45
00:02:17,310 --> 00:02:20,580
Así que tienes alguna colección,
como la colección "students",

46
00:02:20,580 --> 00:02:25,340
y está particionada en grandes
bloques que mapean cada uno a

47
00:02:25,340 --> 00:02:26,780
distintos "shards" --

48
00:02:26,780 --> 00:02:28,710
"shard0", "shard1".

49
00:02:28,710 --> 00:02:31,980
Y entonces hay algún reparto
por aquí dentro para permitir a Mongo

50
00:02:31,980 --> 00:02:33,860
mantenerlo balanceado, pero eso
realmente no importa desde

51
00:02:33,860 --> 00:02:35,430
tu punto de vista.

52
00:02:35,430 --> 00:02:38,970
La cuestión es que si no
conoce la clave del "shard", en

53
00:02:38,970 --> 00:02:41,050
la consulta, tiene que
transimitirla.

54
00:02:41,050 --> 00:02:44,790
Ahora, podría ser el caso que
estés haciendo una consulta donde

55
00:02:44,790 --> 00:02:47,370
no conoces la clave del "shard",
en cuyo caso

56
00:02:47,370 --> 00:02:48,105
tiene que ser difundida.

57
00:02:48,105 --> 00:02:49,230
Y eso está bien.

58
00:02:49,230 --> 00:02:52,950
Pero si conoces la clave del "shard",
deberías especificarla porque

59
00:02:52,950 --> 00:02:54,310
obtendrás mejor rendimiento,
ya que sólo

60
00:02:54,310 --> 00:02:56,600
estarás utilizando uno
de los servidores.

61
00:02:56,600 --> 00:02:58,920
Y no estarás ocupando también los 
otros servidores con esta

62
00:02:58,920 --> 00:03:00,180
consulta.

63
00:03:00,180 --> 00:03:01,380
Un par de otras sutilezas --

64
00:03:01,380 --> 00:03:04,800
con las actualizaciones, si no
especificas la clave del "shard" completa,

65
00:03:04,800 --> 00:03:07,590
tienes que hacer un
"multi-update" para que sepa que

66
00:03:07,590 --> 00:03:09,100
necesita difundirlas.

67
00:03:09,100 --> 00:03:11,480
Y vamos a ver esto un montón
en la parte de ingenería

68
00:03:11,480 --> 00:03:13,150
de aplicación
del curso.

69
00:03:13,150 --> 00:03:16,760
Pero sólo quería explicar el
papel que tiene el "Sharding" en

70
00:03:16,760 --> 00:03:21,210
el rendimiento y también la
sutileza de tener que pensar

71
00:03:21,210 --> 00:03:22,420
un poco acerca de la clave del "shard".

72
00:03:22,420 --> 00:03:25,150
Y la elección de una clave del "shard" es un
tema en sí mismo, en el cual

73
00:03:25,150 --> 00:03:26,530
no vamos a entrar.

74
00:03:26,530 --> 00:03:30,890
Ahora, dentro de cada uno de estos
servidores, todas estas instancias,

75
00:03:30,890 --> 00:03:33,870
se aplican las mismas técnicas de las
que hemos estado hablando

76
00:03:33,870 --> 00:03:34,930
en esta unidad completa.

77
00:03:34,930 --> 00:03:37,960
Por lo que desde luego podrías
usar "explain".

78
00:03:37,960 --> 00:03:40,820
Puedes echar un vistazo a
"system.profile".

79
00:03:40,820 --> 00:03:43,000
Puedes conectarte directamente a las
instancias Mongo que están

80
00:03:43,000 --> 00:03:47,450
en ejecución aquí, si quisieras por
motivos de depuración.

81
00:03:47,450 --> 00:03:49,420
Así que se aplican un montón 
de las mismas cosas.

82
00:03:49,420 --> 00:03:52,250
Pero al nivel más alto, tu
aplicación se estará comunicando con

83
00:03:52,250 --> 00:03:53,850
un router mongos.

84
00:03:53,850 --> 00:03:56,790
Y esos mongos se estarán comunicando
con los mongods,

85
00:03:56,790 --> 00:03:59,300
normalmente en servidores físicos
diferentes porque probablemente

86
00:03:59,300 --> 00:04:01,920
ésa es la razón por la cual
se hizo "Sharding" en primer lugar,

87
00:04:01,920 --> 00:04:03,270
para obtener un rendimiento más alto.

88
00:04:03,270 --> 00:04:05,950
Y sólo en caso que te lo estuvieras
preguntando, mongos a menudo está

89
00:04:05,950 --> 00:04:10,120
ubicado en la misma máquina
que la aplicación y puedes

90
00:04:10,120 --> 00:04:12,910
tener múltiples de estos
servicios mongos.

91
00:04:12,910 --> 00:04:15,240
Y podrías haber notado el
binario mongos en la distribución

92
00:04:15,240 --> 00:04:16,620
Mongo, y esto es
lo que es.

93
00:04:16,620 --> 00:04:21,279
Te permite hacer "Sharding" en una colección
y dividirla entre múltiples

94
00:04:21,279 --> 00:04:23,750
servidores y acceder a ellos
de forma bastante fácil --

95
00:04:23,750 --> 00:04:25,980
en cierto modo transparente, excepto
que tienes que tener algún

96
00:04:25,980 --> 00:04:27,760
conocimiento de
la clave del "shard".

97
00:04:27,760 --> 00:04:31,130
De acuerdo, así que esto completa
nuestra unidad sobre rendimiento.

98
00:04:31,130 --> 00:04:33,950
Espero que la hayas disfrutado y
nos vemos la semana que viene.

99
00:04:33,950 --> 00:04:35,200
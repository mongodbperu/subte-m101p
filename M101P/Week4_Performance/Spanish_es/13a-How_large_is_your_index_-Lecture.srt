1
00:00:00,000 --> 00:00:00,180

2
00:00:00,180 --> 00:00:03,200
Comenzamos esta unidad
hablando acerca de la importancia

3
00:00:03,200 --> 00:00:06,380
de ser algorítmicamente
eficientes en el uso de índices para

4
00:00:06,380 --> 00:00:08,210
resolver nuestras consultas.

5
00:00:08,210 --> 00:00:10,630
Ahora el siguiente nivel de
optimización es que queremos

6
00:00:10,630 --> 00:00:13,580
que esos índices estén en memoria.

7
00:00:13,580 --> 00:00:16,390
Porque si nuestro índice no está en
memoria -- si nuestro índice está en

8
00:00:16,390 --> 00:00:19,100
disco y si estamos usando casi
todo, entonces vamos a

9
00:00:19,100 --> 00:00:19,770
encontrarnos que el 

10
00:00:19,770 --> 00:00:21,500
rendimiento es seriamente afectado.

11
00:00:21,500 --> 00:00:24,020
Incluso aunque algorítmicamente es
mucho más rápido que,

12
00:00:24,020 --> 00:00:26,790
digamos, recorrer la colección
entera para obtener la respuesta,

13
00:00:26,790 --> 00:00:30,030
aún no va a ser súper
rápido si tenemos que ir a

14
00:00:30,030 --> 00:00:32,860
disco para acceder a nuestro índice.

15
00:00:32,860 --> 00:00:34,530
Por lo que surge una cuestión -- y
vamos a hablar más sobre

16
00:00:34,530 --> 00:00:37,890
esto en el resto de la unidad --
acerca del conjunto de trabajo y cómo

17
00:00:37,890 --> 00:00:40,830
mantenemos la mayoría de las partes importantes
de los datos en memoria.

18
00:00:40,830 --> 00:00:43,190
Pero incluso más importante que
mantener los datos en memoria va a

19
00:00:43,190 --> 00:00:45,140
ser mantener el
índice en memoria.

20
00:00:45,140 --> 00:00:46,660
Por lo que la primera pregunta
que podrías tener es,

21
00:00:46,660 --> 00:00:48,200
¿cuán grande es un índice?

22
00:00:48,200 --> 00:00:51,770
Volvamos atrás y echemos un vistazo a esta
colección de estudiantes que

23
00:00:51,770 --> 00:00:53,000
creé anteriormente.

24
00:00:53,000 --> 00:00:57,840
Y si recuerdas, tiene 10
millones de registros de estudiantes.

25
00:00:57,840 --> 00:01:00,200
Por lo que si examinamos esa
colección, 

26
00:01:00,200 --> 00:01:01,496
podemos obtener sus estadísticas.

27
00:01:01,496 --> 00:01:05,190

28
00:01:05,190 --> 00:01:06,970
Tan sólo dice
"db.students.stats".

29
00:01:06,970 --> 00:01:10,360
Y puedes ver que el promedio de
objetos en ella es 232

30
00:01:10,360 --> 00:01:14,490
bytes y que en total esta
cosa está usando casi 3

31
00:01:14,490 --> 00:01:16,220
gigabytes en disco.

32
00:01:16,220 --> 00:01:19,550
Y podríamos no tener un equipo
con 3 gigabytes de memoria,

33
00:01:19,550 --> 00:01:21,110
pero podríamos tener un equipo
lo suficientemente

34
00:01:21,110 --> 00:01:22,340
grande para albergar nuestro índice.

35
00:01:22,340 --> 00:01:25,250
Así que la siguiente pregunta es, bien,
¿cuán grande es el índice?

36
00:01:25,250 --> 00:01:28,840
Y la respuesta es que
si ejecutamos el comando

37
00:01:28,840 --> 00:01:32,310
"totalIndexSize",
"db.students.totalIndexSize()", 

38
00:01:32,310 --> 00:01:35,330
averiguaremos el tamaño de
los índices en disco.

39
00:01:35,330 --> 00:01:38,380
Y la respuesta es 
que nuestro índice --

40
00:01:38,380 --> 00:01:40,990
y sólo tenemos un índice sobre
esta colección si recuerdo bien --

41
00:01:40,990 --> 00:01:42,030
bien, no estoy seguro de eso.

42
00:01:42,030 --> 00:01:43,180
Lo comprobaré en un segundo.

43
00:01:43,180 --> 00:01:48,340
Nuestros índices ocupan 543 megabytes.

44
00:01:48,340 --> 00:01:52,520
Y ahora echemos un vistazo a cuántos
índices existen sobre esta cosa.

45
00:01:52,520 --> 00:01:57,470
Sí, sólo hay un índice, que
añadimos antes, que es este

46
00:01:57,470 --> 00:01:58,960
índice sobre "student_id".

47
00:01:58,960 --> 00:02:05,380
Así que en total, 543 megabytes de
espacio ocupado por índices.

48
00:02:05,380 --> 00:02:09,699
Y si somos curiosos sobre cuánto
de eso está ocupado por el índice

49
00:02:09,699 --> 00:02:13,150
sobre "_id", supongo que lo que podemos hacer
es simplemente eliminar el índice que

50
00:02:13,150 --> 00:02:16,100
creamos y ejecutarlo de nuevo para
averiguar -- esto es

51
00:02:16,100 --> 00:02:16,490
interesante,

52
00:02:16,490 --> 00:02:17,740
no sé la respuesta.

53
00:02:17,740 --> 00:02:23,270
Así que sólo voy a eliminar
el índice sobre "student_id".

54
00:02:23,270 --> 00:02:27,650
Eliminamos el índice, y ahora
podemos ver que se ha ido.

55
00:02:27,650 --> 00:02:30,510
Y vamos a obtener el tamaño de nuestro índice.

56
00:02:30,510 --> 00:02:35,830
Y se redujo a 
casi la mitad, a 292 megabytes.

57
00:02:35,830 --> 00:02:39,210
Así puedes ver que parece
que por cada índice que

58
00:02:39,210 --> 00:02:42,050
añadimos a esta colección, 
tendremos que tener alrededor de 200

59
00:02:42,050 --> 00:02:45,260
megabytes de memoria disponible
si queremos mantener todos los

60
00:02:45,260 --> 00:02:46,350
índices en memoria --

61
00:02:46,350 --> 00:02:47,870
o al menos los
que vamos a usar.

62
00:02:47,870 --> 00:02:49,650
Es importante tener esto en
mente cuando estés diseñando

63
00:02:49,650 --> 00:02:50,590
tu sistema.

64
00:02:50,590 --> 00:02:52,710
Piensa sobre, bien eh, ¿cuán 
grandes van a ser 

65
00:02:52,710 --> 00:02:54,680
mi colección y
mis índices?

66
00:02:54,680 --> 00:02:56,920
Es en cierto modo, un tema de
administrador de sistemas o

67
00:02:56,920 --> 00:02:58,160
de administrador de base de datos.

68
00:02:58,160 --> 00:03:00,830
Pero está bien como desarrollador
tener esto en mente y

69
00:03:00,830 --> 00:03:03,050
darse cuenta que los índices
no son completamente gratuitos.

70
00:03:03,050 --> 00:03:04,340
Ya que vas a querer
mantenerlos en memoria y

71
00:03:04,340 --> 00:03:06,320
pueden llegar a ser un poco grandes.

72
00:03:06,320 --> 00:03:08,810
Son el único factor 
determinante más importante

73
00:03:08,810 --> 00:03:11,270
en términos de si obtienes
un buen rendimiento o no de una

74
00:03:11,270 --> 00:03:13,600
consulta, o si están
en memoria o no.

75
00:03:13,600 --> 00:03:15,830
De acuerdo, es hora de hacer un cuestionario.

76
00:03:15,830 --> 00:03:18,250
¿Qué es más importante que
entre en memoria,

77
00:03:18,250 --> 00:03:20,700
el índice o los datos?

78
00:03:20,700 --> 00:03:21,950
Marca una.

79
00:03:21,950 --> 00:03:22,630
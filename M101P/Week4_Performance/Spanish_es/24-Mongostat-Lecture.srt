1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:01,910
Ahora repasemos "mongostat".

3
00:00:01,910 --> 00:00:05,330
Ahora, "mongostat" es nombrado
así por "iostat", otra vez

4
00:00:05,330 --> 00:00:06,740
del mundo Unix.

5
00:00:06,740 --> 00:00:09,220
Y en el mundo Windows, hay
un programa "PerfMon" con el

6
00:00:09,220 --> 00:00:10,940
que puedes jugar para
hacer estas cosas

7
00:00:10,940 --> 00:00:12,070
al nivel del sistema.

8
00:00:12,070 --> 00:00:14,610
Y otra vez, todo esto de
rendimiento, sobre todo

9
00:00:14,610 --> 00:00:17,780
en un sistema grande en ejecución,
probablemente tenga un administrador

10
00:00:17,780 --> 00:00:20,110
de base de datos dedicado o
un "DevOps" que va estar

11
00:00:20,110 --> 00:00:21,650
preocupado acerca de esto.

12
00:00:21,650 --> 00:00:24,230
Pero como desarrollador, siempre
me gusta ser capaz de echar un

13
00:00:24,230 --> 00:00:25,440
rápido vistazo a las cosas.

14
00:00:25,440 --> 00:00:28,100
Trabajo en los pequeños
problemas y en los grandes,

15
00:00:28,100 --> 00:00:30,410
sólo me aseguro que mi
código no sea el problema.

16
00:00:30,410 --> 00:00:32,960
"mongostat" va a
darnos un montón de

17
00:00:32,960 --> 00:00:34,760
información a nivel del sistema.

18
00:00:34,760 --> 00:00:37,190
Y voy a mostrarte
eso realmente rápido.

19
00:00:37,190 --> 00:00:38,830
Ahora, eso va a ser un poco
difícil de mostrarte en la

20
00:00:38,830 --> 00:00:42,360
pantalla porque las
fuentes son muy grandes.

21
00:00:42,360 --> 00:00:44,220
Esto está enredado, así que ten
un poco de paciencia conmigo.

22
00:00:44,220 --> 00:00:48,740
Pero está mostrándote un montón
de información acerca de cuántas

23
00:00:48,740 --> 00:00:51,810
consultas hay por segundo,
actualizaciones por segundo y

24
00:00:51,810 --> 00:00:53,220
"flushes" por segundo.

25
00:00:53,220 --> 00:00:57,550
La mayoría de personas están
más interesadas o encuentran

26
00:00:57,550 --> 00:01:01,330
más interesante de este reporte,
el porcentaje de índices

27
00:01:01,330 --> 00:01:03,620
ausentes.

28
00:01:03,620 --> 00:01:08,250
El porcentaje de índices ausentes,
esto es en realidad la tasa de fallos

29
00:01:08,250 --> 00:01:09,730
para el índice en memoria.

30
00:01:09,730 --> 00:01:12,180
Por lo tanto, no es si
estás usando o no un índice.

31
00:01:12,180 --> 00:01:15,590
Es cuando se accede a un
índice, si impacta o no

32
00:01:15,590 --> 00:01:18,380
en memoria o si tiene
que ir al disco.

33
00:01:18,380 --> 00:01:21,050
Porque, como hemos comentado
anteriormente, tener tu índice en

34
00:01:21,050 --> 00:01:23,080
memoria va a ser
vital en términos de

35
00:01:23,080 --> 00:01:24,530
rendimiento en Mongo.

36
00:01:24,530 --> 00:01:28,460
Porque si no puedes conseguir que
tu índice esté en memoria, entonces

37
00:01:28,460 --> 00:01:29,330
vas a tener un gran problema.

38
00:01:29,330 --> 00:01:31,940
Así que te está diciendo si tu
índice está en memoria o no.

39
00:01:31,940 --> 00:01:34,090
Y un montón de personas echará
un vistazo a esto para averiguar

40
00:01:34,090 --> 00:01:36,170
si obtienen buen rendimiento
o no en un alto nivel.

41
00:01:36,170 --> 00:01:37,330
Pero hay que ser un poco

42
00:01:37,330 --> 00:01:39,910
cuidadoso con esto porque--

43
00:01:39,910 --> 00:01:41,540
te mostraré--

44
00:01:41,540 --> 00:01:45,700
en el caso donde tuvimos estos
dos programas, realizamos "python

45
00:01:45,700 --> 00:01:47,690
students.py" que le faltan
los índices adecuados.

46
00:01:47,690 --> 00:01:50,550
Esta cosa está bastante lenta.

47
00:01:50,550 --> 00:01:55,820
Y vamos a ejecutar "mongostat" y
permíteme mostrarte esto aquí.

48
00:01:55,820 --> 00:01:59,520
Dice "locked db index miss
percentage" justo aquí.

49
00:01:59,520 --> 00:02:00,350
Esta es la segunda línea.

50
00:02:00,350 --> 00:02:02,450
Esto es un cero.

51
00:02:02,450 --> 00:02:04,270
No nos está faltando ningún índice.

52
00:02:04,270 --> 00:02:05,585
Vaya, ¿no nos está
faltando ningún índice?

53
00:02:05,585 --> 00:02:07,530
Eso no tiene ningún sentido.

54
00:02:07,530 --> 00:02:09,150
Y la razón por la que no nos está
faltando ningún índice, por supuesto-

55
00:02:09,150 --> 00:02:10,270
es cierto--

56
00:02:10,270 --> 00:02:12,310
es que este programa no
está usando un índice.

57
00:02:12,310 --> 00:02:15,130
Este programa está simplemente
escaneando la colección

58
00:02:15,130 --> 00:02:16,320
una y otra vez.

59
00:02:16,320 --> 00:02:19,150
Así que no nos falta un índice.

60
00:02:19,150 --> 00:02:22,360
Así que "mongostat", que es muy
interesante en grandes sistemas

61
00:02:22,360 --> 00:02:25,190
en ejecución porque usualmente
te quedarás sin memoria para

62
00:02:25,190 --> 00:02:28,880
tus índices, pero este programa no
tiene ni siquiera que usar un índice.

63
00:02:28,880 --> 00:02:31,240
Así que por lo tanto, esto
no te dice nada interesante.

64
00:02:31,240 --> 00:02:32,840
Lo que es más interesante,
por supuesto, es que hubo

65
00:02:32,840 --> 00:02:35,900
consultas lentas y que todo el
tiempo en la base de datos se

66
00:02:35,900 --> 00:02:37,180
gastó en aquella colección.

67
00:02:37,180 --> 00:02:39,230
Ahora vamos a ejecutar el otro
programa que sabemos que funciona

68
00:02:39,230 --> 00:02:43,080
bien y veamos lo que nos dice.

69
00:02:43,080 --> 00:02:45,350
Eso está "volando".

70
00:02:45,350 --> 00:02:50,940
Ahora vamos a ejecutar "mongostat"
allí y vemos lo que dice.

71
00:02:50,940 --> 00:02:52,550
Y aquí--

72
00:02:52,550 --> 00:02:53,620
una vez más, está enredado.

73
00:02:53,620 --> 00:02:55,700
Pero esta es la línea
de aquí--

74
00:02:55,700 --> 00:03:02,020
dice "idx miss", no nos
hace falta ningún índice.

75
00:03:02,020 --> 00:03:02,990
No entiendo.

76
00:03:02,990 --> 00:03:04,680
¿Cómo no nos puede estar
faltando el índice?

77
00:03:04,680 --> 00:03:05,860
Bueno, la razón es
que al programa no le

78
00:03:05,860 --> 00:03:06,640
está faltando el índice.

79
00:03:06,640 --> 00:03:09,970
Este programa tiene un
índice que tiene--

80
00:03:09,970 --> 00:03:12,330
aprendimos cómo obtener
el tamaño de un índice--

81
00:03:12,330 --> 00:03:14,540
creo que tiene uno o dos gigas.

82
00:03:14,540 --> 00:03:15,800
Si puedes fijarte en el monitor
de actividad para ver qué tanto

83
00:03:15,800 --> 00:03:18,090
pesa Mongo en este
momento, hagamos eso.

84
00:03:18,090 --> 00:03:21,360
Dice que pesa 2.85 gigas.

85
00:03:21,360 --> 00:03:22,740
Y "mongostat"
también te lo dice.

86
00:03:22,740 --> 00:03:25,050
Ves, "mongostat"
te dice que hay 2.85

87
00:03:25,050 --> 00:03:27,290
gigas de datos residentes.

88
00:03:27,290 --> 00:03:29,570
Y ésta es una Mac que
tiene 12 gigas de memoria,

89
00:03:29,570 --> 00:03:31,850
así que no es un problema.

90
00:03:31,850 --> 00:03:35,360
Esto no nos llevará a ningún
lugar para poder mejorar

91
00:03:35,360 --> 00:03:36,450
ese programa.

92
00:03:36,450 --> 00:03:38,830
Ahora, la realidad es que
no sabes cómo mejorar ese

93
00:03:38,830 --> 00:03:40,750
programa excepto por hacer
algo algorítmicamente

94
00:03:40,750 --> 00:03:43,390
inteligente porque está impactando
al índice todo el tiempo.

95
00:03:43,390 --> 00:03:46,910
Pero será difícil para mí
mostrarte un programa que

96
00:03:46,910 --> 00:03:50,150
va a necesitar un índice en mi
máquina de 12 gigabytes a menos

97
00:03:50,150 --> 00:03:52,770
que deliberadamente cree
algo que es descomunal y

98
00:03:52,770 --> 00:03:53,920
que deliberadamente lo necesite.

99
00:03:53,920 --> 00:03:56,330
Si vas a la documentación,
puedes ver algún "snapshot"

100
00:03:56,330 --> 00:03:59,180
de grandes sistemas en producción
que le falten algunos índices.

101
00:03:59,180 --> 00:04:01,220
Pero yo sólo deseo que
sepas de este comando

102
00:04:01,220 --> 00:04:03,950
"mongostat" que puede ser
usado en un alto nivel de tu

103
00:04:03,950 --> 00:04:07,430
sistema para ver el rendimiento
general de tu instalación de

104
00:04:07,430 --> 00:04:08,680
Mongo.

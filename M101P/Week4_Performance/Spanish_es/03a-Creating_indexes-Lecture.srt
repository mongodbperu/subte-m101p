1
00:00:00,000 --> 00:00:00,240

2
00:00:00,240 --> 00:00:00,670
Bien.

3
00:00:00,670 --> 00:00:05,040
Ahora, me gustaría enseñarte
una colección grande y el

4
00:00:05,040 --> 00:00:07,930
efecto que la indexación puede tener
en el rendimiento.

5
00:00:07,930 --> 00:00:10,520
Voy a iniciar el shell
Mongo aquí, y voy a

6
00:00:10,520 --> 00:00:18,430
usar la base de datos "school" y,
en particular, la colección

7
00:00:18,430 --> 00:00:19,110
"students".

8
00:00:19,110 --> 00:00:22,220
Ahora, esto es similar
a lo que teníamos en

9
00:00:22,220 --> 00:00:24,340
las lecciones anteriores.

10
00:00:24,340 --> 00:00:26,150
Te enseñaré un documento
de la colección.

11
00:00:26,150 --> 00:00:30,870
Puedes ver que tenemos aquí un
"student_id" por cada registro.

12
00:00:30,870 --> 00:00:33,000
Y también hay, en realidad,
un "_id" que es

13
00:00:33,000 --> 00:00:34,700
un ObjectId BSON.

14
00:00:34,700 --> 00:00:36,550
Y luego hay un
array "scores".

15
00:00:36,550 --> 00:00:39,030
Y hay un campo "class"
por cada estudiante.

16
00:00:39,030 --> 00:00:43,320
Ahora, he insertado 10 millones
de registros en esta

17
00:00:43,320 --> 00:00:44,510
colección.

18
00:00:44,510 --> 00:00:46,430
Y éste es un equipo
bastante rápido.

19
00:00:46,430 --> 00:00:48,410
Es un iMac nuevo.

20
00:00:48,410 --> 00:00:52,720
En realidad tiene una unidad
de estado sólido y un montón de memoria.

21
00:00:52,720 --> 00:00:54,580
Y he estado jugando con la
colección así que probablemente

22
00:00:54,580 --> 00:00:55,940
esté cacheado en memoria.

23
00:00:55,940 --> 00:00:59,000
Así que veamos qué lento es
encontrar algo en medio

24
00:00:59,000 --> 00:01:01,990
de la colección o
en cualquier lugar de la colección.

25
00:01:01,990 --> 00:01:05,610
Echemos un vistazo a
"db.students.find".

26
00:01:05,610 --> 00:01:10,890
Y echemos un vistazo al
"student_id" 5.

27
00:01:10,890 --> 00:01:12,610
"student_id" 5 debería aparecer
muy rápido desde la

28
00:01:12,610 --> 00:01:13,730
colección.

29
00:01:13,730 --> 00:01:18,290
Pero como estoy usando "find"
y no "findOne" --

30
00:01:18,290 --> 00:01:21,460
lo siento por ese pequeño error.

31
00:01:21,460 --> 00:01:24,180
Como estoy usando "find" y no
"findOne", incluso aunque

32
00:01:24,180 --> 00:01:28,390
va a encontrar ese registro muy
pronto en el proceso,

33
00:01:28,390 --> 00:01:32,260
le llevó un par de segundos
encontrar el objeto,

34
00:01:32,260 --> 00:01:33,940
dos o tres segundos.

35
00:01:33,940 --> 00:01:37,920
Ahora si hiciera un "findOne" donde
la base de datos se pudiera satisfacer

36
00:01:37,920 --> 00:01:42,130
por el primero que 
encuentra, entonces verás

37
00:01:42,130 --> 00:01:44,690
que fue realmente rápido,
muy rápido.

38
00:01:44,690 --> 00:01:51,500
Y si hicera un "findOne" sobre el
registro cinco millones, cinco,

39
00:01:51,500 --> 00:01:54,850
uno, dos, tres, cuatro,
cinco, seis, eso

40
00:01:54,850 --> 00:01:55,860
sería bastante lento.

41
00:01:55,860 --> 00:01:58,770
Porque tiene que ir a través
de la colección entera o la mitad

42
00:01:58,770 --> 00:02:00,850
de la colección para el "findOne".

43
00:02:00,850 --> 00:02:03,920
Y si hago un "find", que 
siempre va a buscar en la

44
00:02:03,920 --> 00:02:06,370
colección completa porque podría
haber más de uno,

45
00:02:06,370 --> 00:02:08,289
vamos a ver el
caso más lento de nuevo.

46
00:02:08,289 --> 00:02:10,970
Tiene que ir a través de la colección
completa para asegurar

47
00:02:10,970 --> 00:02:13,520
que no hay más
que un registro con

48
00:02:13,520 --> 00:02:16,440
"student_id" cinco millones.

49
00:02:16,440 --> 00:02:17,980
Digamos que quisiéramos
poner un índice sobre

50
00:02:17,980 --> 00:02:18,930
esto y hacerlo más rápido.

51
00:02:18,930 --> 00:02:20,320
Podemos hacerlo.

52
00:02:20,320 --> 00:02:21,200
Así es como
vamos a hacerlo.

53
00:02:21,200 --> 00:02:27,000
Vamos a llamar al
comando "ensureIndex".

54
00:02:27,000 --> 00:02:32,090
Y vamos a pasarle los
campos, la clave, sobre los que nos

55
00:02:32,090 --> 00:02:35,010
gustaría indexar.

56
00:02:35,010 --> 00:02:37,360
Y vamos a decirle 
que queremos hacerlo en

57
00:02:37,360 --> 00:02:39,180
orden ascendente.

58
00:02:39,180 --> 00:02:42,590
Así que volvamos a
esto de forma que puedas ver

59
00:02:42,590 --> 00:02:43,972
cada una de las partes.

60
00:02:43,972 --> 00:02:49,530
"db.students" es el nombre de la 
colección, "ensureIndex", y luego

61
00:02:49,530 --> 00:02:51,020
se pide generar el
índice sobre "student_id"

62
00:02:51,020 --> 00:02:53,250
y hacerlo ascendentemente.

63
00:02:53,250 --> 00:02:54,440
Así que vamos a hacer
eso en tiempo real.

64
00:02:54,440 --> 00:02:56,060
Vamos a esperar y ver
cuánto tarda en indexar

65
00:02:56,060 --> 00:02:58,070
esos 10 millones de filas.

66
00:02:58,070 --> 00:03:01,310
Ahora, justo ahora la base de datos está
avanzando y 

67
00:03:01,310 --> 00:03:03,940
examinando cada fila
individual, y está construyendo un

68
00:03:03,940 --> 00:03:05,830
índice por cada fila individual.

69
00:03:05,830 --> 00:03:07,480
Por lo que esto podría llevar
un par de minutos.

70
00:03:07,480 --> 00:03:10,890
Simplemente vamos a saltarnos esto
y esperar en el vídeo

71
00:03:10,890 --> 00:03:12,600
hasta llegar al final del proceso.

72
00:03:12,600 --> 00:03:14,500
Por lo que no tienes
que esperar a que acabe.

73
00:03:14,500 --> 00:03:16,160
OK, ahora ya ha pasado algún 
tiempo, y el

74
00:03:16,160 --> 00:03:17,570
índice se ha creado.

75
00:03:17,570 --> 00:03:19,050
En total, llevó alrededor
de dos o tres minutos

76
00:03:19,050 --> 00:03:20,220
crear ese índice.

77
00:03:20,220 --> 00:03:22,700
Veamos cuánto más rápido
es consultar la base de datos

78
00:03:22,700 --> 00:03:24,550
ahora que el índice está creado.

79
00:03:24,550 --> 00:03:26,520
Por lo que vamos al 
mismo "find" que hicimos

80
00:03:26,520 --> 00:03:28,600
antes, el mismo comando "find".

81
00:03:28,600 --> 00:03:30,570
Vamos a buscar 
un documento con

82
00:03:30,570 --> 00:03:32,350
"student_id" cinco millones.

83
00:03:32,350 --> 00:03:33,820
Vamos a imprimirlo
indentado.

84
00:03:33,820 --> 00:03:37,120
Y esperamos que vaya al
índice porque "student_id" era

85
00:03:37,120 --> 00:03:38,450
la clave en el índice.

86
00:03:38,450 --> 00:03:40,700
Así que ejecutemos eso.

87
00:03:40,700 --> 00:03:42,120
¡Vaya!, fue rápido.

88
00:03:42,120 --> 00:03:44,280
Podemos ver que nos respondió
inmediatamente.

89
00:03:44,280 --> 00:03:46,920
Antes que tuviéramos el índice, tardaba
hasta cinco o seis segundos

90
00:03:46,920 --> 00:03:47,530
en hacer esta consulta.

91
00:03:47,530 --> 00:03:50,280
Pero ahora que tenemos un
índice, es inmediato.

92
00:03:50,280 --> 00:03:53,940
Y puedes ver que si lo llamamos
con siete millones,

93
00:03:53,940 --> 00:03:55,650
es también extremadamente rápido.

94
00:03:55,650 --> 00:03:57,880
Pero si hacemos una consulta que
no pueda usar el índice, como algo

95
00:03:57,880 --> 00:04:02,170
que pida todo
con "class" --

96
00:04:02,170 --> 00:04:04,430
bueno, podrías decir "class"
siete millones, no hay ninguna

97
00:04:04,430 --> 00:04:05,410
clase con siete millones.

98
00:04:05,410 --> 00:04:07,930
Pero eso no importa, porque
no puede saberlo.

99
00:04:07,930 --> 00:04:12,290
Y puedes ver que va a 
tardar mucho tiempo en decirnos

100
00:04:12,290 --> 00:04:13,590
que no hay nada.

101
00:04:13,590 --> 00:04:16,450
Así que los índices son realmente importantes
en términos del

102
00:04:16,450 --> 00:04:18,610
rendimiento que obtenemos de
la base de datos.

103
00:04:18,610 --> 00:04:21,760
Echemos de nuevo un vistazo al 
comando "ensureIndex".

104
00:04:21,760 --> 00:04:24,250
En ese comando "ensureIndex",
lo llamamos con

105
00:04:24,250 --> 00:04:25,680
"student_id : 1".

106
00:04:25,680 --> 00:04:28,290
Ahora, si quisiéramos incluir
"class", podríamos

107
00:04:28,290 --> 00:04:31,350
incluirlo de esta manera.

108
00:04:31,350 --> 00:04:34,210
Y en este caso, es un
índice compuesto que va a

109
00:04:34,210 --> 00:04:37,010
ser construido por 
"student_id, class".

110
00:04:37,010 --> 00:04:40,160
Y he decidido hacer 
"student_id" ascendente y 

111
00:04:40,160 --> 00:04:41,830
"class" descendente.

112
00:04:41,830 --> 00:04:43,900
Así que ascendente frente a
descendente.

113
00:04:43,900 --> 00:04:44,750
Pero no hay mucha

114
00:04:44,750 --> 00:04:46,160
diferencia cuando estás buscando.

115
00:04:46,160 --> 00:04:48,000
Pero sí tiene una gran diferencia
cuando estás ordenando.

116
00:04:48,000 --> 00:04:50,530
Porque si la base de datos va a
usar el índice para el

117
00:04:50,530 --> 00:04:53,470
ordenamiento, entonces necesita estar
en el orden correcto.

118
00:04:53,470 --> 00:04:56,830
Ahora, si tuviéramos otras subpartes
de este documento que quisiéramos

119
00:04:56,830 --> 00:04:58,180
indexar, podríamos continuar.

120
00:04:58,180 --> 00:05:00,650
Podríamos hacer un índice de tres
partes si quisiéramos.

121
00:05:00,650 --> 00:05:03,310
Por supuesto, ocupa más espacio
y tarda un poco más en

122
00:05:03,310 --> 00:05:05,080
construirlo cuando haces escrituras.

123
00:05:05,080 --> 00:05:08,540
Ahora, en términos de uso del
índice, si tuviera un índice sobre

124
00:05:08,540 --> 00:05:12,360
"student_id, class" y
especificara sólo "class",

125
00:05:12,360 --> 00:05:14,250
bien, no podría usar el índice
porque necesita ser un

126
00:05:14,250 --> 00:05:16,330
subconjunto por la izquierda del campo.

127
00:05:16,330 --> 00:05:20,130
Si especificara "student_id" y
"class", podría usar el índice.

128
00:05:20,130 --> 00:05:22,190
Y si especificara sólo
"student_id",

129
00:05:22,190 --> 00:05:23,920
podría usar ese índice.

130
00:05:23,920 --> 00:05:25,670
OK, hagamos un cuestionario.

131
00:05:25,670 --> 00:05:28,880
Por favor, escriba el comando del shell
Mongo para añadir un índice

132
00:05:28,880 --> 00:05:33,760
a una colección llamada "students"
siendo la clave del índice

133
00:05:33,760 --> 00:05:35,430
"class, student_name".

134
00:05:35,430 --> 00:05:37,210
Ahora, esto es muy similar a
lo que acabo de enseñarte.

135
00:05:37,210 --> 00:05:39,060
Pero sólo quiero que
practiques cómo se escriben

136
00:05:39,060 --> 00:05:41,500
estos comandos "ensureIndex" para
que te acostumbres a hacerlo

137
00:05:41,500 --> 00:05:42,750
en el shell.
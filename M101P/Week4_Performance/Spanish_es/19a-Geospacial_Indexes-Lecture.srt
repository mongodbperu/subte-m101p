1
00:00:00,000 --> 00:00:01,570
El siguiente tema que quiero
discutir contigo

2
00:00:01,570 --> 00:00:04,050
es índices geoespaciales.

3
00:00:04,050 --> 00:00:06,930
Y los índices geoespaciales
te permiten encontrar

4
00:00:06,930 --> 00:00:08,720
cosas según su posición.

5
00:00:08,720 --> 00:00:11,270
El primer modelo que vamos a
discutir es un modelo

6
00:00:11,270 --> 00:00:14,080
bidimensional, y luego pasaremos
a un modelo tridimensional en

7
00:00:14,080 --> 00:00:15,290
otra lección.

8
00:00:15,290 --> 00:00:19,060
En un mundo 2D, tenemos
un plano cartesiano,

9
00:00:19,060 --> 00:00:21,840
coordenadas "x, y", y podrías
tener un montón de objetos

10
00:00:21,840 --> 00:00:23,300
diferentes en ese mundo.

11
00:00:23,300 --> 00:00:27,140
Por ejemplo, podrías tener
un restaurante aquí y una

12
00:00:27,140 --> 00:00:30,680
peluquería aquí y una
tienda aquí y una ferretería

13
00:00:30,680 --> 00:00:31,750
aquí.

14
00:00:31,750 --> 00:00:36,550
Y luego, también tienes,
normalmente, una persona justo aquí

15
00:00:36,550 --> 00:00:40,340
con sus pequeñas coordenadas,
"x, y".

16
00:00:40,340 --> 00:00:42,370
Y lo que quieres saber
es, bien, ¿qué hay

17
00:00:42,370 --> 00:00:44,470
cerca de esta persona?

18
00:00:44,470 --> 00:00:46,290
¿Cuáles son los establecimientos
que están cercanos a esta

19
00:00:46,290 --> 00:00:49,570
persona, quizá de
un cierto tipo?

20
00:00:49,570 --> 00:00:51,690
Y ¿cómo averiguas
dónde están?

21
00:00:51,690 --> 00:00:54,470
La manera de hacer esto es,
para poder hacer búsquedas

22
00:00:54,470 --> 00:00:57,730
basadas en la localización, lo primero de
todo, tu documento necesita

23
00:00:57,730 --> 00:01:01,670
tener algún tipo de posición "x, y"
almacenada.

24
00:01:01,670 --> 00:01:04,964
Simplemente voy a llamarlo
"location", pero para ser claro,

25
00:01:04,964 --> 00:01:06,220
es sólo mi nombre.

26
00:01:06,220 --> 00:01:10,720
Y en eso, almacenas un array
de valores que son las

27
00:01:10,720 --> 00:01:12,330
coordenadas "x, y".

28
00:01:12,330 --> 00:01:17,770
Y una vez que haces eso,
también necesitas usar "ensureIndex"

29
00:01:17,770 --> 00:01:20,370
para decirle a la base de datos que éstas
son posiciones que necesitan

30
00:01:20,370 --> 00:01:22,830
ser indexadas para que
puedas buscarlas.

31
00:01:22,830 --> 00:01:27,700
Y haces eso especificando
que quieres que exista

32
00:01:27,700 --> 00:01:30,290
un índice sobre "location" --

33
00:01:30,290 --> 00:01:32,280
de nuevo, sólo mi palabra --

34
00:01:32,280 --> 00:01:34,720
y que ese índice es de tipo "2d".

35
00:01:34,720 --> 00:01:36,430
Y ése es un tipo reservado.

36
00:01:36,430 --> 00:01:39,070
Le dice a la base de datos que
es un índice geoespacial

37
00:01:39,070 --> 00:01:40,300
bidimensional.

38
00:01:40,300 --> 00:01:42,340
Si hay otros trozos
de información que quieres

39
00:01:42,340 --> 00:01:44,240
que formen parte del índice,
esto es, un índice compuesto,

40
00:01:44,240 --> 00:01:44,880
puedes añadirlos.

41
00:01:44,880 --> 00:01:47,810
Por lo que si hay un "store_type" o
algo así o un "establishment_type",

42
00:01:47,810 --> 00:01:50,990
puedes incluirlos,
ascendentemente.

43
00:01:50,990 --> 00:01:54,240
Eso es opcional, pero puede
ser un índice compuesto.

44
00:01:54,240 --> 00:01:56,500
Ahora, la última parte de esto es
que vas a necesitar algún

45
00:01:56,500 --> 00:01:59,170
tipo de operador de consulta
para trabajar con esto.

46
00:01:59,170 --> 00:02:01,490
Y hay unos cuantos operadores
de consulta diferentes, pero voy a

47
00:02:01,490 --> 00:02:03,880
hablarte sólo de uno de 
ellos justo ahora, que es el

48
00:02:03,880 --> 00:02:05,970
operador "$near".

49
00:02:05,970 --> 00:02:10,350
Y la forma en que harías un
"find" con esto, dirías, OK,

50
00:02:10,350 --> 00:02:17,580
encuentra todas las ubicaciones que
están "$near: " y luego

51
00:02:17,580 --> 00:02:20,830
esto debería ser las coordenadas
"x, y" donde estaba

52
00:02:20,830 --> 00:02:22,510
esa persona.

53
00:02:22,510 --> 00:02:25,740
Así que lo repasamos de nuevo,
debes tener algo en el

54
00:02:25,740 --> 00:02:28,460
documento justo aquí que
especifique las

55
00:02:28,460 --> 00:02:28,670
coordenadas "x, y".

56
00:02:28,670 --> 00:02:32,320
Necesitas tener un índice que le
diga a la base de datos que hay

57
00:02:32,320 --> 00:02:34,750
unas coordenadas "x, y" almacenadas
en el documento.

58
00:02:34,750 --> 00:02:36,230
Le pasas "type: '2d'".

59
00:02:36,230 --> 00:02:40,240
Y luego en tu "find", puedes
llamar al operador "$near" y

60
00:02:40,240 --> 00:02:44,800
decir, oh, encuéntrame todas las
ubicaciones que están cerca de estas

61
00:02:44,800 --> 00:02:47,210
coordenadas "x, y" 
en particular, y la

62
00:02:47,210 --> 00:02:49,610
base de datos las devolverá
ordenadas por

63
00:02:49,610 --> 00:02:51,920
distancia creciente.

64
00:02:51,920 --> 00:02:54,390
Y hablando prácticamente, la 
forma en que se usa esto a menudo es

65
00:02:54,390 --> 00:02:55,070
a través de un "limit".

66
00:02:55,070 --> 00:02:59,360
Por lo que dirías "limit(20)", y entonces
me daría, digamos,

67
00:02:59,360 --> 00:03:02,850
todas las tiendas o almacenes
que estuvieran más cerca de

68
00:03:02,850 --> 00:03:06,310
esta persona que está en
las coordenadas "x,y", limitándolas

69
00:03:06,310 --> 00:03:07,550
a 20 de ellas.

70
00:03:07,550 --> 00:03:10,320
Veamos un pequeño
ejemplo en el shell.

71
00:03:10,320 --> 00:03:14,540
Bien, tengo una pequeña
colección aquí que se llama

72
00:03:14,540 --> 00:03:17,170
"stores", y tiene tres
establecimientos.

73
00:03:17,170 --> 00:03:19,630
Puedes ver los tres
establecimientos justo aquí.

74
00:03:19,630 --> 00:03:21,650
Son "Rubys" --

75
00:03:21,650 --> 00:03:24,560
es una peluquería en la posición
"40, 74" --

76
00:03:24,560 --> 00:03:27,670
y luego, "ACE Hardware", una
ferretería, en la posición

77
00:03:27,670 --> 00:03:31,980
"40, -74", y luego,
"Tickle Candy", una tienda de

78
00:03:31,980 --> 00:03:33,720
alimentos, en esta posición.

79
00:03:33,720 --> 00:03:36,520
He añadido un índice usando
este comando --

80
00:03:36,520 --> 00:03:37,440
permíteme que te lo enseñe --

81
00:03:37,440 --> 00:03:40,810
"db.stores.ensureIndex(
{location: '2D'})".

82
00:03:40,810 --> 00:03:43,290
Y de nuevo, lo llamé "location",
pero no es necesario que

83
00:03:43,290 --> 00:03:44,340
que se llame "location".

84
00:03:44,340 --> 00:03:46,820
Puedes llamarlo como
quieras, "loc" o

85
00:03:46,820 --> 00:03:47,860
cualquier cosa que prefieras.

86
00:03:47,860 --> 00:03:49,730
Y luego "type" ascendentemente.

87
00:03:49,730 --> 00:03:52,090
Dije, oh, ¿no sería bueno
también poder filtrar

88
00:03:52,090 --> 00:03:55,430
y ordenar por el tipo de
establecimiento que es?, así que

89
00:03:55,430 --> 00:03:56,660
añadí eso.

90
00:03:56,660 --> 00:03:59,900
Puedes ver todos los índices
existentes ahí.

91
00:03:59,900 --> 00:04:03,330
Así puedes ver que hay
dos índices sobre esta

92
00:04:03,330 --> 00:04:06,010
colección, el índice por defecto
sobre "_id" y el

93
00:04:06,010 --> 00:04:10,360
segundo, un índice bidimensional,
un índice compuesto donde

94
00:04:10,360 --> 00:04:11,810
"location" es la primera
parte de él.

95
00:04:11,810 --> 00:04:13,830
Y luego, "type" es la
segunda parte del índice.

96
00:04:13,830 --> 00:04:15,830
Y éste es el nombre
del índice.

97
00:04:15,830 --> 00:04:19,040
Y para hacer una consulta, aquí tienes
una consulta típica.

98
00:04:19,040 --> 00:04:26,920
Encuéntrame todos los documentos cuyo
"location" esté próximo a "50, 50"

99
00:04:26,920 --> 00:04:29,040
y vas a devolvérmelos
por orden de

100
00:04:29,040 --> 00:04:30,640
distancia creciente.

101
00:04:30,640 --> 00:04:34,730
Así que hago eso, y entonces me muestra
los tres que encuentra.

102
00:04:34,730 --> 00:04:38,620
Dice que el que está más
cerca a "50, 50" es "40, 74",

103
00:04:38,620 --> 00:04:43,380
y luego "40.2, -74" es el siguiente
más cercano, y luego "41, -75",

104
00:04:43,380 --> 00:04:46,850
lo cual tiene sentido
para mí simplemente

105
00:04:46,850 --> 00:04:48,350
echando un vistazo realmente rápido.

106
00:04:48,350 --> 00:04:50,640
Bien, hagamos un cuestionario.

107
00:04:50,640 --> 00:04:51,710
Aquí está el cuestionario.

108
00:04:51,710 --> 00:04:54,590
Supongamos que tienes un índice
geoespacial 2D definido sobre

109
00:04:54,590 --> 00:04:57,400
la clave "location" en la
colección "places".

110
00:04:57,400 --> 00:04:59,920
Escribe una consulta que encuentre los
tres lugares más cercanos, los

111
00:04:59,920 --> 00:05:03,150
tres documentos más cercanos, a la
localización "74, 140".

112
00:05:03,150 --> 00:05:04,540
Por favor, escríbela ahí.

113
00:05:04,540 --> 00:05:05,790
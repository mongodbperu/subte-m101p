1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:03,770
Aggregation utiliza un
"pipeline" en MongoDB.

3
00:00:03,770 --> 00:00:06,350
Y si estás familiarizado con
el mundo Unix, probablemente

4
00:00:06,350 --> 00:00:08,119
sabes a qué se parecen los "pipes".

5
00:00:08,119 --> 00:00:13,060
Por ejemplo, si deseo ver
en un directorio y encontrar

6
00:00:13,060 --> 00:00:16,140
el tamaño de todos los
subdirectorios en él.

7
00:00:16,140 --> 00:00:22,840
"du -s * | sort -n",
eso automáticamente ordenaría

8
00:00:22,840 --> 00:00:24,570
el tamaño de los
subdirectorios y los imprimirá

9
00:00:24,570 --> 00:00:25,690
en mi pantalla.

10
00:00:25,690 --> 00:00:28,280
Así que eso es el mundo de los
"pipes" de Unix y tenemos una idea

11
00:00:28,280 --> 00:00:29,900
similar de un "pipeline" aquí.

12
00:00:29,900 --> 00:00:32,030
En la parte superior
está tu colección.

13
00:00:32,030 --> 00:00:34,090
Y por ejemplo, esa colección
"products" es enviada

14
00:00:34,090 --> 00:00:35,920
documento por documento.

15
00:00:35,920 --> 00:00:37,270
Los documentos son conducidos
a través de los "pipes" por

16
00:00:37,270 --> 00:00:39,040
este "pipeline" de procesamiento.

17
00:00:39,040 --> 00:00:41,490
Y estos pasan por
una serie de fases.

18
00:00:41,490 --> 00:00:43,720
Y luego, eventualmente conseguimos
el conjunto de resultados.

19
00:00:43,720 --> 00:00:46,990
Ahora, la etapa uno que te mostré,
es la etapa "$group", que va

20
00:00:46,990 --> 00:00:48,710
hacer las agregaciones.

21
00:00:48,710 --> 00:00:50,040
Pero hay un montón
de otras etapas.

22
00:00:50,040 --> 00:00:53,660
Hay una potencial fase de ordenamiento
y una fase de filtro de coincidencia

23
00:00:53,660 --> 00:00:54,480
para los documentos.

24
00:00:54,480 --> 00:00:56,680
Voy a repasar brevemente
cada uno de ellos para explicar

25
00:00:56,680 --> 00:00:57,660
cómo funciona.

26
00:00:57,660 --> 00:01:00,170
Sin embargo estas etapas
pueden aparecer varias

27
00:01:00,170 --> 00:01:02,040
veces en el "pipeline".

28
00:01:02,040 --> 00:01:05,379
Si recuerdas, cuando te mostré
ese comando de agregación,

29
00:01:05,379 --> 00:01:09,600
había un array en la
llamada a la función.

30
00:01:09,600 --> 00:01:11,680
Y la razón para que haya un
array, es que cada uno de los

31
00:01:11,680 --> 00:01:15,270
elementos en aquel array es una
fase del "pipeline" que va a

32
00:01:15,270 --> 00:01:18,390
transformar esa colección.

33
00:01:18,390 --> 00:01:21,520
Por lo que vamos a pasar por
las distintas posibles etapas

34
00:01:21,520 --> 00:01:24,210
de un "pipeline" de agregación
en el alto nivel.

35
00:01:24,210 --> 00:01:27,610
Y luego, vamos a profundizar
en cada uno, individualmente,

36
00:01:27,610 --> 00:01:29,820
y luego te voy a
mostrar lo que hace.

37
00:01:29,820 --> 00:01:30,180
Muy bien.

38
00:01:30,180 --> 00:01:33,330
El primero es "$project".

39
00:01:33,330 --> 00:01:37,030
Y no tiene que ser el
primero, pero a menudo es

40
00:01:37,030 --> 00:01:38,060
el primero.

41
00:01:38,060 --> 00:01:41,600
Y un "$project" va a
seleccionar las claves

42
00:01:41,600 --> 00:01:42,740
en las que estás interesado.

43
00:01:42,740 --> 00:01:44,790
También podría volver a
formar el documento.

44
00:01:44,790 --> 00:01:47,150
Y voy mostrarte cómo
funciona, si deseas cambiar

45
00:01:47,150 --> 00:01:48,630
su forma un poco--

46
00:01:48,630 --> 00:01:50,450
extrayendo algo de un
documento jerárquico y

47
00:01:50,450 --> 00:01:51,636
poniéndolo en un alto
nivel, puedes hacerlo

48
00:01:51,636 --> 00:01:53,050
con "$project".

49
00:01:53,050 --> 00:01:53,870
Ahora "$project"--

50
00:01:53,870 --> 00:01:57,210
para cada documento que
"$project" ve,

51
00:01:57,210 --> 00:01:58,390
éste saca otro documento.

52
00:01:58,390 --> 00:02:00,180
Por lo que es "uno a uno".

53
00:02:00,180 --> 00:02:03,580
Si ve 10 documentos,
produce 10 documentos.

54
00:02:03,580 --> 00:02:06,226
El siguiente es "$match".

55
00:02:06,226 --> 00:02:09,020
Y éstos no tienen que estar en
este orden en el "pipeline".

56
00:02:09,020 --> 00:02:11,080
El "$match" va a filtrar.

57
00:02:11,080 --> 00:02:13,850
Así, por ejemplo, en el que
te mostré en "products", si

58
00:02:13,850 --> 00:02:17,140
sólo estuviera interesado en
productos fabricados por Apple,

59
00:02:17,140 --> 00:02:18,660
podría filtrar al
inicio del "pipeline".

60
00:02:18,660 --> 00:02:21,470
Y asegurar que sólo
encuentre los documentos que

61
00:02:21,470 --> 00:02:24,150
tengan como fabricante
a "Apple".

62
00:02:24,150 --> 00:02:25,760
Eso es lo que
"$match" va a hacer.

63
00:02:25,760 --> 00:02:28,530
Puedes usar "$group", por
supuesto que lo viste.

64
00:02:28,530 --> 00:02:31,500
Y éstas van a ser tus
funciones de agregación.

65
00:02:31,500 --> 00:02:32,790
Ahora, filtrar--

66
00:02:32,790 --> 00:02:34,410
para cada documento
que filtres,

67
00:02:34,410 --> 00:02:35,470
puede ver sólo un subconjunto.

68
00:02:35,470 --> 00:02:39,750
Por ejemplo, podría ver
100 documentos y luego

69
00:02:39,750 --> 00:02:42,170
poodría en realidad
producir 25 documentos.

70
00:02:42,170 --> 00:02:44,770
Con agregación, lo mismo
es cierto porque es

71
00:02:44,770 --> 00:02:45,410
agregación.

72
00:02:45,410 --> 00:02:46,870
Es agrupar por
cierta clave.

73
00:02:46,870 --> 00:02:49,500
No puede producir tantos
documentos como ve.

74
00:02:49,500 --> 00:02:53,640
Llamaré a esto: "n a uno",
ya que reduce el número de

75
00:02:53,640 --> 00:02:55,970
documentos un poco
o puede reducir

76
00:02:55,970 --> 00:02:56,970
el número de documentos.

77
00:02:56,970 --> 00:02:59,510
Y luego hay una
fase "$sort".

78
00:02:59,510 --> 00:03:01,290
Y la fase de ordenamiento
hace exactamente lo que podrías

79
00:03:01,290 --> 00:03:02,760
imaginar-- ordena.

80
00:03:02,760 --> 00:03:03,830
Y eso es "uno a uno".

81
00:03:03,830 --> 00:03:06,590
Todos los documentos que ve,
produce otro documento.

82
00:03:06,590 --> 00:03:08,560
Y luego hay una fase "$skip".

83
00:03:08,560 --> 00:03:10,290
Y la fase "$skip" puede
saltar hacia adelante.

84
00:03:10,290 --> 00:03:12,290
Ésto sólo tiene sentido
después que ordenes.

85
00:03:12,290 --> 00:03:13,675
Y sólo salta.

86
00:03:13,675 --> 00:03:16,740
No sé cómo explicar eso,
aparte de saltar.

87
00:03:16,740 --> 00:03:18,760
Y de nuevo, esto
no es "uno a uno".

88
00:03:18,760 --> 00:03:21,600
Esto es "n a uno" porque, por
supuesto, si saltas hacia delante

89
00:03:21,600 --> 00:03:23,755
10, entonces no vas a
producir todos los documentos.

90
00:03:23,755 --> 00:03:26,140
Vas a producir un subconjunto
de los documentos.

91
00:03:26,140 --> 00:03:27,840
Hay una fase "$limit".

92
00:03:27,840 --> 00:03:29,950
Y esta fase "$limit" va a
limitar el número de

93
00:03:29,950 --> 00:03:31,040
documentos producidos.

94
00:03:31,040 --> 00:03:33,860
De nuevo, esto usualmente
se utiliza con "$skip".

95
00:03:33,860 --> 00:03:36,050
Podrías saltar 10 y luego
limitar para mostrar

96
00:03:36,050 --> 00:03:37,450
tres documentos.

97
00:03:37,450 --> 00:03:41,770
Y normalmente esto va a
limitar el número de

98
00:03:41,770 --> 00:03:45,930
documentos que vienen a través
del "pipeline", de alguna manera.

99
00:03:45,930 --> 00:03:48,590
Son uno, dos, tres,
cuatro, cinco, seis.

100
00:03:48,590 --> 00:03:53,950
Hay un operador más que es
"$unwind", que vamos a

101
00:03:53,950 --> 00:03:56,550
repasar mucho más
completamente luego.

102
00:03:56,550 --> 00:03:58,110
Lo que hace "$unwind" es--

103
00:03:58,110 --> 00:04:00,860
en MongoDB, tenemos estos
documentos que pueden tener

104
00:04:00,860 --> 00:04:03,400
sub arrays dentro de ellos--

105
00:04:03,400 --> 00:04:04,580
datos pre relacionados.

106
00:04:04,580 --> 00:04:07,430
Y lo que "$unwind" hace, es
quitar la relación de los datos.

107
00:04:07,430 --> 00:04:09,850
Puedes imaginar, que si
tenías, digamos, un post

108
00:04:09,850 --> 00:04:16,839
con etiquetas, y las etiquetas
son "sports", "outdoors" y

109
00:04:16,839 --> 00:04:19,860
"summer", lo que "$unwind"
hará es--

110
00:04:19,860 --> 00:04:21,149
cuando encuentra
un documento--

111
00:04:21,149 --> 00:04:22,740
y va a "desovillar" el array
en claves particulares

112
00:04:22,740 --> 00:04:23,450
para cada

113
00:04:23,450 --> 00:04:24,360
etiqueta--

114
00:04:24,360 --> 00:04:28,130
va a producir un
documento para cada uno

115
00:04:28,130 --> 00:04:32,400
de estos subdocumentos con
todo sin repetirlos.

116
00:04:32,400 --> 00:04:36,400
Así que, básicamente, normaliza
los datos, de nuevo, para que

117
00:04:36,400 --> 00:04:39,100
puedas agregarlos más
fácilmente, es lo que hace.

118
00:04:39,100 --> 00:04:40,780
Esto va a crear una
"explosión" de documentos.

119
00:04:40,780 --> 00:04:42,780
Podría tener un documento
con tres claves.

120
00:04:42,780 --> 00:04:45,140
Y podría producir tres
documentos que pasar por la

121
00:04:45,140 --> 00:04:46,380
etapa "$unwind".

122
00:04:46,380 --> 00:04:48,250
Por ello voy a decir, "uno a n".

123
00:04:48,250 --> 00:04:49,260
Vamos a pasar por
lo que hace cada una de

124
00:04:49,260 --> 00:04:50,840
estas etapas.

125
00:04:50,840 --> 00:04:53,340
Quiero señalar que
puedes tener más de una

126
00:04:53,340 --> 00:04:54,370
misma etapa por vez.

127
00:04:54,370 --> 00:04:57,400
Por eso podrías decidir
coincidir algunos documentos.

128
00:04:57,400 --> 00:04:58,880
Puedes luego agruparlos.

129
00:04:58,880 --> 00:05:00,070
Luego podrías usar
"$match" otra vez.

130
00:05:00,070 --> 00:05:01,040
Podrías luego ordenarlos.

131
00:05:01,040 --> 00:05:02,330
Podrías saltar.

132
00:05:02,330 --> 00:05:05,070
Incluso podrías usar "$unwind"
luego una y otra vez, si

133
00:05:05,070 --> 00:05:06,410
deseas hacerlo.

134
00:05:06,410 --> 00:05:07,930
Y te mostraré algunos casos
donde podrías estar

135
00:05:07,930 --> 00:05:08,990
interesado.

136
00:05:08,990 --> 00:05:10,720
Pero, por ahora, sólo
quiero que entiendas que

137
00:05:10,720 --> 00:05:13,430
el sistema de agregación
usa un concepto de "pipeline".

138
00:05:13,430 --> 00:05:15,740
Y que el "pipeline" tiene
varios operadores que puedes

139
00:05:15,740 --> 00:05:16,370
ejecutar con otros documentos.

140
00:05:16,370 --> 00:05:19,490
Y que puedes pensar
conceptualmente como documentos

141
00:05:19,490 --> 00:05:22,470
que vienen del lado izquierdo,
son transformados a través de

142
00:05:22,470 --> 00:05:26,640
éstas etapas y luego obtener
un conjunto resultante de esto.

143
00:05:26,640 --> 00:05:30,180
Y hasta ahora, nos hemos fijado
sólo en el operador de agrupación.

144
00:05:30,180 --> 00:05:31,890
Pero vamos a ir por
todos ellos.

145
00:05:31,890 --> 00:05:32,460
De acuerdo.

146
00:05:32,460 --> 00:05:34,380
Hora de un cuestionario.

147
00:05:34,380 --> 00:05:38,220
Y pienso que este cuestionario
va a ser bastante sencillo.

148
00:05:38,220 --> 00:05:39,660
¿Cuál de las siguientes
etapas están en el

149
00:05:39,660 --> 00:05:40,760
"pipeline" de agregación?

150
00:05:40,760 --> 00:05:42,300
Marca todas las que apliquen.

151
00:05:42,300 --> 00:05:45,100
"Match", "Transpose", "Group",
"Skip", "Limit", "Sort",

152
00:05:45,100 --> 00:05:46,680
"Project" y "Unwind".

153
00:05:46,680 --> 00:05:47,930
Simplemente marca
las que apliquen.

154
00:05:47,930 --> 00:05:48,880

1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:02,029
La siguiente expresión de agregación
que vamos a analizar

3
00:00:02,029 --> 00:00:03,780
es "$addToSet".

4
00:00:03,780 --> 00:00:06,360
"$addToSet" es interesante
porque no hay equivalente

5
00:00:06,360 --> 00:00:09,680
en el mundo
SQL para hacer lo que

6
00:00:09,680 --> 00:00:11,560
permite "$addToSet".

7
00:00:11,560 --> 00:00:14,070
Y déjame que te dé un ejemplo
de cómo funciona.

8
00:00:14,070 --> 00:00:17,560
Volvamos a nuestro
pequeño conjunto de datos

9
00:00:17,560 --> 00:00:19,470
de productos electrónicos.

10
00:00:19,470 --> 00:00:22,460
E imagina que lo que queremos
hacer es averiguar qué

11
00:00:22,460 --> 00:00:25,980
productos vende cada
fabricante.

12
00:00:25,980 --> 00:00:29,890
Por lo que para hacer eso, básicamente
queremos agrupar por fabricante.

13
00:00:29,890 --> 00:00:33,690
Y entonces, por cada
fabricante, queremos 

14
00:00:33,690 --> 00:00:37,260
crear un nuevo array de categorías
de lo que venden.

15
00:00:37,260 --> 00:00:39,050
Y es simplemente como esto.

16
00:00:39,050 --> 00:00:41,710
Aquí estamos usando de nuevo la
base de datos de agregación,

17
00:00:41,710 --> 00:00:43,800
que es donde puse
mi pequeño conjunto de datos.

18
00:00:43,800 --> 00:00:45,670
Tenemos "db.products
.aggregate".

19
00:00:45,670 --> 00:00:47,110
De nuevo estamos agrupando.

20
00:00:47,110 --> 00:00:51,260
Ésa es la fase que estamos invocando
del "pipeline" de agregación.

21
00:00:51,260 --> 00:00:55,310
Y vamos a agrupar sobre
"_id: {'maker': '$manufacturer'}".

22
00:00:55,310 --> 00:00:56,890
"maker" es mi nombre.

23
00:00:56,890 --> 00:00:58,800
"manufacturer" es la pieza clave
de información aquí --

24
00:00:58,800 --> 00:00:59,810
"$manufacturer" --

25
00:00:59,810 --> 00:01:04,010
para sacar el valor del fabricante
de la clave "manufacturer".

26
00:01:04,010 --> 00:01:08,670
Y luego, estamos creando una nueva
clave en el conjunto resultante de documentos,

27
00:01:08,670 --> 00:01:10,810
llamada "categories".

28
00:01:10,810 --> 00:01:14,090
Y estamos usando "$addToSet:
'$category'".

29
00:01:14,090 --> 00:01:15,290
Y si recuerdas,
cada uno de estos

30
00:01:15,290 --> 00:01:17,310
documentos tenía una categoría.

31
00:01:17,310 --> 00:01:19,770
Y esto lo que hará es
construir un nuevo conjunto de

32
00:01:19,770 --> 00:01:22,230
documentos, agrupados
por fabricante.

33
00:01:22,230 --> 00:01:27,420
Y si la categoría no está en
este array de categorías, va

34
00:01:27,420 --> 00:01:28,270
a añadirla.

35
00:01:28,270 --> 00:01:31,240
"$addToSet" la añade sólo si
todavía no está ahí.

36
00:01:31,240 --> 00:01:34,480
Y la respuesta es
similar a esto.

37
00:01:34,480 --> 00:01:38,190
Por lo que esto nos dará documentos
por cada fabricante, a los que 

38
00:01:38,190 --> 00:01:41,300
llamé "maker", como Google fabrica
"tablets", Amazon fabrica

39
00:01:41,300 --> 00:01:43,670
"tablets", Sony fabrica "laptops".

40
00:01:43,670 --> 00:01:46,800
Ellos también fabrican otras cosas,
pero no en mi conjunto de datos.

41
00:01:46,800 --> 00:01:50,320
Samsung fabrica "tablets"
y "cell phones".

42
00:01:50,320 --> 00:01:53,930
Y Apple fabrica "laptops"
y "tablets".

43
00:01:53,930 --> 00:01:55,585
También fabrican "cell phones",
pero no lo puse

44
00:01:55,585 --> 00:01:56,870
en mi conjunto de datos.

45
00:01:56,870 --> 00:01:59,640
Puedes ver cómo funciona,
para que puedas construir un

46
00:01:59,640 --> 00:02:02,690
array, mientras agrupas por
otra clave, como por

47
00:02:02,690 --> 00:02:04,420
ejemplo, "manufacturer".

48
00:02:04,420 --> 00:02:05,660
Hora de hacer un cuestionario.

49
00:02:05,660 --> 00:02:07,650
Ahora vas a escribir
una consulta usando "$addToSet".

50
00:02:07,650 --> 00:02:10,430
Usa la base de datos
de "zip codes" --

51
00:02:10,430 --> 00:02:12,460
la población por "zip code" --

52
00:02:12,460 --> 00:02:14,140
que hemos estado usando en
los últimos problemas.

53
00:02:14,140 --> 00:02:18,040
Puedes verlo en el cuestionario
sobre el uso de "$sum", si

54
00:02:18,040 --> 00:02:19,240
no te es familiar.

55
00:02:19,240 --> 00:02:22,140
Y te enseñé algunos datos
de ese conjunto de datos.

56
00:02:22,140 --> 00:02:24,580
De nuevo, puedes descargarlos en tu
equipo si quieres.

57
00:02:24,580 --> 00:02:27,850
En este caso, sólo encontré
California, la ciudad, Palo

58
00:02:27,850 --> 00:02:30,650
Alto, y obtuve todos los
documentos diferentes que

59
00:02:30,650 --> 00:02:33,180
corresponden a esa ciudad
y ese estado.

60
00:02:33,180 --> 00:02:36,160
Y ahora puedes ver que hay
tres "zip codes" diferentes,

61
00:02:36,160 --> 00:02:42,750
94301, 94303 y 94306, todos los 
cuales corresponden a Palo Alto.

62
00:02:42,750 --> 00:02:44,140
Eso es correcto.

63
00:02:44,140 --> 00:02:47,660
Así que lo que me gustaría que hicieras es
que escribieras una consulta de agregación que

64
00:02:47,660 --> 00:02:49,590
devuelva los códigos postales --

65
00:02:49,590 --> 00:02:51,060
es decir, "zip codes" --

66
00:02:51,060 --> 00:02:53,840
que cubran cada ciudad de
los Estados Unidos.

67
00:02:53,840 --> 00:02:57,320
Y el resultado debería ser
algo similar a esto, donde

68
00:02:57,320 --> 00:02:58,970
se está agrupando por --

69
00:02:58,970 --> 00:03:00,680
puedes ver que tenemos
la ciudad aquí.

70
00:03:00,680 --> 00:03:04,670
Y entonces tenemos una lista de los
códigos postales que corresponden

71
00:03:04,670 --> 00:03:05,830
a esa ciudad.

72
00:03:05,830 --> 00:03:09,190
Y, para el propósito de este
problema, ignoraremos el hecho

73
00:03:09,190 --> 00:03:11,480
de que hay ciudades que aparecen
en múltiples estados.

74
00:03:11,480 --> 00:03:13,430
Y que la mayoría de la gente las considera
ciudades diferentes,

75
00:03:13,430 --> 00:03:15,600
especialmente cuando están a
miles de millas de distancia.

76
00:03:15,600 --> 00:03:18,070
Por ejemplo, Springfield,
Missouri y Springfield,

77
00:03:18,070 --> 00:03:19,900
Massachusetts no están
cerca entre sí.

78
00:03:19,900 --> 00:03:22,510
Y no son el mismo lugar,
pero para nuestro propósito,

79
00:03:22,510 --> 00:03:24,010
serán considerados el mismo lugar.

80
00:03:24,010 --> 00:03:25,770
Así que escribe una consulta
que haga eso.

81
00:03:25,770 --> 00:03:28,070
Puedes deducir qué necesitas
hacer, en cuanto a los nombres

82
00:03:28,070 --> 00:03:30,590
de las claves en el documento
resultante, basándote en 

83
00:03:30,590 --> 00:03:31,930
lo que ves aquí.

84
00:03:31,930 --> 00:03:33,650
De nuevo, se llama "zips".

85
00:03:33,650 --> 00:03:34,900
Y escribe tu consulta debajo.

86
00:03:34,900 --> 00:03:36,315
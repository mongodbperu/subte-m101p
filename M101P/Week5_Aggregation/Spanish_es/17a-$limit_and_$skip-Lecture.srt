1
00:00:00,000 --> 00:00:00,350

2
00:00:00,350 --> 00:00:03,650
"$skip" y "$limit" en el
"pipeline" de agregación funcionan

3
00:00:03,650 --> 00:00:06,770
exactamente de la manera en que
"skip" y "limit" funcionan cuando

4
00:00:06,770 --> 00:00:07,550
se hace un simple "find".

5
00:00:07,550 --> 00:00:11,240
Por ello, no tiene ningún sentido
saltar y limitar a menos que

6
00:00:11,240 --> 00:00:15,880
primero se ordene, de lo contrario,
el resultado es indefinido.

7
00:00:15,880 --> 00:00:20,500
Y lo que quiero hacer es
primero saltar y luego limitar.

8
00:00:20,500 --> 00:00:24,180
No suele tener mucho sentido
limitar y luego saltar.

9
00:00:24,180 --> 00:00:27,420
Y salta hacia adelante, sólo salta hacia
adelante en el conjunto de documentos.

10
00:00:27,420 --> 00:00:31,310
Así que si tienes un conjunto
de documentos ordenados, y es

11
00:00:31,310 --> 00:00:34,940
como vienen a ti, digamos,
en este sentido, y deseas

12
00:00:34,940 --> 00:00:36,150
saltar hacia adelante--

13
00:00:36,150 --> 00:00:40,740
Así que si saltas cinco, saltas
uno, dos, tres, cuatro, cinco.

14
00:00:40,740 --> 00:00:42,370
Y luego inicias aquí.

15
00:00:42,370 --> 00:00:44,970
Y después limitas a tres,
obtienes uno, dos,

16
00:00:44,970 --> 00:00:47,040
tres, los siguientes
tres documentos.

17
00:00:47,040 --> 00:00:50,790
Si recuerdas cuando hicimos
un "find", el orden en que

18
00:00:50,790 --> 00:00:54,010
diste un salto y limitaste ni
siquiera importa porque el servidor

19
00:00:54,010 --> 00:00:57,740
lo haría automáticamente, o los
drivers, lo ordenarían de modo

20
00:00:57,740 --> 00:01:00,720
que primero ordena, y luego

21
00:01:00,720 --> 00:01:02,460
salta y luego limita.

22
00:01:02,460 --> 00:01:05,459
Pero en el caso de
Aggregation Framework donde

23
00:01:05,459 --> 00:01:08,520
se le da una lista ordenada
de etapas, el orden en que

24
00:01:08,520 --> 00:01:10,770
se especifica "$skip"
y "$limit" importa.

25
00:01:10,770 --> 00:01:14,160
Veamos un ejemplo de uso
de "$skip" y "$limit".

26
00:01:14,160 --> 00:01:17,530
Vamos a volver a nuestra consulta
que hemos estado trabajando

27
00:01:17,530 --> 00:01:19,750
en las últimas lecciones
donde estábamos repasando

28
00:01:19,750 --> 00:01:22,580
los datos de códigos postales
y buscar por todos los códigos

29
00:01:22,580 --> 00:01:26,750
postales en Nueva York y encontrar
la población de cada ciudad,

30
00:01:26,750 --> 00:01:30,030
proyectando la información,
ordenando por población y

31
00:01:30,030 --> 00:01:33,630
luego saltando hacia adelante 10
y luego limitando los siguientes

32
00:01:33,630 --> 00:01:35,150
cinco elementos.

33
00:01:35,150 --> 00:01:39,450
Así que si hacemos esto, entonces
obtenemos estos elementos de aquí,

34
00:01:39,450 --> 00:01:41,480
que son los lugares
con más población.

35
00:01:41,480 --> 00:01:44,860
Pero los primeros 10 no están
en la lista y luego obtenemos

36
00:01:44,860 --> 00:01:47,570
los cinco siguientes de la lista,
que son Astoria, que está en

37
00:01:47,570 --> 00:01:53,540
Queens, Jackson Heights, Far
Rockaway, también de Queens,

38
00:01:53,540 --> 00:01:55,110
Ridgewood y Binghamton.

39
00:01:55,110 --> 00:01:57,880
Estas no están en Queens,
ni Jackson Heights

40
00:01:57,880 --> 00:01:59,570
Creo que está en Queens.

41
00:01:59,570 --> 00:02:00,510
Así que todo bien.

42
00:02:00,510 --> 00:02:03,110
Esto es cómo
saltas y limitas.

43
00:02:03,110 --> 00:02:05,120
Ahora, es tiempo
para un cuestionario.

44
00:02:05,120 --> 00:02:06,100
Aquí está el cuestionario.

45
00:02:06,100 --> 00:02:09,949
Supongamos que cambias el orden
de "$skip" y "$limit" en la

46
00:02:09,949 --> 00:02:11,940
consulta mostrada en la
lección que luce como esto.

47
00:02:11,940 --> 00:02:17,260
Así que en lugar de saltar
primero y luego limitar, limita

48
00:02:17,260 --> 00:02:18,910
y luego salta.

49
00:02:18,910 --> 00:02:20,750
¿Cuántos documentos
crees que van a estar

50
00:02:20,750 --> 00:02:22,000
en el conjunto de resultados?

51
00:02:22,000 --> 00:02:22,850

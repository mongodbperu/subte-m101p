1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:05,410
La siguiente fase del "pipeline"
de agregación es "$match".

3
00:00:05,410 --> 00:00:11,250
Ahora, "$match" realiza un filtro
en los documentos a medida que pasan

4
00:00:11,250 --> 00:00:15,390
a través del "pipe" y
tiene un efecto reductor.

5
00:00:15,390 --> 00:00:20,700
Por lo tanto, puede haber "n"
documentos por cada documento saliente.

6
00:00:20,700 --> 00:00:24,220
Puede pasar todos los documentos,
pero puede pasar algún subconjunto de

7
00:00:24,220 --> 00:00:25,630
los documentos.

8
00:00:25,630 --> 00:00:29,340
Y la razón por la que desearas
usar "$match" es porque deseas

9
00:00:29,340 --> 00:00:32,460
filtrar los resultados y sólo
agregar una porción de los

10
00:00:32,460 --> 00:00:35,990
documentos o buscar por
partes en particular, partes del

11
00:00:35,990 --> 00:00:39,050
conjunto de resultados después
de hacer la agrupación.

12
00:00:39,050 --> 00:00:43,130
Ahora veamos la colección
"zip code" de nuevo y digamos

13
00:00:43,130 --> 00:00:47,680
que deseo coincidir con sólo
los documentos que están en el

14
00:00:47,680 --> 00:00:48,870
estado de Nueva York.

15
00:00:48,870 --> 00:00:51,780
El estado de Nueva York,
que es NY.

16
00:00:51,780 --> 00:00:54,150
Podríamos hacer eso con
esta expresión de aquí.

17
00:00:54,150 --> 00:00:59,550
Así "db.zips.aggregate" y entonces
abrimos nuestros corchetes,

18
00:00:59,550 --> 00:01:01,510
porque de nuevo, esto es un
"pipeline" pero sólo vamos a

19
00:01:01,510 --> 00:01:04,860
tener un elemento en el
"pipe" aquí, una etapa y

20
00:01:04,860 --> 00:01:06,830
eso es la fase "$match".

21
00:01:06,830 --> 00:01:10,980
Y luego aquí puedes ver que
la sintaxis es muy similar

22
00:01:10,980 --> 00:01:13,380
a la de un "find".

23
00:01:13,380 --> 00:01:15,490
Básicamente, especifico
que me gustaría que el

24
00:01:15,490 --> 00:01:18,760
estado sea Nueva York.

25
00:01:18,760 --> 00:01:22,550
Y esta es una simple selección
de los elementos donde el estado

26
00:01:22,550 --> 00:01:23,570
es Nueva York.

27
00:01:23,570 --> 00:01:26,930
Y si hago eso, esto
es lo que obtengo.

28
00:01:26,930 --> 00:01:30,920
Y puedes ver que lo que hace es
encontrar sólo los códigos

29
00:01:30,920 --> 00:01:34,640
postales que se encuentran
dentro del estado de Nueva York.

30
00:01:34,640 --> 00:01:37,320
Y una vez que haga eso, podría
querer hacer una agrupación y

31
00:01:37,320 --> 00:01:39,650
averiguar cuál es la
población de cada ciudad.

32
00:01:39,650 --> 00:01:43,220
Si recuerdas, una ciudad puede tener
múltiples códigos postales dentro de ella,

33
00:01:43,220 --> 00:01:44,820
múltiples códigos postales.

34
00:01:44,820 --> 00:01:48,700
Por ello tenemos que agregar entre
las ciudades o un "GROUP BY" de la

35
00:01:48,700 --> 00:01:50,690
ciudad para obtener su
población.

36
00:01:50,690 --> 00:01:52,330
Así que vamos a ver eso.

37
00:01:52,330 --> 00:01:55,490
Ahora, en esto, vemos un
"pipeline" de agregación

38
00:01:55,490 --> 00:01:57,960
más tradicional ya que
tiene múltiples fases.

39
00:01:57,960 --> 00:02:01,320
Primero vamos a usar "$match" y
encontrar todo lo que está en el

40
00:02:01,320 --> 00:02:05,420
estado de Nueva York y luego vamos a
agrupar y crear un nuevo conjunto de

41
00:02:05,420 --> 00:02:06,640
documentos resultantes.

42
00:02:06,640 --> 00:02:11,320
Vamos a agrupar por "$city",
especificando el "_id" con

43
00:02:11,320 --> 00:02:15,320
"$city" y luego vamos a crear
una clave "population", que es

44
00:02:15,320 --> 00:02:19,110
la suma del "$pop"
de esos documentos.

45
00:02:19,110 --> 00:02:22,060
Vamos a ir sumando la población
y a continuación, sólo por

46
00:02:22,060 --> 00:02:25,510
diversión, vamos a mantener
también todos los códigos postales

47
00:02:25,510 --> 00:02:29,160
que aparecen en esa ciudad
haciendo un "$addToSet".

48
00:02:29,160 --> 00:02:34,400
Y si hacemos eso, obtendremos
este resultado de aquí.

49
00:02:34,400 --> 00:02:38,680
Así que podemos ver que la ciudad de
Nueva York tiene muchos códigos postales

50
00:02:38,680 --> 00:02:41,290
en ella y una muy
grande población.

51
00:02:41,290 --> 00:02:45,380
De acuerdo a esto, dice
que es 1.4 millones.

52
00:02:45,380 --> 00:02:49,890
Así, este conjunto de datos considera
que Manhattan es de Nueva York y

53
00:02:49,890 --> 00:02:53,320
los otros cuatro condados,
Brooklyn, Queens, el Bronx,

54
00:02:53,320 --> 00:02:56,780
y la isla Staten son ciudades
separadas porque la

55
00:02:56,780 --> 00:03:01,880
población general de la ciudad de Nueva
York está cerca de los 8 millones, pero

56
00:03:01,880 --> 00:03:05,260
esta New York significa Manhattan,
para aquellos quienes conocen la

57
00:03:05,260 --> 00:03:09,120
geografía estadounidense y son
conscientes de la población.

58
00:03:09,120 --> 00:03:11,520
Y estos datos también son
de hace un par de años.

59
00:03:11,520 --> 00:03:14,370
Y puedes ver aquí todas las
distintas poblaciones de las

60
00:03:14,370 --> 00:03:16,920
distintas ciudades en Nueva York.

61
00:03:16,920 --> 00:03:20,280
Ahora, digamos que deseamos
reformar este documento para ser un

62
00:03:20,280 --> 00:03:21,330
poco más elegante.

63
00:03:21,330 --> 00:03:24,290
En particular, no nos gusta que
nuestra ciudad aparezca como un

64
00:03:24,290 --> 00:03:28,110
"_id", pero en su lugar deseamos
que diga la palabra "city".

65
00:03:28,110 --> 00:03:30,490
Por ello, ahora que entendemos
el operador "$project", sin duda

66
00:03:30,490 --> 00:03:32,140
podemos hacerlo.

67
00:03:32,140 --> 00:03:34,580
Así que veamos cómo funciona.

68
00:03:34,580 --> 00:03:37,550
Ahora hay tres fases
en nuestro "pipeline".

69
00:03:37,550 --> 00:03:41,020
Primero vamos a hacer "$match"
en el estado que sea Nueva York,

70
00:03:41,020 --> 00:03:44,490
luego vamos a agrupar por ciudad
y obtener la población, y

71
00:03:44,490 --> 00:03:46,710
finalmente, vamos a hacer
"$project" un poco.

72
00:03:46,710 --> 00:03:49,460
Vamos a suprimir el "_id",
vamos a crear una

73
00:03:49,460 --> 00:03:53,640
nueva clave llamada "city" y usar
el campo "_id" y luego vamos a

74
00:03:53,640 --> 00:03:57,150
pasar simplemente
la clave "population".

75
00:03:57,150 --> 00:04:00,420
Y aquí podría haber sido
"'population': 1",

76
00:04:00,420 --> 00:04:04,260
hubiera sido el mismo resultado,
y "'zip_codes': 1".

77
00:04:04,260 --> 00:04:07,060
Si lo hacemos,
¿qué obtenemos?

78
00:04:07,060 --> 00:04:13,590
Puedes ver que esto es un
resultado un poco más elegante.

79
00:04:13,590 --> 00:04:17,810
Así que ahora tengo "population",
"zip_codes" y "city".

80
00:04:17,810 --> 00:04:20,220
Curiosamente, a pesar que
los especifiqué en un orden

81
00:04:20,220 --> 00:04:23,020
distinto, esto cambió el
orden en el documento.

82
00:04:23,020 --> 00:04:24,970
Eso es algo interesante
a observar.

83
00:04:24,970 --> 00:04:29,370
Especifiqué "city", "population",
"zip_codes", pero obtuve algo

84
00:04:29,370 --> 00:04:33,910
que luce como "population", "zip_codes",
"city", lo que significa que, supongo

85
00:04:33,910 --> 00:04:36,860
que MongoDB, cuando hace
una proyección no

86
00:04:36,860 --> 00:04:40,490
necesariamente impone el
orden que provees en la

87
00:04:40,490 --> 00:04:41,400
proyección.

88
00:04:41,400 --> 00:04:43,740
Sólo para confirmar que
no hubiera importado

89
00:04:43,740 --> 00:04:48,420
si escribí "$population" o
"'$population': 1", vamos a

90
00:04:48,420 --> 00:04:52,220
cambiar que sea sólo
un "1" y veamos si

91
00:04:52,220 --> 00:04:53,200
funciona de la misma manera.

92
00:04:53,200 --> 00:04:54,710
Creo que debería.

93
00:04:54,710 --> 00:04:56,470
Y sí, funciona.

94
00:04:56,470 --> 00:04:58,570
Funciona exactamente
de la misma manera.

95
00:04:58,570 --> 00:04:59,110
Muy bien.

96
00:04:59,110 --> 00:05:00,170
Aquí vamos.

97
00:05:00,170 --> 00:05:02,230
Y así es cómo funciona.

98
00:05:02,230 --> 00:05:05,540
Muy bien, ahora hagamos
un cuestionario y

99
00:05:05,540 --> 00:05:07,440
escribe un "$match".

100
00:05:07,440 --> 00:05:11,110
Pensando en la colección
"zipcodes" con la que

101
00:05:11,110 --> 00:05:14,110
hemos estado jugando, escribe una
consulta de agregación con una

102
00:05:14,110 --> 00:05:17,750
única fase "$match" que
filtra por "zip_codes"

103
00:05:17,750 --> 00:05:20,000
con población mayor a 100000.

104
00:05:20,000 --> 00:05:22,700
Y puede que necesites usar
el operador "$gt" (mayor que)

105
00:05:22,700 --> 00:05:24,630
si se te olvidó cómo hacerlo.

106
00:05:24,630 --> 00:05:26,940
Puse un enlace aquí
hacia la documentación.

107
00:05:26,940 --> 00:05:30,830
La manera cómo lo encontré,
es así, escribiento "$gt MongoDB"

108
00:05:30,830 --> 00:05:32,460
en Google.

109
00:05:32,460 --> 00:05:36,265
Así, Google es tu amigo
cuando se trata de buscar la

110
00:05:36,265 --> 00:05:37,470
documentación de MongoDB.

111
00:05:37,470 --> 00:05:39,020
Escribe la consulta justo aquí.

112
00:05:39,020 --> 00:05:40,270

1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:03,830
Una de las cosas interesantes sobre
Aggregation Framework

3
00:00:03,830 --> 00:00:06,930
que es incluso mejor que lo que
tienes disponible usando SQL

4
00:00:06,930 --> 00:00:10,830
con "GROUP BY" es que puedes
ejecutar una fase particular

5
00:00:10,830 --> 00:00:12,450
de agregación más de una vez.

6
00:00:12,450 --> 00:00:15,680
Por ejemplo, podemos agrupar más
de una vez en la misma

7
00:00:15,680 --> 00:00:19,010
consulta de agregación, lo que 
llamamos agrupación doble.

8
00:00:19,010 --> 00:00:20,940
Ahora, ¿cuándo sería
esto útil?

9
00:00:20,940 --> 00:00:26,150
Permíteme que te enseñe un conjunto de datos que
contiene calificaciones por cada

10
00:00:26,150 --> 00:00:28,180
estudiante en cada clase.

11
00:00:28,180 --> 00:00:34,550
Así por ejemplo, podría tener
"student_id: 1", "class_id: 397".

12
00:00:34,550 --> 00:00:36,690
Podría tener muchas entradas --

13
00:00:36,690 --> 00:00:39,450
una para un "homework",
otra para un "quiz".

14
00:00:39,450 --> 00:00:44,780
Y digamos que queremos
averiguar cuál es la nota promedio

15
00:00:44,780 --> 00:00:47,440
de la clase en cada clase.

16
00:00:47,440 --> 00:00:50,290
Para hacer eso, primero, necesitamos calcular
el promedio de todas las notas de los

17
00:00:50,290 --> 00:00:51,840
estudiantes dentro de la clase.

18
00:00:51,840 --> 00:00:54,630
Y después, necesitamos calcular
el promedio de esas notas.

19
00:00:54,630 --> 00:00:57,270
Por lo que es algo como esto.

20
00:00:57,270 --> 00:00:58,880
"db.grades.aggregate".

21
00:00:58,880 --> 00:01:01,810
Primero voy a hacer una agrupación
donde agrupo por

22
00:01:01,810 --> 00:01:03,935
"class_id" y "student_id".

23
00:01:03,935 --> 00:01:06,730
Y voy a calcular el promedio
de todas esas notas.

24
00:01:06,730 --> 00:01:08,610
Así que voy a calcular el promedio
de todas esas notas.

25
00:01:08,610 --> 00:01:11,290
Y eso me va a dar un montón
de documentos que tienen

26
00:01:11,290 --> 00:01:15,730
"class_id" y "student_id"
como "_id" y el promedio

27
00:01:15,730 --> 00:01:18,280
para esas evaluaciones.

28
00:01:18,280 --> 00:01:20,980
Y entonces vamos a hacer un "pipe"
con la agrupación

29
00:01:20,980 --> 00:01:25,770
secundaria, que va a usar
como su "_id" para

30
00:01:25,770 --> 00:01:29,300
la agrupación el
"$_id.class_id" de

31
00:01:29,300 --> 00:01:31,250
la fase previa.

32
00:01:31,250 --> 00:01:35,050
Y entonces va a calcular el promedio
de aquéllas para obtener un promedio final.

33
00:01:35,050 --> 00:01:38,770
Así que ejecutemos eso y veamos
cómo se ve.

34
00:01:38,770 --> 00:01:40,560
Es como esto.

35
00:01:40,560 --> 00:01:42,650
Puedes ver que por cada
uno de estos "class_id"

36
00:01:42,650 --> 00:01:45,070
tengo un promedio.

37
00:01:45,070 --> 00:01:47,800
Ahora, ¿cómo se ve
tras la primera fase?

38
00:01:47,800 --> 00:01:48,700
Hagamos esto.

39
00:01:48,700 --> 00:01:49,850
Simplemente --

40
00:01:49,850 --> 00:01:52,310
voy a escribir esto como
un fichero secundario --

41
00:01:52,310 --> 00:01:54,745
tomemos esto.

42
00:01:54,745 --> 00:01:57,370
Me llevará un segundo
organizar esto.

43
00:01:57,370 --> 00:01:58,510
De acuerdo.

44
00:01:58,510 --> 00:02:01,640
Ahora, lo ejecutaremos.

45
00:02:01,640 --> 00:02:06,330
Por lo que tras la primera fase, lo que
tengo es que por cada clase y

46
00:02:06,330 --> 00:02:08,910
por cada estudiante, tengo
un promedio.

47
00:02:08,910 --> 00:02:13,120
Y entonces lo que necesito hacer es
agregar sobre la clase y

48
00:02:13,120 --> 00:02:14,630
calcular el promedio de esos promedios.

49
00:02:14,630 --> 00:02:15,570
Y podría haber un
número diferente de

50
00:02:15,570 --> 00:02:16,960
evaluaciones por cada estudiante.

51
00:02:16,960 --> 00:02:18,780
Por lo que no puedo tomar simplemente 
un promedio de todo por 

52
00:02:18,780 --> 00:02:23,070
"class_id", necesito hacer dos
fases de agregación separadas para

53
00:02:23,070 --> 00:02:23,655
obtener la respuesta.

54
00:02:23,655 --> 00:02:26,990
Un poco difícil, pero es muy
útil poder hacer esto

55
00:02:26,990 --> 00:02:29,970
como veremos en otras
tareas.

56
00:02:29,970 --> 00:02:31,170
Ahora, hagamos un cuestionario.

57
00:02:31,170 --> 00:02:33,140
Dada la siguiente colección --
y acabo de

58
00:02:33,140 --> 00:02:34,260
crear esta colección --

59
00:02:34,260 --> 00:02:37,600
con los siguientes documentos y
la siguiente consulta de

60
00:02:37,600 --> 00:02:40,330
agregación que tiene una
agrupación doble,

61
00:02:40,330 --> 00:02:42,190
¿qué valores devuelve?

62
00:02:42,190 --> 00:02:45,310
Y sólo te adelantaré y te diré
que hay dos

63
00:02:45,310 --> 00:02:48,790
valores interesantes en el
documento resultante final.

64
00:02:48,790 --> 00:02:50,600
¿Qué valores se devuelven?

65
00:02:50,600 --> 00:02:52,470
Ahora, puedes hacer esto 
razonando por ti mismo.

66
00:02:52,470 --> 00:02:55,062
O si realmente quieres, puedes
configurar MongoDB y poner

67
00:02:55,062 --> 00:02:57,810
todos estos documentos y simplemente
te dará la respuesta.

68
00:02:57,810 --> 00:02:59,650
Pero estaría mejor si pudieras
razonar por ti mismo

69
00:02:59,650 --> 00:03:00,900
sobre esto.

70
00:03:00,900 --> 00:03:02,715
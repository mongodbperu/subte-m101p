1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:03,330
Empecemos con un simple
ejemplo de agregación en

3
00:00:03,330 --> 00:00:07,350
MongoDB para motivar
cómo funciona esto.

4
00:00:07,350 --> 00:00:08,870
Ahora voy a empezar
con un ejemplo

5
00:00:08,870 --> 00:00:10,570
del mundo SQL--

6
00:00:10,570 --> 00:00:12,110
mundo SQL relacional.

7
00:00:12,110 --> 00:00:13,570
Digamos que tenemos
una tabla "products".

8
00:00:13,570 --> 00:00:17,365
Y esa tabla "products" tiene
un nombre, categoría, fabricante

9
00:00:17,365 --> 00:00:19,610
y precio por cada elemento.

10
00:00:19,610 --> 00:00:22,510
Esta es una tabla de
artículos electrónicos.

11
00:00:22,510 --> 00:00:25,780
Podría tener un iPad, que es
un tablet de Apple, con un

12
00:00:25,780 --> 00:00:27,550
precio de 499.

13
00:00:27,550 --> 00:00:30,540
Si quisiera obtener un reporte
de cuántos productos hay

14
00:00:30,540 --> 00:00:31,700
por cada fabricante--

15
00:00:31,700 --> 00:00:35,940
la forma en que lo haría en
SQL, es un "SELECT manufacturer,

16
00:00:35,940 --> 00:00:41,500
COUNT(*) FROM products
GROUP BY

17
00:00:41,500 --> 00:00:42,690
manufacturer".

18
00:00:42,690 --> 00:00:46,490
Y esto me daría
un reporte con

19
00:00:46,490 --> 00:00:48,940
el número de productos
de cada fabricante.

20
00:00:48,940 --> 00:00:51,450
Una vez más, esto es un
"SELECT manufacturer, COUNT(*)

21
00:00:51,450 --> 00:00:53,790
FROM products GROUP BY
manufacturer".

22
00:00:53,790 --> 00:00:55,580
Hay una coma aquí.

23
00:00:55,580 --> 00:00:57,000
Ahora, si no entiendes SQL,

24
00:00:57,000 --> 00:00:58,040
esto no es muy importante.

25
00:00:58,040 --> 00:00:59,650
Pero, si lo entiendes,
podría ayudarte.

26
00:00:59,650 --> 00:01:02,860
El reporte que obtendríamos
sería algo como esto.

27
00:01:02,860 --> 00:01:06,740
Tendríamos una columna
"manufacturer" y luego

28
00:01:06,740 --> 00:01:08,060
"COUNT(*)" para cada uno.

29
00:01:08,060 --> 00:01:11,490
Así tendríamos un pequeño
reporte que diga, OK.

30
00:01:11,490 --> 00:01:16,820
Apple tiene dos productos y
Samsung tiene tres productos.

31
00:01:16,820 --> 00:01:20,280
Así que esta es una cláusula
GROUP BY que es muy interesante,

32
00:01:20,280 --> 00:01:24,830
junto a esta función
de agregación, que en SQL,

33
00:01:24,830 --> 00:01:26,400
era "COUNT(*)".

34
00:01:26,400 --> 00:01:29,750
Ahora, ¿cómo lo
hacemos en MongoDB?

35
00:01:29,750 --> 00:01:34,190
Vamos y veamos en una
colección que es muy

36
00:01:34,190 --> 00:01:37,640
similar a aquella tabla
del mundo relacional.

37
00:01:37,640 --> 00:01:41,860
Aquí tenemos una tabla de elementos
que son exactamente los mismos

38
00:01:41,860 --> 00:01:45,060
que los que estaban en la otra
tabla relacional, donde cada

39
00:01:45,060 --> 00:01:46,110
uno tiene un nombre.

40
00:01:46,110 --> 00:01:46,950
Y este es--

41
00:01:46,950 --> 00:01:48,890
Kindle paper white,
en la categoría--

42
00:01:48,890 --> 00:01:50,160
tablets, y el fabricante--

43
00:01:50,160 --> 00:01:50,750
Amazon.

44
00:01:50,750 --> 00:01:52,910
Y hay como seis o siete
cosas en esta colección.

45
00:01:52,910 --> 00:01:53,960
Es bastante pequeña.

46
00:01:53,960 --> 00:01:55,510
Acabo de crearla ahora.

47
00:01:55,510 --> 00:01:58,580
¿Cómo podemos agregarlos para
que podamos saber el número

48
00:01:58,580 --> 00:02:00,910
de productos de
cada fabricante?

49
00:02:00,910 --> 00:02:02,970
La forma de hacerlo
es la siguiente.

50
00:02:02,970 --> 00:02:06,050
Puse esta colección en una
base de datos llamada "agg".

51
00:02:06,050 --> 00:02:07,030
Eso no importa.

52
00:02:07,030 --> 00:02:08,870
Ahí es donde puse
la colección.

53
00:02:08,870 --> 00:02:10,550
Llamaríamos a la
función "aggregate".

54
00:02:10,550 --> 00:02:12,500
Y así es cómo lo harías
en el shell Mongo.

55
00:02:12,500 --> 00:02:15,400
Y en esta unidad, vamos a
enfocarnos más en el shell

56
00:02:15,400 --> 00:02:18,760
Mongo porque esto se alinea
limpiamente a los drivers.

57
00:02:18,760 --> 00:02:20,760
Y no pienso añadir mucha
explicación de cómo funciona

58
00:02:20,760 --> 00:02:22,070
en los drivers.

59
00:02:22,070 --> 00:02:25,810
Pero decimos que hacemos
"db.products.aggregate" y

60
00:02:25,810 --> 00:02:27,910
de nuevo, "products"
de la colección.

61
00:02:27,910 --> 00:02:30,960
Quiero hacer un GROUP BY
y luego tendría un

62
00:02:30,960 --> 00:02:32,340
operador $group.

63
00:02:32,340 --> 00:02:34,940
Y luego deseo agrupar
por fabricante.

64
00:02:34,940 --> 00:02:36,480
Y quiero obtener el contador.

65
00:02:36,480 --> 00:02:37,690
Y la forma en que hago eso--

66
00:02:37,690 --> 00:02:39,620
vamos a explicar cómo
funciona esto después--

67
00:02:39,620 --> 00:02:44,860
es creamos una nueva clave,
llamada "num_products" y sumamos

68
00:02:44,860 --> 00:02:46,720
por cada uno, 1.

69
00:02:46,720 --> 00:02:49,130
Y no vamos a explicar cómo
funciona esto ahora mismo

70
00:02:49,130 --> 00:02:50,630
porque quiero repasar esto en

71
00:02:50,630 --> 00:02:51,400
las siguientes lecciones.

72
00:02:51,400 --> 00:02:52,890
Sólo quería darte una visión
general de alto nivel sobre

73
00:02:52,890 --> 00:02:54,680
Aggregration Framework
en estos momentos.

74
00:02:54,680 --> 00:02:56,340
Pero deseo que notes
un par de cosas

75
00:02:56,340 --> 00:02:58,170
acerca de este comando.

76
00:02:58,170 --> 00:03:01,780
La primera es que
el operador $group

77
00:03:01,780 --> 00:03:03,260
está en su propio documento.

78
00:03:03,260 --> 00:03:05,350
$group, justo aquí.

79
00:03:05,350 --> 00:03:07,540
La segunda es,
esto es un array.

80
00:03:07,540 --> 00:03:09,140
Y puede haber otros operadores.

81
00:03:09,140 --> 00:03:11,000
Y vamos a ver
cómo funciona.

82
00:03:11,000 --> 00:03:12,820
Pero por ahora,
sólo tenemos uno.

83
00:03:12,820 --> 00:03:16,310
Así que tuve un paréntesis
abierto y un array abierto aquí.

84
00:03:16,310 --> 00:03:19,380
Y luego tengo un
documento con $group.

85
00:03:19,380 --> 00:03:22,020
El valor para el operador
$group tiene un par de

86
00:03:22,020 --> 00:03:22,640
partes distintas.

87
00:03:22,640 --> 00:03:25,240
La primera parte es "_id".

88
00:03:25,240 --> 00:03:26,840
Y puedes tal vez pensar en
esto como la creación de una

89
00:03:26,840 --> 00:03:30,330
nueva colección, donde vamos
a agrupar por "manufacturer".

90
00:03:30,330 --> 00:03:32,990
"manufacturer" fue una clave
en mi colección, pero ahora

91
00:03:32,990 --> 00:03:35,360
son datos para esto--

92
00:03:35,360 --> 00:03:36,380
este es un campo.

93
00:03:36,380 --> 00:03:39,600
Y como resultado, tenemos
que anteponer el signo de dólar y

94
00:03:39,600 --> 00:03:41,750
todo esto tiene que
estar entre comillas.

95
00:03:41,750 --> 00:03:43,940
Y luego voy a crear
un nuevo campo llamado

96
00:03:43,940 --> 00:03:47,425
"num_products" que va a
llamar al operador $sum

97
00:03:47,425 --> 00:03:48,800
y añade 1 para cada elemento.

98
00:03:48,800 --> 00:03:50,310
Vamos a ver cómo
funciona esto.

99
00:03:50,310 --> 00:03:52,770
Pero ahora veamos que funcione
y veamos qué obtenemos.

100
00:03:52,770 --> 00:03:55,600
Sólo llamo a aquella
función de agregación.

101
00:03:55,600 --> 00:03:58,210
Y lo que obtengo es un resultado.

102
00:03:58,210 --> 00:04:02,000
Y Aggregation Framework de
MongoDB retorna su resultado,

103
00:04:02,000 --> 00:04:05,340
como un documento en MongoDB.

104
00:04:05,340 --> 00:04:07,760
Esta es una limitación de
Aggregation Framework, es

105
00:04:07,760 --> 00:04:11,110
que el documento no puede ser
más grande que 16 megabytes,

106
00:04:11,110 --> 00:04:12,360
tanto como un documento normal.

107
00:04:12,360 --> 00:04:15,360
Pero puedes ver que hay un
array de documentos, en realidad,

108
00:04:15,360 --> 00:04:16,230
en el resultado.

109
00:04:16,230 --> 00:04:18,974
Y cada elemento es una fila
de esa tabla que hubiéramos

110
00:04:18,974 --> 00:04:20,040
visto en el mundo SQL.

111
00:04:20,040 --> 00:04:24,850
Google "num_products: 1",
Amazon "num_products: 2",

112
00:04:24,850 --> 00:04:26,480
Sony "num_products: 1".

113
00:04:26,480 --> 00:04:26,990
Muy bien.

114
00:04:26,990 --> 00:04:29,790
Esta es la visión general de la
forma en que harías un simple

115
00:04:29,790 --> 00:04:33,570
GROUP BY y obtendrías el número
de elementos por fabricante en

116
00:04:33,570 --> 00:04:35,240
la pequeña colección.

117
00:04:35,240 --> 00:04:38,200
Ahora es tu turno para escribir
uno de estos, para que tengas una

118
00:04:38,200 --> 00:04:39,700
idea de cómo funciona.

119
00:04:39,700 --> 00:04:40,880
Aquí está el cuestionario.

120
00:04:40,880 --> 00:04:44,610
Digamos que tienes una colección
de productos, al igual que la que

121
00:04:44,610 --> 00:04:45,870
te acabo de mostrar.

122
00:04:45,870 --> 00:04:49,440
Y deseas contar el
número de productos, no por

123
00:04:49,440 --> 00:04:52,370
fabricante como lo que acabo
de hacer, sino por categoría.

124
00:04:52,370 --> 00:04:55,410
Entonces sólo necesitas volver
y ver cómo funciona esa consulta.

125
00:04:55,410 --> 00:04:56,750
Teniendo como resultado
la clave llamada

126
00:04:56,750 --> 00:04:58,780
"num_products", como la que tuve.

127
00:04:58,780 --> 00:05:01,540
Sólo necesitas cambiar el
nombre de la columna de aquí,

128
00:05:01,540 --> 00:05:02,960
de "manufacturer" a "category".

129
00:05:02,960 --> 00:05:04,840
O mejor dicho,
el nombre de la clave.

130
00:05:04,840 --> 00:05:07,570
Eso es todo lo que se
requiere obtener de esta tarea.

131
00:05:07,570 --> 00:05:10,630
Y explicaremos cómo funciona
en las siguientes lecciones.

132
00:05:10,630 --> 00:05:13,000
Pero me gustaría que
escribas aquí abajo.

133
00:05:13,000 --> 00:05:15,800
Y, lo que hace que sea más
fácil para calificarlo, si

134
00:05:15,800 --> 00:05:19,220
podrías usar comillas dobles
en todos los nombres de claves,

135
00:05:19,220 --> 00:05:20,300
sería de gran ayuda.

136
00:05:20,300 --> 00:05:22,550
Eso no es necesario, estrictamente
hablando, y no hice todo usando

137
00:05:22,550 --> 00:05:23,090
comillas dobles.

138
00:05:23,090 --> 00:05:24,430
Pero tú sólo usa
comillas dobles para todo.

139
00:05:24,430 --> 00:05:25,680
Eso hará que sea mejor.

140
00:05:25,680 --> 00:05:26,792

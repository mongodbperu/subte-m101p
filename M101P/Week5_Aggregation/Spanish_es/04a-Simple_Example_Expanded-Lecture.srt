1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:02,320
Vamos a analizar ese ejemplo
de agregación simple que te enseñé

3
00:00:02,320 --> 00:00:05,010
en la primera lección,
de forma detallada.

4
00:00:05,010 --> 00:00:08,050
Así, si recuerdas, empezamos
con una colección "products".

5
00:00:08,050 --> 00:00:10,440
Y luego hicimos algunas agrupaciones
en esa colección para obtener una

6
00:00:10,440 --> 00:00:12,922
colección resultante que
se mostró a partir

7
00:00:12,922 --> 00:00:14,530
de la función de agregación.

8
00:00:14,530 --> 00:00:16,980
Ahora, aquí está la colección,
si recuerdas.

9
00:00:16,980 --> 00:00:19,840
Era esta lista de productos.

10
00:00:19,840 --> 00:00:22,710
Y los productos tienen un
fabricante, un nombre y

11
00:00:22,710 --> 00:00:23,920
una categoría.

12
00:00:23,920 --> 00:00:25,940
Y queríamos obtener el número
de productos por cada

13
00:00:25,940 --> 00:00:27,540
fabricante.

14
00:00:27,540 --> 00:00:30,370
Ésta era la consulta, por
aquí, que usamos.

15
00:00:30,370 --> 00:00:33,120
Llamamos a "db.products.aggregate".

16
00:00:33,120 --> 00:00:34,650
Lo pusimos --

17
00:00:34,650 --> 00:00:36,840
sólo hay una fase de nuestro
pipeline de agregación.

18
00:00:36,840 --> 00:00:40,500
Era un "$group", donde
pedíamos agrupar por

19
00:00:40,500 --> 00:00:41,470
fabricante.

20
00:00:41,470 --> 00:00:45,270
E hicimos eso
especificando un "_id".

21
00:00:45,270 --> 00:00:49,470
Y luego, estuvimos creando una nueva
clave, llamada "num_products"

22
00:00:49,470 --> 00:00:52,160
con el operador "$sum".

23
00:00:52,160 --> 00:00:54,550
Así que, ¿qué sucede
aquí lógicamente?

24
00:00:54,550 --> 00:00:55,340
De acuerdo.

25
00:00:55,340 --> 00:00:57,840
Aggregation Framework va
a recorrer cada

26
00:00:57,840 --> 00:00:58,730
uno de estos documentos.

27
00:00:58,730 --> 00:01:01,380
Así el primer documento va 
a considerar que es éste.

28
00:01:01,380 --> 00:01:05,019
Y este documento tiene
"manufacturer: 'Apple'".

29
00:01:05,019 --> 00:01:07,440
Y, si recuerdas, vamos
a crear -- en nuestro

30
00:01:07,440 --> 00:01:10,060
conjunto resultante -- vamos a buscar
un documento resultante

31
00:01:10,060 --> 00:01:12,750
con un "_id:
$manufacturer".

32
00:01:12,750 --> 00:01:15,060
Y, en este caso, es "Apple".

33
00:01:15,060 --> 00:01:17,640
Por tanto, a medida que avanzamos por ese primer
documento, vamos a

34
00:01:17,640 --> 00:01:19,080
mirar y vamos a
decir, ¿hay uno

35
00:01:19,080 --> 00:01:20,640
con un "_id" igual a "Apple"?

36
00:01:20,640 --> 00:01:21,990
No.

37
00:01:21,990 --> 00:01:22,600
Creamos eso en

38
00:01:22,600 --> 00:01:27,280
mi conjunto resultante, llamado
"_id: 'Apple'".

39
00:01:27,280 --> 00:01:31,550
Y luego, también solicitó
crear una clave "num_products".

40
00:01:31,550 --> 00:01:33,500
Y, ¿qué hace la clave
"num_products"?

41
00:01:33,500 --> 00:01:36,070
Bien, dijo, crea
una clave "num_products"

42
00:01:36,070 --> 00:01:37,300
en mi conjunto resultante.

43
00:01:37,300 --> 00:01:40,540
Y quiero que añadas uno --

44
00:01:40,540 --> 00:01:42,760
ejecuta una suma y añade uno a
cualquier cosa que esté ahí.

45
00:01:42,760 --> 00:01:44,680
No hay nada ahí
para empezar.

46
00:01:44,680 --> 00:01:47,860
Y lo inicializa a cero, por lo que
comenzará en -- al añadir

47
00:01:47,860 --> 00:01:50,340
uno, lo pondrá justo
ahí -- uno.

48
00:01:50,340 --> 00:01:52,500
Así, de nuevo, a medida que recorre
estos productos, está

49
00:01:52,500 --> 00:01:55,080
creando una nueva colección
con los resultados.

50
00:01:55,080 --> 00:01:58,630
Así que la fase de agrupación no
recorre los documentos de

51
00:01:58,630 --> 00:02:00,080
un extremo al otro.

52
00:02:00,080 --> 00:02:02,970
En realidad procesa cada uno,
agrupándolo, y luego

53
00:02:02,970 --> 00:02:05,690
creando un nuevo conjunto de documentos
agregados.

54
00:02:05,690 --> 00:02:07,620
Echemos un vistazo al
segundo documento.

55
00:02:07,620 --> 00:02:10,900
El segundo documento tiene "Apple"
como fabricante.

56
00:02:10,900 --> 00:02:13,680
Y, de nuevo, lo
recorrería y 

57
00:02:13,680 --> 00:02:14,370
diríamos, de acuerdo.

58
00:02:14,370 --> 00:02:15,180
Es casi como un "upsert".

59
00:02:15,180 --> 00:02:16,570
Miraría y diría,
¿hay algo

60
00:02:16,570 --> 00:02:18,350
con un "_id" igual a "Apple"?

61
00:02:18,350 --> 00:02:19,580
Sí, lo hay.

62
00:02:19,580 --> 00:02:21,320
Ejecuta la suma sobre él.

63
00:02:21,320 --> 00:02:23,940
Dijo, añade uno a "num_products",
así que eso va a 

64
00:02:23,940 --> 00:02:26,680
actualizar "num_products"
a dos.

65
00:02:26,680 --> 00:02:29,570
Y va a recorrer el
tercer documento de la

66
00:02:29,570 --> 00:02:30,260
colección.

67
00:02:30,260 --> 00:02:34,000
El tercer documento de la colección
tiene "manufacturer: 'Apple'".

68
00:02:34,000 --> 00:02:36,520
Así que recuerda que estábamos buscando
un documento en el conjunto

69
00:02:36,520 --> 00:02:38,740
resultante con un "_id" igual a "Apple".

70
00:02:38,740 --> 00:02:39,670
Tenemos uno.

71
00:02:39,670 --> 00:02:41,270
Vamos a añadirle uno,
de nuevo.

72
00:02:41,270 --> 00:02:44,210
Y ahora vamos a
terminar con tres.

73
00:02:44,210 --> 00:02:48,050
Ahora, el cuarto documento en esta
colección "products" tiene

74
00:02:48,050 --> 00:02:49,850
"manufacturer: 'Samsung'".

75
00:02:49,850 --> 00:02:51,910
Vamos a buscar un
documento en el conjunto resultante

76
00:02:51,910 --> 00:02:53,480
que tenga un "_id" igual a "Samsung".

77
00:02:53,480 --> 00:02:55,300
No vamos a encontrar ninguno.

78
00:02:55,300 --> 00:02:58,020
Por lo tanto, esencialmente, vamos a,
si quieres, hacer un "upsert",

79
00:02:58,020 --> 00:03:03,510
poner algo en el conjunto resultante
con "Samsung" como "_id".

80
00:03:03,510 --> 00:03:06,880
Y vamos a, de nuevo,
crear una clave "num_products".

81
00:03:06,880 --> 00:03:09,390
Y éste era mi nombre,
es arbitrario.

82
00:03:09,390 --> 00:03:11,100
Y vamos a añadir
uno a lo que estuviera

83
00:03:11,100 --> 00:03:11,810
ahí, que es nada.

84
00:03:11,810 --> 00:03:13,740
Por lo que vamos a obtener uno.

85
00:03:13,740 --> 00:03:16,330
Y así sucesivamente, a medida
que recorremos esta colección,

86
00:03:16,330 --> 00:03:19,150
el siguiente es un producto
de "Sony".

87
00:03:19,150 --> 00:03:23,250
Así que vamos a buscar un
documento con un "_id" igual a "Sony".

88
00:03:23,250 --> 00:03:24,880
No vamos a encontrar ninguno.

89
00:03:24,880 --> 00:03:26,330
Por lo tanto vamos a crearlo --

90
00:03:26,330 --> 00:03:28,470
"_id: 'Sony'".

91
00:03:28,470 --> 00:03:32,090
Y luego lo inicializa para que 
"num_products" sea uno debido

92
00:03:32,090 --> 00:03:33,940
otra vez a ese operador "sum".

93
00:03:33,940 --> 00:03:36,020
Cuando acabamos, vamos 
a obtener el conjunto resultante de

94
00:03:36,020 --> 00:03:38,150
documentos que va
a pasar a la siguiente

95
00:03:38,150 --> 00:03:39,310
fase del pipeline.

96
00:03:39,310 --> 00:03:42,550
Y ese conjunto de documentos va
a tener un "_id" igual al

97
00:03:42,550 --> 00:03:44,740
fabricante de cada uno
de estos productos.

98
00:03:44,740 --> 00:03:48,050
Y "num_products" va a ser
el número de productos que

99
00:03:48,050 --> 00:03:50,180
fabricó cada
fabricante.

100
00:03:50,180 --> 00:03:52,965
Casi puedes ver esto,
de nuevo, como un "upsert" -- o me

101
00:03:52,965 --> 00:03:54,300
gusta pensar sobre ello
como un "upsert" --

102
00:03:54,300 --> 00:03:56,980
porque está creando documentos
en el conjunto resultante

103
00:03:56,980 --> 00:03:58,690
si no existen ya.

104
00:03:58,690 --> 00:04:01,140
Si existen, simplemente
los actualiza.

105
00:04:01,140 --> 00:04:04,240
Está ejecutando ese operador
de agregación contra el campo,

106
00:04:04,240 --> 00:04:07,100
más que contra el "_id".

107
00:04:07,100 --> 00:04:07,360
Bien.

108
00:04:07,360 --> 00:04:10,640
Así es como funciona la
agregación, de forma detallada.

109
00:04:10,640 --> 00:04:13,390
Y todo se contruye sobre este
concepto básico de ejecutar

110
00:04:13,390 --> 00:04:15,230
a través de la colección fuente.

111
00:04:15,230 --> 00:04:17,470
La colección se conoce como
colección fuente porque

112
00:04:17,470 --> 00:04:17,870
hacen

113
00:04:17,870 --> 00:04:18,959
otras fases del pipeline.

114
00:04:18,959 --> 00:04:22,510
Pero ejecutándose a través de documentos
que existían, antes de esa

115
00:04:22,510 --> 00:04:25,460
fase del pipeline, y luego
construyendo un nuevo conjunto de

116
00:04:25,460 --> 00:04:27,400
documentos con un "_id",
como se ha especificado.

117
00:04:27,400 --> 00:04:31,275
En este caso, llamamos
a nuestro "_id"

118
00:04:31,275 --> 00:04:34,460
"$manufacturer", y luego se ejecutan los
operadores de agregación sobre los

119
00:04:34,460 --> 00:04:37,110
otros campos que hemos creado,
otras claves y

120
00:04:37,110 --> 00:04:38,360
valores que hemos creado.

121
00:04:38,360 --> 00:04:39,300
OK.

122
00:04:39,300 --> 00:04:41,320
Así que hagamos un cuestionario.

123
00:04:41,320 --> 00:04:43,650
Digamos que tenemos la siguiente
colección "stuff".

124
00:04:43,650 --> 00:04:46,410
Y puedes ver aquí que tiene algunos
documentos con "a", "b" y

125
00:04:46,410 --> 00:04:49,005
"c", especificados por cada
uno de estos documentos.

126
00:04:49,005 --> 00:04:51,330
Y realizamos la siguiente
agregación,

127
00:04:51,330 --> 00:04:55,510
"db.stuff.aggregate([{$group:
{_id: '$c'}}])".

128
00:04:55,510 --> 00:04:57,940
¿Cuántos documentos estarán
en el conjunto resultante de

129
00:04:57,940 --> 00:04:59,190
la función "aggregate"?

130
00:04:59,190 --> 00:05:00,165
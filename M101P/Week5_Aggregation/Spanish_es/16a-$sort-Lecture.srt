1
00:00:00,000 --> 00:00:03,680
Muy bien, hablemos acerca de
la fase "$sort" del "pipeline"

2
00:00:03,680 --> 00:00:05,070
cuando se está agregando.

3
00:00:05,070 --> 00:00:07,350
Ahora, "$sort" hace
exactamente lo que esperas.

4
00:00:07,350 --> 00:00:10,990
Ordena los documentos, pero un
par de cosas a tener en cuenta

5
00:00:10,990 --> 00:00:12,250
cuando ordenas.

6
00:00:12,250 --> 00:00:16,630
Lo primero es que puede
usar mucha memoria.

7
00:00:16,630 --> 00:00:19,880
Aggregation Framework
no va a disco para ordenar

8
00:00:19,880 --> 00:00:20,820
por lo que sé.

9
00:00:20,820 --> 00:00:23,140
Y así que ordenará en memoria.

10
00:00:23,140 --> 00:00:26,940
Si el "$sort" está antes de un
"$group" y después de un "$match",

11
00:00:26,940 --> 00:00:28,310
pienso que puede usar un índice.

12
00:00:28,310 --> 00:00:30,480
Pero si es luego de la fase de
agrupación, no creo que pueda

13
00:00:30,480 --> 00:00:31,650
usar un índice.

14
00:00:31,650 --> 00:00:34,300
Y lo segundo para recordar
acerca de "$sort" es que

15
00:00:34,300 --> 00:00:38,270
puede ir antes o después
de la fase "$group".

16
00:00:38,270 --> 00:00:41,170
Puedes ordenar varias
veces si lo deseas.

17
00:00:41,170 --> 00:00:44,040
Y va a ser muy útil.

18
00:00:44,040 --> 00:00:47,330
Ahora, voy a mostrarte un
ordenamiento al final del

19
00:00:47,330 --> 00:00:50,740
"pipeline", que es bueno para
dar formato a un reporte.

20
00:00:50,740 --> 00:00:54,220
Sin embargo, antes que hagas una
agrupación es inclusive más útil

21
00:00:54,220 --> 00:00:56,830
en términos de agregación de
distintas piezas de datos de

22
00:00:56,830 --> 00:00:57,820
la colección.

23
00:00:57,820 --> 00:01:00,260
Así que echemos un vistazo al
ordenamiento al final del "pipeline".

24
00:01:00,260 --> 00:01:02,150
Regresamos a nuestro conjunto
de datos de códigos postales.

25
00:01:02,150 --> 00:01:05,390
Y cada documento luce como
esto, si lo recuerdas.

26
00:01:05,390 --> 00:01:10,490
Y luego vamos a simplemente añadir
un "$sort" al final de esta

27
00:01:10,490 --> 00:01:12,170
consulta que hicimos antes.

28
00:01:12,170 --> 00:01:13,480
Hace que sea un
poco más útil.

29
00:01:13,480 --> 00:01:16,610
Vamos a hacer "$match" en todos
los códigos postales en el

30
00:01:16,610 --> 00:01:17,400
estado de Nueva York.

31
00:01:17,400 --> 00:01:20,490
Vamos a agrupar por ciudad
y usar "$sum" en la

32
00:01:20,490 --> 00:01:21,580
población.

33
00:01:21,580 --> 00:01:24,150
Y luego vamos a usar "$project",
sólo para que sea un

34
00:01:24,150 --> 00:01:25,460
poco más elegante.

35
00:01:25,460 --> 00:01:28,600
Vamos a renombrar el
campo "_id" para que sea

36
00:01:28,600 --> 00:01:30,240
"city", esencialmente a través
de estas dos operaciones,

37
00:01:30,240 --> 00:01:32,220
eliminando el "_id" y
luego crea una nueva clave

38
00:01:32,220 --> 00:01:33,240
llamada "city".

39
00:01:33,240 --> 00:01:35,140
Y luego vamos a
incluir la población.

40
00:01:35,140 --> 00:01:38,040
Y luego vamos a ordenar
por población descendentemente.

41
00:01:38,040 --> 00:01:40,390
Y por supuesto esto puede
ser una clave compuesta.

42
00:01:40,390 --> 00:01:42,830
No tiene por qué ser sólo
una clave única aquí.

43
00:01:42,830 --> 00:01:45,610
Pero, en este caso, sólo
quiero ordenar por población

44
00:01:45,610 --> 00:01:46,480
descendentemente.

45
00:01:46,480 --> 00:01:48,230
Veamos cómo se ve.

46
00:01:48,230 --> 00:01:51,360
Muy bien, así que
se ve como esto.

47
00:01:51,360 --> 00:01:53,640
Voy a asegurarme que estoy
ejecutando uno aquí.

48
00:01:53,640 --> 00:01:54,750
Ahí vamos.

49
00:01:54,750 --> 00:01:55,830
Se ve como esto.

50
00:01:55,830 --> 00:02:00,370
Y puedes ver que ahora tenemos
el resultado en orden

51
00:02:00,370 --> 00:02:01,170
descendente por población.

52
00:02:01,170 --> 00:02:03,720
Así pudimos ver la mayor
ciudad en Nueva York.

53
00:02:03,720 --> 00:02:05,730
Y la mayor ciudad en Nueva York
se considera a Brooklyn,

54
00:02:05,730 --> 00:02:08,380
que es uno de los cinco condados
de la ciudad de Nueva York.

55
00:02:08,380 --> 00:02:10,270
Y de nuevo, como dije antes,
parece que en este

56
00:02:10,270 --> 00:02:12,700
conjunto de datos cada condado
tiene su propia ciudad.

57
00:02:12,700 --> 00:02:16,210
Y en realidad, más allá de eso,
así que esto es Manhattan aquí.

58
00:02:16,210 --> 00:02:17,530
Este es el Bronx.

59
00:02:17,530 --> 00:02:19,010
Este es la ciudad de Rochester.

60
00:02:19,010 --> 00:02:21,490
Y luego este es la
isla Staten, que es

61
00:02:21,490 --> 00:02:22,970
donde me crié.

62
00:02:22,970 --> 00:02:26,440
Y luego puedes ver que
Queens ha sido dividida en

63
00:02:26,440 --> 00:02:27,480
varias piezas.

64
00:02:27,480 --> 00:02:30,030
Buffalo está en una ciudad separada
pero el condado de Queens no es

65
00:02:30,030 --> 00:02:31,170
ni siquiera una ciudad.

66
00:02:31,170 --> 00:02:33,700
Está puesto como
Flushing, y Jamaica,

67
00:02:33,700 --> 00:02:35,000
y algunos otros lugares.

68
00:02:35,000 --> 00:02:38,860
Supongo que la oficina de correos
de los Estados Unidos tiene su propia

69
00:02:38,860 --> 00:02:42,000
idea de lo que es una ciudad,
curiosamente.

70
00:02:42,000 --> 00:02:43,820
Así que eso es nuevo para mí.

71
00:02:43,820 --> 00:02:47,740
Considero que Nueva York es una
ciudad ya que tiene un alcalde.

72
00:02:47,740 --> 00:02:52,240
Muy bien, hagamos ahora un
cuestionario de ordenamiento.

73
00:02:52,240 --> 00:02:55,290
Así que de nuevo, considerando la
colección "zipcodes", que tiene los

74
00:02:55,290 --> 00:02:57,090
documentos que se parecen a eso.

75
00:02:57,090 --> 00:03:01,900
Escribe una consulta de agregación
para ordenar por "state" y "city",

76
00:03:01,900 --> 00:03:03,470
ascendentemente,
ambos ascendentemente.

77
00:03:03,470 --> 00:03:05,700
Y asume que la colección
es llamada "zips".

78
00:03:05,700 --> 00:03:07,410
Y pon tu respuesta allí.

79
00:03:07,410 --> 00:03:08,660

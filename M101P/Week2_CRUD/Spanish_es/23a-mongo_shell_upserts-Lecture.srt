1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:02,730
OK, ahora conoces algunos
trucos que están disponibles para

3
00:00:02,730 --> 00:00:06,160
manipular campos dentro de
documentos usando "$set",

4
00:00:06,160 --> 00:00:08,820
"$push", "$pop",
etcétera.

5
00:00:08,820 --> 00:00:11,260
Ya mencioné anteriormente que el
operador "update" en el shell

6
00:00:11,260 --> 00:00:14,340
Mongo en realidad hace cuatro
cosas diferentes.

7
00:00:14,340 --> 00:00:17,020
Entre ellas están el reemplazo
completo de documentos,

8
00:00:17,020 --> 00:00:19,480
la manipulación de campos dentro
de un doucmento --

9
00:00:19,480 --> 00:00:20,950
aquéllos que ya hemos visto.

10
00:00:20,950 --> 00:00:23,550
Lo siguiente que el operador
"update" puede hacer es lo que

11
00:00:23,550 --> 00:00:24,970
llamamos "upsert".

12
00:00:24,970 --> 00:00:28,490
Y modela un tipo específico de 
caso de uso muy común.

13
00:00:28,490 --> 00:00:30,570
Echemos de nuevo un vistazo a nuestra
colección "people".

14
00:00:30,570 --> 00:00:33,150
Aquí tenemos nuestros documentos,
varias personas

15
00:00:33,150 --> 00:00:34,560
que tienen varios nombres.

16
00:00:34,560 --> 00:00:37,070
Ya sabemos cómo actualizar
campos dentro de documentos

17
00:00:37,070 --> 00:00:41,160
existentes, por ejemplo
"db.people.update({name:

18
00:00:41,160 --> 00:00:45,540
'Charlie'}, {$set:
age: 40})", establecerá

19
00:00:45,540 --> 00:00:47,130
la edad de Charlie a 40.

20
00:00:47,130 --> 00:00:49,410
Da la casualidad que sé que 
hay un documento con 

21
00:00:49,410 --> 00:00:50,560
"name" igual a "Charlie".

22
00:00:50,560 --> 00:00:53,280
¿Qué ocurriría si no supiera que
existe tal documento?

23
00:00:53,280 --> 00:00:56,140
Bien, si no hubiera un documento
con "name" igual a "Charlie",

24
00:00:56,140 --> 00:00:58,660
entonces esta operación "update"
no tendría efecto, porque

25
00:00:58,660 --> 00:01:01,870
no habría ningún documento
cuyo "name" fuera "Charlie".

26
00:01:01,870 --> 00:01:05,459
No es poco común tener
la necesidad de actualizar un

27
00:01:05,459 --> 00:01:08,940
documento existente o si no existe
crear un documento nuevo a partir

28
00:01:08,940 --> 00:01:10,510
de la información que
tienes a mano.

29
00:01:10,510 --> 00:01:12,310
Y para esto, tenemos
una operación

30
00:01:12,310 --> 00:01:14,940
en MongoDB llamada "upsert".

31
00:01:14,940 --> 00:01:18,770
Así que por ejemplo, si en lugar
de actualizar "Charlie", quisiera

32
00:01:18,770 --> 00:01:22,580
actualizar "George", esta operación
no tendría efecto,

33
00:01:22,580 --> 00:01:25,440
porque no hay ningún documento
cuyo "name" sea "George".

34
00:01:25,440 --> 00:01:29,180
Sin embargo, si añado como tercer
argumento algunas opciones a este

35
00:01:29,180 --> 00:01:33,310
"update", en particular "upsert:
 true", entonces MongoDB

36
00:01:33,310 --> 00:01:36,270
construirá un nuevo documento a partir
de la información que he

37
00:01:36,270 --> 00:01:39,260
especificado con "name" igual a "George"
y "age" 40.

38
00:01:39,260 --> 00:01:42,340
Esta operación "upsert" modela
el caso común donde

39
00:01:42,340 --> 00:01:45,230
podrías querer actualizar un registro
que existe o en caso contrario

40
00:01:45,230 --> 00:01:47,010
insertar uno nuevo.

41
00:01:47,010 --> 00:01:48,730
Ahora, existen algunos
casos extremos.

42
00:01:48,730 --> 00:01:52,540
Por supuesto, si la consulta que
especificas no determina suficientemente

43
00:01:52,540 --> 00:01:54,420
la información que necesita
ir dentro del documento

44
00:01:54,420 --> 00:01:57,670
resultante, entonces esos campos
se excluirán del resultado

45
00:01:57,670 --> 00:01:58,530
del "upsert".

46
00:01:58,530 --> 00:02:04,560
Por ejemplo, si hicieras
"db.people.update({age: {$gt:

47
00:02:04,560 --> 00:02:11,990
50}}, {$set: {name: "William"}})",
bien, "age" mayor que 50

48
00:02:11,990 --> 00:02:13,820
no es suficiente información
para determinar cuál

49
00:02:13,820 --> 00:02:14,640
debería ser el resultado.

50
00:02:14,640 --> 00:02:16,680
No especifica suficientemente la respuesta.

51
00:02:16,680 --> 00:02:21,160
De hecho, MongoDB creará un
documento en este caso, pero

52
00:02:21,160 --> 00:02:23,450
tendrá que omitir cualquier
campo que no tenga un

53
00:02:23,450 --> 00:02:27,160
valor concreto para rellenar
por el "upsert".

54
00:02:27,160 --> 00:02:29,090
Sin embargo, la operación
"upsert" es

55
00:02:29,090 --> 00:02:31,040
usada con bastante frecuencia.

56
00:02:31,040 --> 00:02:34,570
Por ejemplo, si estás mezclando
datos desde un proveedor de datos,

57
00:02:34,570 --> 00:02:37,530
y no sabes si un
registro ya existe, puedes

58
00:02:37,530 --> 00:02:40,250
usar de forma bastante sencilla el
operador "upsert" para 

59
00:02:40,250 --> 00:02:43,180
actualizar un registro existente
o crear uno nuevo.

60
00:02:43,180 --> 00:02:44,800
Veamos si lo entendiste.

61
00:02:44,800 --> 00:02:47,600
Tras realizar el siguiente
"update" en una colección vacía,

62
00:02:47,600 --> 00:02:51,785
"db.food.update({username:
'bar'}, {$set: {interests:

63
00:02:51,785 --> 00:02:55,910
['cat', 'dog']}}, {$upsert:
true})", ¿cuál sería el

64
00:02:55,910 --> 00:02:57,160
estado de la colección?

65
00:02:57,160 --> 00:02:57,820
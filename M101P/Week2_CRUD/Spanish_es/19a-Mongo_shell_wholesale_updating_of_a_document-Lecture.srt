1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:01,110
Muy bien.

3
00:00:01,110 --> 00:00:03,250
Ahora que hemos aprendido casi
todo lo que hay que aprender

4
00:00:03,250 --> 00:00:06,120
acerca de consultar la base
de datos, vamos a ir hacia la

5
00:00:06,120 --> 00:00:08,020
actualización de documentos
en la base de datos.

6
00:00:08,020 --> 00:00:10,310
Echemos un vistazo a
nuestra colección "people".

7
00:00:10,310 --> 00:00:13,400
En esta colección, tenemos
documentos de usuarios con nombre

8
00:00:13,400 --> 00:00:16,980
Smith, Jones, Alice, Bob,
Charlie, Dave, Edgar, Fred,

9
00:00:16,980 --> 00:00:18,750
y bueno nombre "42".

10
00:00:18,750 --> 00:00:20,540
Una vez que tengas algunos documentos
en la base de datos, es bastante

11
00:00:20,540 --> 00:00:22,830
común desear tener la posibilidad
de modificar esos documentos.

12
00:00:22,830 --> 00:00:25,860
Y así al igual que tenemos un 
método para retornar documentos

13
00:00:25,860 --> 00:00:27,990
llamado "find", tenemos un
método llamado "update" para

14
00:00:27,990 --> 00:00:29,790
modificar los documentos.

15
00:00:29,790 --> 00:00:34,670
Ahora, en el shell Mongo, el API
para actualizar, en realidad, hace

16
00:00:34,670 --> 00:00:36,500
cuatro cosas diferentes.

17
00:00:36,500 --> 00:00:38,505
Ahora mismo, vamos a
aprender uno de ellos y

18
00:00:38,505 --> 00:00:40,510
aprenderemos el resto
a medida que avancemos.

19
00:00:40,510 --> 00:00:43,830
Al igual que las consultas son métodos,
en una colección las actualizaciones

20
00:00:43,830 --> 00:00:45,270
también son métodos.

21
00:00:45,270 --> 00:00:48,710
Y las actualizaciones toman
al menos dos argumentos.

22
00:00:48,710 --> 00:00:51,510
El primer argumento es una
consulta, similar a la

23
00:00:51,510 --> 00:00:53,550
cláusula WHERE en SQL.

24
00:00:53,550 --> 00:00:56,510
Por tanto todo lo que has aprendido
acerca de "find" es aplicable a la

25
00:00:56,510 --> 00:00:58,850
consulta de documentos para
realizar actualizaciones.

26
00:00:58,850 --> 00:01:02,740
Así, por ejemplo, digamos que
deseo actualizar "Smith",

27
00:01:02,740 --> 00:01:05,470
el segundo argumento para actualizar
es un documento, y en el caso simple,

28
00:01:05,470 --> 00:01:08,990
lo que pones dentro de
ese documento reemplazará

29
00:01:08,990 --> 00:01:12,610
todo el documento que está siendo
actualizado, excepto la clave primaria.

30
00:01:12,610 --> 00:01:16,890
Si deseo encontrar un documento
con nombre "Smith" y pongo

31
00:01:16,890 --> 00:01:22,120
algunos campos aquí, digamos
"name" "Thompson" y "salary"

32
00:01:22,120 --> 00:01:26,170
"50000", entonces este "update"
actualizará lo que está en el

33
00:01:26,170 --> 00:01:29,170
documento que actualmente
existe con el nombre "Smith"

34
00:01:29,170 --> 00:01:31,530
con estos campos
que especifico

35
00:01:31,530 --> 00:01:33,250
en el segundo argumento.

36
00:01:33,250 --> 00:01:36,650
Como puedes ver, la línea de arriba
en mi ventana de terminal muestra

37
00:01:36,650 --> 00:01:40,170
el "_id" con un ObjectId
en particular y que tiene el

38
00:01:40,170 --> 00:01:41,740
nombre "Smith".

39
00:01:41,740 --> 00:01:44,700
La décima linea desde abajo
de la ventana de mi terminal

40
00:01:44,700 --> 00:01:48,650
tiene el mismo ObjectId pero ahora
el nombre es "Thompson" y el

41
00:01:48,650 --> 00:01:50,240
salario es 50000.

42
00:01:50,240 --> 00:01:52,500
Los otros dos campos de
información que existía en

43
00:01:52,500 --> 00:01:54,300
"Smith" se han ido.

44
00:01:54,300 --> 00:01:55,500
Este uso del operador

45
00:01:55,500 --> 00:01:57,720
"update" es algo rudimentario.

46
00:01:57,720 --> 00:01:59,400
MongoDB fue originalmente
diseñado como un

47
00:01:59,400 --> 00:02:00,840
tipo de almacén de objetos.

48
00:02:00,840 --> 00:02:03,440
Y en un almacén de objetos,
especialmente para un

49
00:02:03,440 --> 00:02:05,910
lenguaje dinámicamente tipado,
tal como, digamos, JavaScript o

50
00:02:05,910 --> 00:02:09,440
Python, es algo conveniente
poder decir que tengo

51
00:02:09,440 --> 00:02:12,000
un documento en la
aplicación, manipular el

52
00:02:12,000 --> 00:02:14,290
documento en la aplicación,
y ponerlo de vuelta en la

53
00:02:14,290 --> 00:02:17,190
base de datos, sin tener en cuenta
lo que ocurre en la base de datos

54
00:02:17,190 --> 00:02:19,910
para aquel documento, almacenando
sólo estas cosas que la

55
00:02:19,910 --> 00:02:22,940
aplicación tiene actualmente
para el documento.

56
00:02:22,940 --> 00:02:25,380
Este uso, sin embargo,
es algo peligroso y en una

57
00:02:25,380 --> 00:02:28,060
sección posterior, mostraremos
una forma un tanto más limitada

58
00:02:28,060 --> 00:02:31,000
para manipular campos
de un documento.

59
00:02:31,000 --> 00:02:33,320
En cualquier caso, este
reemplazo masivo es

60
00:02:33,320 --> 00:02:34,450
ocasionalmente útil.

61
00:02:34,450 --> 00:02:37,680
Por ejemplo, si estás combinando
datos en la base de datos y

62
00:02:37,680 --> 00:02:40,890
no sabes cómo o no puedes calcular
convenientemente la diferencia (delta)

63
00:02:40,890 --> 00:02:43,380
entre lo que está en la base
de datos y lo que tienes en una

64
00:02:43,380 --> 00:02:46,400
fuente externa, entonces
podrías enviar los datos desde

65
00:02:46,400 --> 00:02:50,360
la fuente externa en la base
de datos usando una clave, digo,

66
00:02:50,360 --> 00:02:51,610
una clave primaria.

67
00:02:51,610 --> 00:02:54,210
Esto es un uso
frecuente para esta

68
00:02:54,210 --> 00:02:56,500
versión de reemplazo
de actualización.

69
00:02:56,500 --> 00:02:59,240
Sin embargo, es un enfoque
algo anticuado para modificar

70
00:02:59,240 --> 00:03:01,540
datos en la base de datos,
por lo que si no necesitas

71
00:03:01,540 --> 00:03:03,720
este enfoque, puede
que no desees usarlo.

72
00:03:03,720 --> 00:03:04,070
OK.

73
00:03:04,070 --> 00:03:05,760
Hagamos un cuestionario
sobre este tema.

74
00:03:05,760 --> 00:03:06,890
Digamos que tienes
una colección con el

75
00:03:06,890 --> 00:03:09,180
siguiente documento en él.

76
00:03:09,180 --> 00:03:15,930
"{_id: "Texas", "population":
2500000, "land_locked": 1}",

77
00:03:15,930 --> 00:03:19,970
y ejecutas esta operación,
"db.foo", donde "foo" es el

78
00:03:19,970 --> 00:03:24,070
nombre de tu colección,
".update({_id: "Texas"},"

79
00:03:24,070 --> 00:03:28,900
"{population: 30000000})".

80
00:03:28,900 --> 00:03:31,670
¿Cuál sería el estado del
documento en esta colección

81
00:03:31,670 --> 00:03:32,920
luego del "update"?

82
00:03:32,920 --> 00:03:33,750

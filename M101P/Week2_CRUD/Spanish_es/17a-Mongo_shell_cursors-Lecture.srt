1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:01,860
Aprendamos un poco más
sobre qué sucede

3
00:00:01,860 --> 00:00:03,800
tras el escenario cuando
ejecutas una consulta.

4
00:00:03,800 --> 00:00:07,030
Hasta ahora, hemos estado ejecutando
consultas y viendo los resultados

5
00:00:07,030 --> 00:00:08,490
impresos en la pantalla.

6
00:00:08,490 --> 00:00:10,720
De hecho, éste es un comportamiento
adecuado para un shell

7
00:00:10,720 --> 00:00:12,360
interactivo como el shell Mongo.

8
00:00:12,360 --> 00:00:14,810
Pero lo que ocurre en realidad 
cuando ejecutas una consulta como

9
00:00:14,810 --> 00:00:19,280
"db.people.find()", y pulsas
"Enter", es que se construye un

10
00:00:19,280 --> 00:00:21,890
cursor y se devuelve
al shell.

11
00:00:21,890 --> 00:00:24,370
El shell está configurado para imprimir
cursores iterando

12
00:00:24,370 --> 00:00:26,420
a través de todos los elementos que
son recuperados del

13
00:00:26,420 --> 00:00:28,330
cursor e imprimiendo
estos elementos.

14
00:00:28,330 --> 00:00:30,770
Pero puedes retener un cursor
de igual manera que podrías retener

15
00:00:30,770 --> 00:00:33,550
cualquier otro valor en un
lenguaje de programación.

16
00:00:33,550 --> 00:00:36,100
Ahora, para evitar imprimir
el resultado de

17
00:00:36,100 --> 00:00:38,390
esta asignación, que va
a ser el cursor,

18
00:00:38,390 --> 00:00:41,000
voy a añadir algo
completamente sin sentido, como

19
00:00:41,000 --> 00:00:42,420
este valor nulo.

20
00:00:42,420 --> 00:00:45,110
En este punto, "cur" es
una variable que está

21
00:00:45,110 --> 00:00:47,430
referenciando a un cursor.

22
00:00:47,430 --> 00:00:49,700
Los objetos de tipo cursor tienen
un montón de métodos.

23
00:00:49,700 --> 00:00:52,890
Por ejemplo, el método "hasNext"
devuelve "true" mientras

24
00:00:52,890 --> 00:00:55,500
exista otro documento
por visitar en este cursor.

25
00:00:55,500 --> 00:00:58,170
Y el método "next" devuelve
el siguiente documento que será

26
00:00:58,170 --> 00:00:59,890
visitado en este cursor.

27
00:00:59,890 --> 00:01:02,680
Y así, referenciando objetos de tipo
cursor y manipulándolos

28
00:01:02,680 --> 00:01:05,750
directamente con los métodos "hasNext" y
"next", puedes controlar la

29
00:01:05,750 --> 00:01:07,250
forma en que 
avanzas por

30
00:01:07,250 --> 00:01:08,930
la secuencia de documentos.

31
00:01:08,930 --> 00:01:10,690
Esto no es algo que vayas
a hacer mucho desde el

32
00:01:10,690 --> 00:01:12,380
shell, aunque puedes hacerlo.

33
00:01:12,380 --> 00:01:14,760
En lugar de eso, es mucho más normal
hacer esa operación en un

34
00:01:14,760 --> 00:01:17,410
lenguaje de programación, 
tal como Python.

35
00:01:17,410 --> 00:01:20,120
Puedes, por ejemplo,
avanzar programáticamente por

36
00:01:20,120 --> 00:01:22,820
todos los documentos a
visitar, y ese bucle "while"

37
00:01:22,820 --> 00:01:25,170
que está cerca de la parte de abajo de
mi ventana de terminal es,

38
00:01:25,170 --> 00:01:28,560
en efecto, el comportamiento por defecto
del shell cuando está

39
00:01:28,560 --> 00:01:30,050
imprimiendo un objeto de tipo cursor --

40
00:01:30,050 --> 00:01:32,600
excepto que el shell, por
defecto, agrupa los documentos

41
00:01:32,600 --> 00:01:35,670
resultantes en grupos de 
20 para que no

42
00:01:35,670 --> 00:01:37,660
arrase tu terminal
imprimiendo infinitamente muchos

43
00:01:37,660 --> 00:01:40,440
documentos si tienes muchos
resultados de una consulta.

44
00:01:40,440 --> 00:01:42,150
Pero hay algunos métodos más
que puedes usar para

45
00:01:42,150 --> 00:01:44,035
modificar el comportamiento
de un cursor.

46
00:01:44,035 --> 00:01:46,480
Estableceré un nuevo cursor,
de nuevo, volviendo

47
00:01:46,480 --> 00:01:48,530
atrás en mi historial.

48
00:01:48,530 --> 00:01:50,510
Siempre que no hayas realmente
avanzado por el 

49
00:01:50,510 --> 00:01:53,740
cursor o comprobado para ver si
si existen documentos restantes,

50
00:01:53,740 --> 00:01:55,320
puedes imponer límites.

51
00:01:55,320 --> 00:01:58,270
Por ejemplo, el método "limit"
ordenará al servidor que

52
00:01:58,270 --> 00:02:01,300
devuelva sólo esos tantos documentos
para este cursor.

53
00:02:01,300 --> 00:02:04,360
"limit" también devolverá el cursor,
y por eso para evitar

54
00:02:04,360 --> 00:02:06,880
que imprima cosas en este
punto, voy a añadir

55
00:02:06,880 --> 00:02:08,910
este misterioso "null".

56
00:02:08,910 --> 00:02:11,370
En este punto, estoy modificando la
consulta que se va a

57
00:02:11,370 --> 00:02:13,430
enviar al servidor de base 
de datos.

58
00:02:13,430 --> 00:02:16,340
Hasta que recupere realmente algunos
documentos o compruebe para ver si

59
00:02:16,340 --> 00:02:19,420
existen documentos restantes en este
cursor, no se 

60
00:02:19,420 --> 00:02:22,330
transmite nada hacia la base de datos
y no se ejecuta ninguna consulta

61
00:02:22,330 --> 00:02:23,950
sobre la base de datos.

62
00:02:23,950 --> 00:02:26,680
Si de hecho continúo y
empiezo a recuperar documentos

63
00:02:26,680 --> 00:02:30,090
de la base de datos, la consulta se
envía con el "limit" como

64
00:02:30,090 --> 00:02:31,930
parte de la transmisión
a la base de datos.

65
00:02:31,930 --> 00:02:35,240
Y así verás que, añadiendo 
un "limit" a este cursor,

66
00:02:35,240 --> 00:02:37,720
sólo obtengo cinco documentos
de la base de datos incluso aunque

67
00:02:37,720 --> 00:02:40,400
aproximadamente existen 8
documentos en esta colección.

68
00:02:40,400 --> 00:02:42,075
Hay un par más de métodos
que puedes añadir

69
00:02:42,075 --> 00:02:43,150
a los cursores.

70
00:02:43,150 --> 00:02:46,370
El método "sort" indica a la
base de datos que devuelva los documentos

71
00:02:46,370 --> 00:02:49,480
en un orden especificado por
el argumento que se pasa al "sort".

72
00:02:49,480 --> 00:02:52,290
Por ejemplo, si quiero 
recuperar mis documentos

73
00:02:52,290 --> 00:02:54,420
en orden inverso por "name" --

74
00:02:54,420 --> 00:02:56,920
esto es, el orden inverso
lexicográfico, por "name" --

75
00:02:56,920 --> 00:03:01,280
puedo decir "name: -1" como
argumento del "sort".

76
00:03:01,280 --> 00:03:02,900
Este modificador del cursor,
como el modificador

77
00:03:02,900 --> 00:03:05,270
"limit", devuelve el cursor.

78
00:03:05,270 --> 00:03:07,620
Y para evitar que imprima
ansiosamente los

79
00:03:07,620 --> 00:03:09,180
resultados de esta consulta,
voy a 

80
00:03:09,180 --> 00:03:11,420
añadir el "null" otra vez.

81
00:03:11,420 --> 00:03:13,980
En este punto, si itero
por los documentos resultantes

82
00:03:13,980 --> 00:03:16,880
usando este bucle "while", debería
ver mis resultados en

83
00:03:16,880 --> 00:03:19,380
orden inverso por "name".

84
00:03:19,380 --> 00:03:21,840
Y de hecho, los obtengo en
orden inverso por "name",

85
00:03:21,840 --> 00:03:25,740
recordando, de nuevo, que el
ordenamiento que realizamos es

86
00:03:25,740 --> 00:03:29,800
lexicográficamente conforme a la
representación de cadenas

87
00:03:29,800 --> 00:03:33,140
codificadas en UTF-8,
es decir, en efecto,

88
00:03:33,140 --> 00:03:34,160
ordenación ASCII.

89
00:03:34,160 --> 00:03:37,220
Y por último, los enteros
se presentan al final.

90
00:03:37,220 --> 00:03:40,370
Puedes poner estas dos cosas
juntas, "limit" y "sort", más

91
00:03:40,370 --> 00:03:42,160
o menos de la forma que
podrías esperar.

92
00:03:42,160 --> 00:03:45,200
Estableceré un cursor
otra vez y le añadiré

93
00:03:45,200 --> 00:03:47,560
un "sort" y un "limit".

94
00:03:47,560 --> 00:03:48,710
Digamos tres.

95
00:03:48,710 --> 00:03:51,330
Como estos modificadores de cursor,
"sort" y "limit",

96
00:03:51,330 --> 00:03:54,440
devuelven el cursor modificado, es
posible encadenarlos

97
00:03:54,440 --> 00:03:56,070
juntos de esta manera.

98
00:03:56,070 --> 00:03:58,470
Y ahora, si avanzo por los
documentos de este cursor

99
00:03:58,470 --> 00:04:01,310
debería verlos ordenados en
orden lexicográfico inverso,

100
00:04:01,310 --> 00:04:03,210
y debería ver sólo
tres de ellos.

101
00:04:03,210 --> 00:04:04,890
Y de hecho, ahí están.

102
00:04:04,890 --> 00:04:07,630
Es importante comprender
que el método "sort" y el

103
00:04:07,630 --> 00:04:10,890
método "limit" modifican la
información que se transmite

104
00:04:10,890 --> 00:04:12,380
a la base de datos.

105
00:04:12,380 --> 00:04:15,960
No puedo aplicar estos métodos a
un cursor después de haber empezado

106
00:04:15,960 --> 00:04:18,670
a recuperar documentos de la
base de datos o incluso tras comprobar

107
00:04:18,670 --> 00:04:20,980
si el cursor tiene un documento siguiente.

108
00:04:20,980 --> 00:04:23,590
Esto es porque el "sort" y el
"limit" necesitan realmente

109
00:04:23,590 --> 00:04:25,670
ser procesados dentro
del motor de la base de datos.

110
00:04:25,670 --> 00:04:28,720
No se procesan
ordenando los documentos en

111
00:04:28,720 --> 00:04:32,040
memoria en el cliente, son
procesados ordenando y

112
00:04:32,040 --> 00:04:34,220
limitando en el servidor.

113
00:04:34,220 --> 00:04:35,970
Hay un método importante
más que necesitas conocer

114
00:04:35,970 --> 00:04:39,000
que modifica los cursores,
y se llama "skip".

115
00:04:39,000 --> 00:04:42,310
Al igual que "sort" y "limit",
modifica un cursor y devuelve

116
00:04:42,310 --> 00:04:44,070
el cursor modificado.

117
00:04:44,070 --> 00:04:48,380
Y por eso si establezco un nuevo cursor
y le añado un "sort", 

118
00:04:48,380 --> 00:04:51,190
un "limit" y un "skip", entonces las
instrucciones se envían a

119
00:04:51,190 --> 00:04:53,120
la base de datos para recuperar
los documentos de la colección

120
00:04:53,120 --> 00:04:56,990
"people", ordenados en orden
lexicográfico inverso por "name",

121
00:04:56,990 --> 00:04:59,210
saltando los primeros dos
que son visitados en esa

122
00:04:59,210 --> 00:05:02,140
ordenación y mostrando sólo los
tres documentos después que los

123
00:05:02,140 --> 00:05:04,240
primeros dos se han saltado.

124
00:05:04,240 --> 00:05:05,460
Y ahí los tenemos --

125
00:05:05,460 --> 00:05:06,910
"Fred", "Edgar", "Dave".

126
00:05:06,910 --> 00:05:09,350
Es importante comprender
que "sort", "limit" y "skip",

127
00:05:09,350 --> 00:05:13,370
que son bastante análogos a
"ORDER BY", "LIMIT" y "SKIP" en

128
00:05:13,370 --> 00:05:16,310
"SQL", son procesados en
el mismo orden --

129
00:05:16,310 --> 00:05:20,550
primero el "sort", luego "skip" y
luego "limit", en el servidor.

130
00:05:20,550 --> 00:05:22,740
No se procesan
en el cliente.

131
00:05:22,740 --> 00:05:25,430
A pesar del hecho que las llamadas
a los métodos parecen estar

132
00:05:25,430 --> 00:05:29,120
modificando un objeto en cliente,
en realidad están

133
00:05:29,120 --> 00:05:30,860
modificando las instrucciones
que se envían

134
00:05:30,860 --> 00:05:32,300
a la base de datos.

135
00:05:32,300 --> 00:05:32,750
OK.

136
00:05:32,750 --> 00:05:34,910
Si entendiste todo eso,
hagamos un cuestionario.

137
00:05:34,910 --> 00:05:36,480
Recuerda la colección "scores"
que usamos

138
00:05:36,480 --> 00:05:37,470
antes --

139
00:05:37,470 --> 00:05:41,940
conteniendo un número de estudiante, un
campo "type" y un valor "score".

140
00:05:41,940 --> 00:05:44,540
Escribe una consulta que recupere
documentos de tipo examen --

141
00:05:44,540 --> 00:05:47,080
esto es, documentos cuyo
"type" es "exam" --

142
00:05:47,080 --> 00:05:51,590
ordenados por "score" en orden
descendente, saltando los 50 primeros

143
00:05:51,590 --> 00:05:56,150
y mostrando sólo los siguientes 20
que aparecen tras los primeros 50.
1
00:00:00,000 --> 00:00:00,250

2
00:00:00,250 --> 00:00:00,970
OK.

3
00:00:00,970 --> 00:00:03,320
Como ya mencioné, el método
"update" en el shell JavaScript

4
00:00:03,320 --> 00:00:05,050
realiza en realidad
cuatro operaciones.

5
00:00:05,050 --> 00:00:07,020
Hemos visto tres
de ellas hasta ahora.

6
00:00:07,020 --> 00:00:09,700
Puede reemplazar completamente
un documento, puede

7
00:00:09,700 --> 00:00:12,790
manipular campos individuales
dentro de un documento, 

8
00:00:12,790 --> 00:00:14,550
puede realizar una operación
"upsert" --

9
00:00:14,550 --> 00:00:17,190
que es o un "update" o
un "insert" si no existe

10
00:00:17,190 --> 00:00:20,270
un documento que coincida
con los criterios especificados --

11
00:00:20,270 --> 00:00:23,740
y por último, puede actualizar
múltiples documentos.

12
00:00:23,740 --> 00:00:27,190
He sido intencionadamente astuto
y hasta ahora siempre he realizado

13
00:00:27,190 --> 00:00:30,930
actualizaciones especificando un 
criterio que coincide exactamente 

14
00:00:30,930 --> 00:00:33,370
con uno o cero documentos 
en una colección.

15
00:00:33,370 --> 00:00:36,500
Pero, de hecho, el operador
"update" puede afectar a más de

16
00:00:36,500 --> 00:00:38,220
un documento a la vez.

17
00:00:38,220 --> 00:00:40,980
Así que de nuevo, echamos un vistazo a la
colección "people", tenemos una gran

18
00:00:40,980 --> 00:00:43,070
variedad de personas con
distintos nombres.

19
00:00:43,070 --> 00:00:46,900
Si quisiera dar a cada persona
algún campo nuevo, puedo hacerlo.

20
00:00:46,900 --> 00:00:50,880
El documento vacío actúa como un
selector que coincide con cada

21
00:00:50,880 --> 00:00:52,150
documento en la colección.

22
00:00:52,150 --> 00:00:53,970
Esto es también cierto para "find".

23
00:00:53,970 --> 00:00:56,830
Y, por ejemplo, podría
querer establecer un campo nuevo.

24
00:00:56,830 --> 00:00:58,850
Quizá todo el mundo aquí
es médico.

25
00:00:58,850 --> 00:01:02,270
Ahora, una diferencia importante
entre MongoDB y las bases de datos

26
00:01:02,270 --> 00:01:07,070
relacionales es que por defecto,
incluso si el primer argumento de

27
00:01:07,070 --> 00:01:09,790
"update" es una especificación de consulta
que coincidiría

28
00:01:09,790 --> 00:01:13,930
con cada documento, el método 
"update" sólo afectaría en realidad a un

29
00:01:13,930 --> 00:01:17,010
documento único, es decir,
cualquiera que sea el

30
00:01:17,010 --> 00:01:18,830
primero que encuentre.

31
00:01:18,830 --> 00:01:22,040
Si quiero que el método "update"
afecte a todos los documentos en la

32
00:01:22,040 --> 00:01:24,250
colección, tengo que
indicar una opción.

33
00:01:24,250 --> 00:01:26,540
Y desde el shell
JavaScript, esa opción se

34
00:01:26,540 --> 00:01:28,500
llama "multi: true".

35
00:01:28,500 --> 00:01:32,220
Si no indico la opción
"multi" del método "update",

36
00:01:32,220 --> 00:01:35,420
entonces el método "update"
afectará sólo a un documento.

37
00:01:35,420 --> 00:01:37,700
De hecho, a qué documento
afecta es algo un poco

38
00:01:37,700 --> 00:01:38,520
indefinido.

39
00:01:38,520 --> 00:01:42,090
Especificando "multi: true", entonces
este "update" recorrerá

40
00:01:42,090 --> 00:01:43,870
cada documento en
la colección

41
00:01:43,870 --> 00:01:45,900
y añadirá un nuevo campo.

42
00:01:45,900 --> 00:01:47,930
Y ahora, todos tienen un campo "title".

43
00:01:47,930 --> 00:01:50,040
Es importante comprender
este detalle.

44
00:01:50,040 --> 00:01:53,380
El comportamiento por defecto de una
consulta "update" en SQL es

45
00:01:53,380 --> 00:01:55,970
actualizar cada registro que cumple
la cláusula "where", o

46
00:01:55,970 --> 00:01:59,660
cada registro en la tabla si no
se indica una cláusula "where".

47
00:01:59,660 --> 00:02:03,790
El comportamiento por defecto
en MongoDB es actualizar sólo

48
00:02:03,790 --> 00:02:05,850
un documento en la
colección.

49
00:02:05,850 --> 00:02:08,610
Debes especificar un argumento
adicional en el shell

50
00:02:08,610 --> 00:02:11,480
JavaScript para poder actualizar
múltiples documentos en una 

51
00:02:11,480 --> 00:02:12,870
colección.

52
00:02:12,870 --> 00:02:15,450
Algunos de nuestros drivers para
diferentes lenguajes de

53
00:02:15,450 --> 00:02:19,000
programación en realidad dividen esto
en dos métodos separados.

54
00:02:19,000 --> 00:02:22,160
Quizá uno llamado "update" y 
el otro llamado "multi_update".

55
00:02:22,160 --> 00:02:24,060
En el shell JavaScript,
simplemente tienes que

56
00:02:24,060 --> 00:02:25,500
añadir un argumento adicional.

57
00:02:25,500 --> 00:02:27,440
Ahora, permíteme decir algo
más sobre la semántica

58
00:02:27,440 --> 00:02:29,870
real de qué sucede cuando
realizas una operación de escritura

59
00:02:29,870 --> 00:02:32,440
multidocumento tal como
una actualización múltiple.

60
00:02:32,440 --> 00:02:35,690
En MongoDB, hay un 
único hilo de ejecución por cada

61
00:02:35,690 --> 00:02:37,760
operación que está
siendo ejecutada.

62
00:02:37,760 --> 00:02:40,960
Por lo que, por ejemplo, esta operación
"update" se realizará

63
00:02:40,960 --> 00:02:43,420
secuencialmente dentro de
un único hilo.

64
00:02:43,420 --> 00:02:47,050
Sin embargo, cada operación de escritura
que afecta a más de un

65
00:02:47,050 --> 00:02:51,550
documento es cuidadosamente codificada
de una manera multitarea

66
00:02:51,550 --> 00:02:55,310
cooperativa para ceder ocasionalmente
el control y permitir a otras

67
00:02:55,310 --> 00:02:58,350
operaciones que afecten
al mismo conjunto de datos.

68
00:02:58,350 --> 00:03:01,140
En particular, la actualización múltiple
que ves en la 

69
00:03:01,140 --> 00:03:04,320
pantalla afectó aproximadamente a
10 documentos.

70
00:03:04,320 --> 00:03:07,070
Sería posible si hubiera
otras operaciones de escritura

71
00:03:07,070 --> 00:03:11,020
entrando al sistema que esa
operación de actualización específica

72
00:03:11,020 --> 00:03:14,420
afectara, digamos, a tres documentos,
y luego se pause para

73
00:03:14,420 --> 00:03:17,250
permitir que otras operaciones
continúen, y a continuación se recupere

74
00:03:17,250 --> 00:03:20,530
de nuevo, afecte a otros
documentos más, y luego se pause para

75
00:03:20,530 --> 00:03:23,350
permitir que otras operaciones
continúen, y luego, por último, 

76
00:03:23,350 --> 00:03:25,910
finalizar con los últimos tres
documentos restantes.

77
00:03:25,910 --> 00:03:29,020
Llamamos a esto "pausing yielding"
debido al hecho que

78
00:03:29,020 --> 00:03:31,560
existe un recurso compartido que
comparten diferentes operaciones de escritura,

79
00:03:31,560 --> 00:03:34,970
el cual usamos para secuenciar
las operaciones de escritura.

80
00:03:34,970 --> 00:03:37,020
Es básicamente un tipo
de bloqueo mutex.

81
00:03:37,020 --> 00:03:39,950
Ahora, lo que es importante
comprender acerca de las

82
00:03:39,950 --> 00:03:43,250
consecuencias de la concurrencia que
estoy describiendo es que

83
00:03:43,250 --> 00:03:46,420
las operaciones de escritura, incluso si
afectan a múltiples documentos, no son

84
00:03:46,420 --> 00:03:48,540
transacciones aisladas.

85
00:03:48,540 --> 00:03:51,940
En su lugar, podrían afectar a un
número arbitrario de documentos,

86
00:03:51,940 --> 00:03:55,300
luego ceder, permitir operar a otras
lecturas o escrituras,

87
00:03:55,300 --> 00:03:58,090
y luego recuperar de nuevo el control para
afectar a algunos documentos más.

88
00:03:58,090 --> 00:04:01,320
En general, no es posible
tener una operación de escritura

89
00:04:01,320 --> 00:04:02,620
aislada que afecte a múltiples

90
00:04:02,620 --> 00:04:04,710
documentos en MongoDB.

91
00:04:04,710 --> 00:04:08,070
Sin embargo, garantizamos que
la manipulación de un documento

92
00:04:08,070 --> 00:04:11,440
individual es siempre atómica
con respecto a cualquier lectura

93
00:04:11,440 --> 00:04:13,030
o escritura concurrente.

94
00:04:13,030 --> 00:04:16,180
Es decir, si envías una
actualización al sistema que

95
00:04:16,180 --> 00:04:19,300
afectará a 10 documentos, entonces
cuando esa operación "update"

96
00:04:19,300 --> 00:04:23,080
esté afectando a cualquier documento
individual, ninguna operación de lectura o

97
00:04:23,080 --> 00:04:27,280
escritura en el sistema verá
el documento a medio actualizar.

98
00:04:27,280 --> 00:04:29,660
Esta garantía de atomicidad te permite
construir cosas sobre

99
00:04:29,660 --> 00:04:31,090
MongoDB.

100
00:04:31,090 --> 00:04:33,400
Por ejemplo, si fuera estrictamente
necesario para tu

101
00:04:33,400 --> 00:04:36,900
aplicación tener algún tipo de
asilamiento entre diferentes

102
00:04:36,900 --> 00:04:39,120
hilos, podrías, por
ejemplo, construir un mecanismo ajustado

103
00:04:39,120 --> 00:04:42,120
de bloqueo, tratando un
documento concreto en la

104
00:04:42,120 --> 00:04:45,670
base de datos como un recurso compartido
que las operaciones de escritura necesitaran

105
00:04:45,670 --> 00:04:46,910
adquirir --

106
00:04:46,910 --> 00:04:48,400
quizás actualizándolo --

107
00:04:48,400 --> 00:04:50,170
antes de realizar
cualquier operación sobre

108
00:04:50,170 --> 00:04:51,750
los datos ordinarios.

109
00:04:51,750 --> 00:04:54,230
Y de hecho, en realidad esto resulta
ser un truco que

110
00:04:54,230 --> 00:04:56,620
se utiliza dentro de una arquitectura
con Sharding.

111
00:04:56,620 --> 00:05:00,000
En cualquier caso, desde un punto de 
vista semántico, una operación de

112
00:05:00,000 --> 00:05:01,930
actualización múltiple es simplemente
un "update" que

113
00:05:01,930 --> 00:05:03,670
afecta a múltiples documentos.

114
00:05:03,670 --> 00:05:05,820
Desde una perspectiva de concurrencia,
es importante

115
00:05:05,820 --> 00:05:09,670
recordar que MongoDB no
ofrece transacciones aisladas

116
00:05:09,670 --> 00:05:11,710
mientras están sucediendo
estas actualizaciones.

117
00:05:11,710 --> 00:05:12,390
OK.

118
00:05:12,390 --> 00:05:13,570
Hagamos un cuestionario.

119
00:05:13,570 --> 00:05:15,850
Recuerda el esquema de la
colección "scores".

120
00:05:15,850 --> 00:05:19,280
Los documentos tienen un "_id", por
supuesto, un número "student", un

121
00:05:19,280 --> 00:05:21,750
campo "type" y un campo "score".

122
00:05:21,750 --> 00:05:23,870
¿Cómo darías a cada registro
cuyo "score" sea menor

123
00:05:23,870 --> 00:05:26,900
que 70 un extra de 20 puntos?
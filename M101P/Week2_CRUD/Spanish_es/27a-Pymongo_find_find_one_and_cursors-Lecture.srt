1
00:00:00,000 --> 00:00:00,750

2
00:00:00,750 --> 00:00:02,990
Soy Andrew Erlichson
aquí de nuevo.

3
00:00:02,990 --> 00:00:06,670
Voy a llevarte por las 
mismas operaciones CRUD que

4
00:00:06,670 --> 00:00:07,400
Richard te enseñó.

5
00:00:07,400 --> 00:00:11,000
Pero voy a mostrártelas
usando Python y PyMongo,

6
00:00:11,000 --> 00:00:13,030
y luego estarás listo para
la tarea de esta semana,

7
00:00:13,030 --> 00:00:16,890
que comienza a construir
ese proyecto de blog del que

8
00:00:16,890 --> 00:00:18,270
hablamos antes.

9
00:00:18,270 --> 00:00:21,180
Sólo para revisar realmente rápido
lo que vamos a hacer aquí.

10
00:00:21,180 --> 00:00:23,660
Ya has ido a través de estas operaciones en
el shell Mongo y aprendiste los

11
00:00:23,660 --> 00:00:27,730
operadores para crear, leer, actualizar 
y borrar de Mongo.

12
00:00:27,730 --> 00:00:30,610
El shell Mongo se comunica
con mongod en BSON.

13
00:00:30,610 --> 00:00:32,100
Y ahora vamos a
hacer lo mismo en

14
00:00:32,100 --> 00:00:34,080
Python usando PyMongo.

15
00:00:34,080 --> 00:00:37,330
PyMongo también se comunica
en BSON con mongod.

16
00:00:37,330 --> 00:00:39,340
Y vamos a escribir
algo de código aquí.

17
00:00:39,340 --> 00:00:41,880
Así que para empezar con esto, la
primera cosa que tenemos que hacer

18
00:00:41,880 --> 00:00:44,410
es cargar algunos datos en
la base de datos.

19
00:00:44,410 --> 00:00:47,773
Esto es algo que ya
tienes por tu parte porque

20
00:00:47,773 --> 00:00:50,000
has visto las
lecciones secuencialmente.

21
00:00:50,000 --> 00:00:52,330
Pero no lo tengo en mi
equipo, por lo que voy a

22
00:00:52,330 --> 00:00:53,430
hacerlo realmente rápido.

23
00:00:53,430 --> 00:00:57,040
Así que éste es un programa JavaScript
que voy a conectar

24
00:00:57,040 --> 00:00:58,570
al shell Mongo.

25
00:00:58,570 --> 00:01:01,960
Simplemente va a crear 100
estudiantes y tres

26
00:01:01,960 --> 00:01:04,030
tipos diferentes de evaluaciones
para ellos, "exam", "homework"

27
00:01:04,030 --> 00:01:06,460
y "quiz", y asignarles 
aleatoriamente algunas

28
00:01:06,460 --> 00:01:09,060
puntuaciones.

29
00:01:09,060 --> 00:01:10,310
Hagámoslo juntos.

30
00:01:10,310 --> 00:01:14,800

31
00:01:14,800 --> 00:01:20,330
Ejecutaré Mongo y redireccionaré
la entrada estándar al fichero.

32
00:01:20,330 --> 00:01:22,540
Esto es algo que 
probablemente sea bastante familiar

33
00:01:22,540 --> 00:01:25,400
para cualquiera del mundo 
Mac o Unix.

34
00:01:25,400 --> 00:01:26,590
Así que haremos eso.

35
00:01:26,590 --> 00:01:28,260
Y volveremos a
la salida estándar.

36
00:01:28,260 --> 00:01:30,840
Se conectó a la versión 2.2
de la base de datos,

37
00:01:30,840 --> 00:01:32,990
cambió a la base de datos "school",
y luego nos dijo

38
00:01:32,990 --> 00:01:34,210
adiós.

39
00:01:34,210 --> 00:01:36,320
Confirmemos que los datos
están ahí.

40
00:01:36,320 --> 00:01:39,710
Y hagamos "use school" y
luego "db.scores.find()".

41
00:01:39,710 --> 00:01:42,470

42
00:01:42,470 --> 00:01:45,650
Y hay datos
justo aquí.

43
00:01:45,650 --> 00:01:48,880
Y luego los imprimiremos
de forma elegante.

44
00:01:48,880 --> 00:01:50,060
Podemos ver que aquí están.

45
00:01:50,060 --> 00:01:53,180
Un conjunto de estudiantes y
cada estudiante tiene un

46
00:01:53,180 --> 00:01:56,450
tipo diferente de nota, una nota
en la tarea, una nota en el examen.

47
00:01:56,450 --> 00:01:58,580
Son algunos números aleatorios.

48
00:01:58,580 --> 00:02:01,940
Y permitimos al driver que asigne
IDs a los objetos.

49
00:02:01,940 --> 00:02:05,310
Y éstos son simplemente ObjectIds
BSON para cada uno de ellos.

50
00:02:05,310 --> 00:02:06,930
Así que comencemos.

51
00:02:06,930 --> 00:02:11,220
Vamos a enseñarte un pequeño
fichero que escribí para hacer

52
00:02:11,220 --> 00:02:12,850
"find" y "find_one".

53
00:02:12,850 --> 00:02:16,740
Empecemos con el
código para "find_one".

54
00:02:16,740 --> 00:02:18,150
Éste es el inicio del fichero.

55
00:02:18,150 --> 00:02:20,010
"using_find.py".

56
00:02:20,010 --> 00:02:22,740
Sé que un montón de gente ha
solicitado que se les envíe el

57
00:02:22,740 --> 00:02:25,620
código que estamos usando en las
lecciones e intentaré hacerlo

58
00:02:25,620 --> 00:02:27,600
esta semana.

59
00:02:27,600 --> 00:02:30,270
Empezamos por importar
PyMongo, importar "sys", hacer

60
00:02:30,270 --> 00:02:34,060
algún informe de errores y obtener
una conexión a la base de datos

61
00:02:34,060 --> 00:02:35,070
en "localhost".

62
00:02:35,070 --> 00:02:37,390
"safe = True", para que las
llamadas a "getLastError" nos

63
00:02:37,390 --> 00:02:41,300
reporten cualquier error que 
ocurra durante nuestras consultas.

64
00:02:41,300 --> 00:02:44,340
Nos conectamos a la base de datos
"school" y luego a la

65
00:02:44,340 --> 00:02:46,790
colección "scores" justo aquí.

66
00:02:46,790 --> 00:02:49,060
Y luego éste es el
código "find_one".

67
00:02:49,060 --> 00:02:51,110
Volveremos al código 
"find" en un segundo.

68
00:02:51,110 --> 00:02:54,560
El código "find_one",
configura una consulta.

69
00:02:54,560 --> 00:02:58,470
Prepara un diccionario con
"student_id" igual a 10.

70
00:02:58,470 --> 00:03:00,360
Algunas cosas a tener en cuenta sobre esto.

71
00:03:00,360 --> 00:03:03,280
Una es que 10 no tiene punto
decimal y eso es porque queremos

72
00:03:03,280 --> 00:03:05,150
que sea un entero en Python.

73
00:03:05,150 --> 00:03:08,750
La segunda es que "student_id"
está entre comillas simples.

74
00:03:08,750 --> 00:03:11,190
No necesitaría ser así en
caso de estar en el shell Mongo.

75
00:03:11,190 --> 00:03:12,430
Sería opcional.

76
00:03:12,430 --> 00:03:15,060
Pero en Python no
es opcional.

77
00:03:15,060 --> 00:03:16,870
Un literal de tipo cadena que
sea clave en un

78
00:03:16,870 --> 00:03:18,400
diccionario tiene que estar entre comillas.

79
00:03:18,400 --> 00:03:20,230
Así que la ponemos entre comillas.

80
00:03:20,230 --> 00:03:22,630
Luego vamos a
recuperar el documento.

81
00:03:22,630 --> 00:03:25,850
Vamos a asignar el resultado
a esta variable "doc".

82
00:03:25,850 --> 00:03:27,030
Vamos a llamar a "scores" --

83
00:03:27,030 --> 00:03:28,720
que es un manejador de la
colección --

84
00:03:28,720 --> 00:03:29,970
".find_one(query)".

85
00:03:29,970 --> 00:03:31,810

86
00:03:31,810 --> 00:03:37,290
Una cosa a tener en cuenta aquí es que
la función para recuperar un único

87
00:03:37,290 --> 00:03:40,910
documento desde la base de datos usando
"findOne" es "find_one".

88
00:03:40,910 --> 00:03:45,730
Si recuerdas en el shell
Mongo, era "findOne", todo en una

89
00:03:45,730 --> 00:03:50,470
palabra, con la "O" mayúscula. Ésa es
una de las ventajas e

90
00:03:50,470 --> 00:03:52,770
inconvenientes de los drivers
en Mongo.

91
00:03:52,770 --> 00:03:55,790
La ventaja es que están
escritos usando convenciones

92
00:03:55,790 --> 00:03:57,300
propias para cada lenguaje.

93
00:03:57,300 --> 00:04:00,320
Por lo que si es normal usar
guiones bajos en un lenguaje,

94
00:04:00,320 --> 00:04:02,910
entonces ésa es la forma en que se escribe
el driver de forma que parezca

95
00:04:02,910 --> 00:04:05,140
familiar a la gente que también
conoce el lenguaje.

96
00:04:05,140 --> 00:04:08,230
Como desventaja, los
drivers varían un poco.

97
00:04:08,230 --> 00:04:11,220
Por lo que podrías necesitar consultar la
documentación del API para aprender

98
00:04:11,220 --> 00:04:15,370
cómo hacer una cosa particular
con tu driver.

99
00:04:15,370 --> 00:04:17,750
Esta excepción sólo se 
llama si falla.

100
00:04:17,750 --> 00:04:19,329
No nos preocuparemos por eso.

101
00:04:19,329 --> 00:04:21,410
Y luego imprime 
"doc" justo aquí.

102
00:04:21,410 --> 00:04:24,020
Una de las grandes cosas de
Python es que es muy

103
00:04:24,020 --> 00:04:26,660
flexible a la hora de imprimir
objetos complejos.

104
00:04:26,660 --> 00:04:30,190
Así que hagamos una llamada
y veamos qué ocurre.

105
00:04:30,190 --> 00:04:32,200
Voy a volver
a mi terminal.

106
00:04:32,200 --> 00:04:34,820
Todavía estoy en Mongo aquí así
que simplemente voy a salir.

107
00:04:34,820 --> 00:04:39,110
Y ahora voy a ejecutar
"python using_find.py".

108
00:04:39,110 --> 00:04:43,580
Y podemos ver que llama
a "find_one" justo aquí --

109
00:04:43,580 --> 00:04:44,730
subo un poco
la pantalla --

110
00:04:44,730 --> 00:04:47,430
llama a "find_one", que imprime
"Reporting For Duty".

111
00:04:47,430 --> 00:04:50,960
Y luego imprime un
documento que recuperó de la

112
00:04:50,960 --> 00:04:55,440
colección con "student_id" igual a 10
con un ObjectId BSON y

113
00:04:55,440 --> 00:04:57,120
"type" igual a "exam".

114
00:04:57,120 --> 00:05:00,080
Notarás que lo ha impreso
como un número en punto flotante.

115
00:05:00,080 --> 00:05:02,080
Y creo que es una conversión
automática que

116
00:05:02,080 --> 00:05:03,980
ocurrió durante la
conversión de la cadena.

117
00:05:03,980 --> 00:05:07,730
Pero en realidad no es indicativo
que salga de ahí el

118
00:05:07,730 --> 00:05:08,270
punto flotante.

119
00:05:08,270 --> 00:05:09,650
Creo que fue convertido
para la impresión.

120
00:05:09,650 --> 00:05:13,830
Porque de hecho, es un
entero en la base de datos.

121
00:05:13,830 --> 00:05:16,210
Si recuerdas, realmente
puedes verlos justo aquí.

122
00:05:16,210 --> 00:05:16,880
Son enteros.

123
00:05:16,880 --> 00:05:19,810
No son números
en punto flotante.

124
00:05:19,810 --> 00:05:21,400
Así es como funciona "find_one".

125
00:05:21,400 --> 00:05:24,710
Por lo que la siguiente pregunta es, bien,
¿cómo funciona "find"?

126
00:05:24,710 --> 00:05:26,670
"find", tal y como hablamos --

127
00:05:26,670 --> 00:05:29,720
cambiemos nuestra función
aquí para llamar a "find".

128
00:05:29,720 --> 00:05:31,710
Hay otra función
que escribimos.

129
00:05:31,710 --> 00:05:37,490
Y "find" configura una consulta donde
"type" es "exam".

130
00:05:37,490 --> 00:05:42,130
De nuevo, "type" está entre comillas,
y "exam" está entre comillas.

131
00:05:42,130 --> 00:05:49,730
Y ahora vamos a hacer
"scores.find", el nombre de la

132
00:05:49,730 --> 00:05:51,850
colección ".find" y la consulta.

133
00:05:51,850 --> 00:05:55,240
Y eso nos va a devolver 
en realidad un cursor.

134
00:05:55,240 --> 00:05:56,270
No un iterador.

135
00:05:56,270 --> 00:05:57,700
No debería haberlo
llamado así.

136
00:05:57,700 --> 00:05:59,440
Probablemente debería haberlo
llamado "cursor".

137
00:05:59,440 --> 00:06:01,720
Y puedo cambiarlo.

138
00:06:01,720 --> 00:06:03,550
Así que nos devuelve un cursor.

139
00:06:03,550 --> 00:06:10,060
Y luego justo aquí
continuamos e iteramos sobre

140
00:06:10,060 --> 00:06:11,200
ese cursor.

141
00:06:11,200 --> 00:06:15,050
Por lo que por cada documento en el
cursor simplemente imprimimos el documento.

142
00:06:15,050 --> 00:06:17,060
Ahora no quiero imprimir
cientos de cosas, por lo que sólo

143
00:06:17,060 --> 00:06:17,740
hago una pequeña comprobación.

144
00:06:17,740 --> 00:06:21,500
Y una vez que imprime diez de ellos,
sale del bucle.

145
00:06:21,500 --> 00:06:24,750
Por lo que pone "sanity" a cero,
y lo incrementa.

146
00:06:24,750 --> 00:06:26,960
Y entonces si es mayor que
10 sale, simplemente para asegurar

147
00:06:26,960 --> 00:06:29,220
que no imprime demasiado
en la pantalla.

148
00:06:29,220 --> 00:06:31,660
Así que vamos a ejecutarlo y
ver qué ocurre.

149
00:06:31,660 --> 00:06:36,150
Vamos a ejecutar
"python using_find.py".

150
00:06:36,150 --> 00:06:40,410
Y ahora puedes ver que en este 
caso obtenemos un conjunto

151
00:06:40,410 --> 00:06:44,580
de documentos y los documentos 
son todos de tipo "exam",

152
00:06:44,580 --> 00:06:46,150
porque eso es lo que
consultamos.

153
00:06:46,150 --> 00:06:48,290
Y vienen un conjunto de
diferentes puntuaciones.

154
00:06:48,290 --> 00:06:51,950
Por lo que así es como se usa
el comando "find"

155
00:06:51,950 --> 00:06:54,390
y como se itera sobre un cursor.

156
00:06:54,390 --> 00:06:57,820
Así que ahora es momento para un cuestionario.

157
00:06:57,820 --> 00:06:59,140
Y aquí está el cuestionario.

158
00:06:59,140 --> 00:07:02,820
Aquí hay un trozo de código
que te debería ser familiar

159
00:07:02,820 --> 00:07:04,690
a partir de esta lección.

160
00:07:04,690 --> 00:07:06,680
Va a establecer una
conexión a la base de datos

161
00:07:06,680 --> 00:07:09,330
y va a obtener un manejador
para la base de datos "school" y

162
00:07:09,330 --> 00:07:10,790
la colección "scores".

163
00:07:10,790 --> 00:07:15,380
Y luego va a
hacer algo aquí.

164
00:07:15,380 --> 00:07:18,330
Y a continuación va a imprimir
el documento que recupera.

165
00:07:18,330 --> 00:07:20,760
Ahora, esto es una prueba
de "find_one".

166
00:07:20,760 --> 00:07:22,930
Así que, ¿cuál sería la línea de
código por la que habría que

167
00:07:22,930 --> 00:07:27,280
reemplazar estas XXX para que
pudiéramos poner el

168
00:07:27,280 --> 00:07:28,270
documento justo aquí?

169
00:07:28,270 --> 00:07:30,690
Por lo que si pones esa línea
de código justo 

170
00:07:30,690 --> 00:07:31,940
aquí, ése es el cuestionario.

171
00:07:31,940 --> 00:07:33,252
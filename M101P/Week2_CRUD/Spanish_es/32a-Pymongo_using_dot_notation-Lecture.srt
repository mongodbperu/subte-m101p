1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:01,070
De acuerdo.

3
00:00:01,070 --> 00:00:03,350
Hablemos sobre cómo usar
la "dot notation" en

4
00:00:03,350 --> 00:00:05,620
PyMongo en nuestras consultas.

5
00:00:05,620 --> 00:00:07,940
Justo aquí, estoy en el shell
Mongo, y he impreso

6
00:00:07,940 --> 00:00:11,910
estos artículos que están en la
página de inicio de tecnología de Reddit.

7
00:00:11,910 --> 00:00:14,500
Y me di cuenta que algunos de ellos
tienen un subtipo llamado

8
00:00:14,500 --> 00:00:18,580
"media", y otro subdocumento
llamado "oembed".

9
00:00:18,580 --> 00:00:21,460
Y justo aquí hay un subdocumento,
y tiene una clave

10
00:00:21,460 --> 00:00:24,100
"type" con el tipo "video".

11
00:00:24,100 --> 00:00:27,020
Dicho eso, de acuerdo, supongo
que algunos de estos artículos son

12
00:00:27,020 --> 00:00:28,830
vídeos, y ésta es la 
forma en que lo expresa

13
00:00:28,830 --> 00:00:30,670
Reddit en el JSON.

14
00:00:30,670 --> 00:00:34,800
Así que encontremos todos los artículos
que son vídeos.

15
00:00:34,800 --> 00:00:37,410
Para hacer eso, 
vamos a ir aquí.

16
00:00:37,410 --> 00:00:41,920
Y escribimos un pequeño script
llamado "using_dot_notation".

17
00:00:41,920 --> 00:00:44,840
Es similar al otro
que hemos enseñado.

18
00:00:44,840 --> 00:00:48,040
"import pymongo", "import sys",
obtener una conexión a

19
00:00:48,040 --> 00:00:50,670
"localhost", y luego aquí, conectar
a la base de datos "reddit", y

20
00:00:50,670 --> 00:00:52,450
a la colección "stories".

21
00:00:52,450 --> 00:00:56,740
A continuación, lo que quiero hacer es
una consulta, donde estoy buscando

22
00:00:56,740 --> 00:01:01,300
por "media.oembed.type"
igual a "video".

23
00:01:01,300 --> 00:01:04,420
Y puedes ver aquí que
puse entre comillas simples esta

24
00:01:04,420 --> 00:01:08,350
clave "media.oembed.type".

25
00:01:08,350 --> 00:01:10,960
Va a entrar en el 
documento y a buscar

26
00:01:10,960 --> 00:01:13,280
cosas que son de tipo "media".

27
00:01:13,280 --> 00:01:15,190
Ahora, lo interesante sobre 
esto, por supuesto, es que no

28
00:01:15,190 --> 00:01:17,570
todos los documentos
tienen estos

29
00:01:17,570 --> 00:01:19,060
subdocumentos dentro.

30
00:01:19,060 --> 00:01:23,260
Por lo que es muy flexible, y puede
hacer una consulta y buscar

31
00:01:23,260 --> 00:01:27,320
aquéllos donde no hay
subdocumentos con esta

32
00:01:27,320 --> 00:01:30,540
estructura, simplemente no
devolverá nada.

33
00:01:30,540 --> 00:01:33,860
Y luego, vamos a proyectar
y seleccionar los

34
00:01:33,860 --> 00:01:36,730
campos "media.oembed.url".

35
00:01:36,730 --> 00:01:40,530
Queremos ver la "url" y
suprimir el "_id".

36
00:01:40,530 --> 00:01:41,860
Notación estándar aquí.

37
00:01:41,860 --> 00:01:44,230
Vamos a hacer un "find", con
la consulta y la proyección

38
00:01:44,230 --> 00:01:45,950
en un bloque "try-catch".

39
00:01:45,950 --> 00:01:50,110
Y luego voy a imprimir
los primeros 10 de ellos.

40
00:01:50,110 --> 00:01:54,102
Así que hagamos eso,
"using_dot_notation.py".

41
00:01:54,102 --> 00:01:55,650
Estoy en el shell Mongo aquí.

42
00:01:55,650 --> 00:02:01,640
Voy a salir, y luego,
veamos, "python using_dot

43
00:02:01,640 --> 00:02:03,285
_notation.py".

44
00:02:03,285 --> 00:02:04,790
Y lo hago.

45
00:02:04,790 --> 00:02:08,690
A continuación puedes ver que lo que
obtengo es, obtengo los dos

46
00:02:08,690 --> 00:02:10,729
documentos que devuelve.

47
00:02:10,729 --> 00:02:16,900
Y lo que devuelve es un
documento que tiene una clave "media",

48
00:02:16,900 --> 00:02:21,550
y el valor es otro
documento con una clave "oembed".

49
00:02:21,550 --> 00:02:23,420
Y el valor de ésta
es otro documento

50
00:02:23,420 --> 00:02:25,530
que tiene una clave "url".

51
00:02:25,530 --> 00:02:27,160
Entonces éstas son las URLs.

52
00:02:27,160 --> 00:02:31,030
Y son URLs de YouTube, simplemente
para ver esos vídeos.

53
00:02:31,030 --> 00:02:34,000
Por lo que pudimos buscar
en la estructura de las páginas

54
00:02:34,000 --> 00:02:37,485
de Reddit publicadas en la página de
tecnología, y encontrar aquéllas que

55
00:02:37,485 --> 00:02:40,200
eran vídeos, e imprimir
los enlaces a los vídeos.

56
00:02:40,200 --> 00:02:40,940
OK.

57
00:02:40,940 --> 00:02:42,800
Hora de hacer un cuestionario.

58
00:02:42,800 --> 00:02:43,460
Bien.

59
00:02:43,460 --> 00:02:46,340
No hemos pasado exactamente sobre
esto, por lo que tendrás que

60
00:02:46,340 --> 00:02:47,810
averiguarlo de alguna forma.

61
00:02:47,810 --> 00:02:51,710
En el siguiente código, que es
esencialmente el código que

62
00:02:51,710 --> 00:02:54,420
te acabo de enseñar, ¿qué
crees que ocurrirá si el

63
00:02:54,420 --> 00:02:57,780
documento que coincide con la
consulta no tiene una clave

64
00:02:57,780 --> 00:03:00,370
llamada "media.oembed.url"?

65
00:03:00,370 --> 00:03:03,410
Por alguna razón, hay
un documento con "type" igual a "video",

66
00:03:03,410 --> 00:03:08,130
pero no tiene una URL
dentro del subdocumento.

67
00:03:08,130 --> 00:03:09,930
Así que la pregunta es,
¿qué ocurre?

68
00:03:09,930 --> 00:03:12,850
Y las opciones son
de elección múltiple.

69
00:03:12,850 --> 00:03:15,130
Que PyMongo lanzará
una excepción.

70
00:03:15,130 --> 00:03:17,940
O quizá PyMongo devolverá
un documento vacío.

71
00:03:17,940 --> 00:03:20,510
O tal vez PyMongo devolverá un
documento con la siguiente

72
00:03:20,510 --> 00:03:21,690
estructura --

73
00:03:21,690 --> 00:03:24,825
"media", "oembed", "url" con 
un documento vacío.

74
00:03:24,825 --> 00:03:28,340
Por lo que básicamente, te mostrará
el conjunto completo de subdocumentos,

75
00:03:28,340 --> 00:03:30,110
pero luego un documento vacío
en el centro.

76
00:03:30,110 --> 00:03:33,050
O no hay suficiente
información para saberlo.

77
00:03:33,050 --> 00:03:35,920
Así que por favor, marca la respuesta
que sea correcta.

78
00:03:35,920 --> 00:03:37,170
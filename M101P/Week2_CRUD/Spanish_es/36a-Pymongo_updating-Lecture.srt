1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:00,400
Bien.

3
00:00:00,400 --> 00:00:03,930
Ahora vamos a hablar acerca de
actualización de datos en PyMongo.

4
00:00:03,930 --> 00:00:07,010
Y hay varias
maneras de hacerlo.

5
00:00:07,010 --> 00:00:09,550
Una es usando el comando
"save", que es un

6
00:00:09,550 --> 00:00:11,730
método útil
que combina

7
00:00:11,730 --> 00:00:13,860
inserción y actualización.

8
00:00:13,860 --> 00:00:16,890
Si hay un "_id" establecido,
asume que es una actualización.

9
00:00:16,890 --> 00:00:20,450
Pero si no hay un "_id"
establecido cuando llamas a "save",

10
00:00:20,450 --> 00:00:23,400
entonces asume que es
una inserción.

11
00:00:23,400 --> 00:00:25,390
Y otra manera es hacer
una actualización completa.

12
00:00:25,390 --> 00:00:27,390
Y hemos visto esto
en el shell Mongo.

13
00:00:27,390 --> 00:00:29,780
Esto es donde tú identificas
qué documento deseas

14
00:00:29,780 --> 00:00:32,170
actualizar y luego establecer el

15
00:00:32,170 --> 00:00:34,570
documento completo al nuevo valor.

16
00:00:34,570 --> 00:00:37,710
Y finalmente, puedes hacer una
actualización selectiva usando

17
00:00:37,710 --> 00:00:39,010
un montón de modificadores.

18
00:00:39,010 --> 00:00:40,790
Y en esta pequeña
lección, vamos a

19
00:00:40,790 --> 00:00:42,940
enfocarnos en el modificador "$set".

20
00:00:42,940 --> 00:00:45,040
Por ello hablemos acerca
de la pequeña colección

21
00:00:45,040 --> 00:00:46,060
"scores" que hemos estado usando.

22
00:00:46,060 --> 00:00:49,040
Te voy a mostrar un
programa que escribí que

23
00:00:49,040 --> 00:00:50,390
ve la colección "scores"
y hace algunas

24
00:00:50,390 --> 00:00:51,920
modificaciones a la misma.

25
00:00:51,920 --> 00:00:54,840
Así que esto es lo que quiero
hacer con la colección "scores".

26
00:00:54,840 --> 00:00:58,220
Deseo añadir un "review_date".

27
00:00:58,220 --> 00:01:00,520
Y quiero hacerlo de
tres diferentes maneras.

28
00:01:00,520 --> 00:01:03,100
En primer lugar, vamos a hacerlo
usando "save" y te mostraré cómo

29
00:01:03,100 --> 00:01:04,150
funciona.

30
00:01:04,150 --> 00:01:06,920
Así que lo que voy a hacer es
que voy a encontrar un documento

31
00:01:06,920 --> 00:01:08,890
donde "student_id" es "1" y
"type" es "homework".

32
00:01:08,890 --> 00:01:11,160
Y voy a obtener ese
documento y voy a ponerlo

33
00:01:11,160 --> 00:01:13,020
en una variable "score".

34
00:01:13,020 --> 00:01:17,020
Y luego voy a usar Python para
establecer un "review_date" en

35
00:01:17,020 --> 00:01:20,200
el diccionario que
viene del "find_one".

36
00:01:20,200 --> 00:01:22,550
Así que lo establezco, y ahora
en realidad estoy llamando a

37
00:01:22,550 --> 00:01:24,900
"datetime.datetime.utcnow".

38
00:01:24,900 --> 00:01:27,210
He importado "datetime" en la
parte superior de este archivo.

39
00:01:27,210 --> 00:01:28,720
No te he mostrado esto antes,
pero eso es cómo obtienes

40
00:01:28,720 --> 00:01:32,230
una fecha que va a
ser un ISODate de BSON

41
00:01:32,230 --> 00:01:33,830
en MongoDB.

42
00:01:33,830 --> 00:01:35,690
Así que es una buena
función para conocer.

43
00:01:35,690 --> 00:01:39,160
Y entonces voy a actualizar
el registro con el

44
00:01:39,160 --> 00:01:41,440
método "save".

45
00:01:41,440 --> 00:01:43,350
Así que estoy
llamando a "save".

46
00:01:43,350 --> 00:01:47,970
Y lo que esperas que haga, ¿bien?,
y lo que esperas que haga--

47
00:01:47,970 --> 00:01:51,780
pues esto va a ser un
campo "_id" de este

48
00:01:51,780 --> 00:01:54,910
"find_one", esto realizará
un reemplazo completo de

49
00:01:54,910 --> 00:01:58,380
todo excepto para el
mismo ID, que es "_id",

50
00:01:58,380 --> 00:02:00,840
que es inmutable
en Mongo.

51
00:02:00,840 --> 00:02:03,110
Y voy a hacer un "find_one"
para encontrar el mismo

52
00:02:03,110 --> 00:02:05,240
registro y voy
a imprimirlo.

53
00:02:05,240 --> 00:02:07,160
Y te mostrará
eso.

54
00:02:07,160 --> 00:02:07,810
¿De acuerdo?

55
00:02:07,810 --> 00:02:10,620
Esa es la manera de llevar a cabo
la adición de un "review_date"

56
00:02:10,620 --> 00:02:12,990
al documento.

57
00:02:12,990 --> 00:02:15,700
Eso es con el comando "save".

58
00:02:15,700 --> 00:02:18,240
Pero veamos, hay otra
manera de hacerlo, que es

59
00:02:18,240 --> 00:02:19,810
usando un tradicional "update".

60
00:02:19,810 --> 00:02:23,370
Así que para hacer eso,
es muy similar.

61
00:02:23,370 --> 00:02:26,790
Vamos a llamar a
"score = scores.find_one".

62
00:02:26,790 --> 00:02:30,580
Encuentra la tarea con
"student_id" igual a "1".

63
00:02:30,580 --> 00:02:35,760
Y luego, otra vez, vamos a
establecer un "review_date".

64
00:02:35,760 --> 00:02:38,060
Pero ahora, en lugar
de llamar a "save",

65
00:02:38,060 --> 00:02:39,270
llamaremos a "update".

66
00:02:39,270 --> 00:02:41,290
Y vamos a llamar a "update",
vamos a especificar

67
00:02:41,290 --> 00:02:43,230
nuestro criterio que
vamos a buscar por este

68
00:02:43,230 --> 00:02:44,830
registro de aquí.

69
00:02:44,830 --> 00:02:46,790
Y luego que--

70
00:02:46,790 --> 00:02:48,280
justo aquí, este registro--

71
00:02:48,280 --> 00:02:51,840
y luego de esto vamos a
establecer el documento a

72
00:02:51,840 --> 00:02:54,630
lo que está en el diccionario
"score" de aquí, que es

73
00:02:54,630 --> 00:02:56,360
todo lo que obtuve antes.

74
00:02:56,360 --> 00:02:58,800
Ahora bien, si has pensado en esto
con cuidado, te darías cuenta

75
00:02:58,800 --> 00:03:03,700
que en realidad hay un
"_id" en este diccionario.

76
00:03:03,700 --> 00:03:06,130
Y por lo que parece, estoy
intentando actualizar el

77
00:03:06,130 --> 00:03:11,170
"_id", pero para Mongo está
bien que intentes hacer eso,

78
00:03:11,170 --> 00:03:14,560
siempre y cuando el "_id"
que pones aquí es el mismo

79
00:03:14,560 --> 00:03:17,050
que existe en el
documento.

80
00:03:17,050 --> 00:03:19,740
Y ese es el mismo, por lo
que no producirá un error.

81
00:03:19,740 --> 00:03:22,230
Si intentaste establecer
"_id" que fue

82
00:03:22,230 --> 00:03:26,520
distinto en este documento,
entonces sería en realidad un error.

83
00:03:26,520 --> 00:03:28,190
Y después de eso vamos a
encontrarlo, y ver si hemos

84
00:03:28,190 --> 00:03:32,240
añadido satisfactoriamente un
"review_date" a dicho documento.

85
00:03:32,240 --> 00:03:37,650
Y luego, la última forma de
hacer esto es usando "$set".

86
00:03:37,650 --> 00:03:41,110
Ahora usando "$set" es más
eficiente en el sentido que

87
00:03:41,110 --> 00:03:44,360
sólo vamos a actualizar una
pequeña parte del documento,

88
00:03:44,360 --> 00:03:46,070
en lugar de escribir
todo el documento.

89
00:03:46,070 --> 00:03:48,450
Ahora, estos documentos son
muy pequeños y realmente no

90
00:03:48,450 --> 00:03:51,310
importa si escribe todo el
documento o si escribe una

91
00:03:51,310 --> 00:03:52,270
pequeña parte de él.

92
00:03:52,270 --> 00:03:54,430
Pero si el documento fuera
muy grande, no desearías

93
00:03:54,430 --> 00:03:57,070
escribir todo el documento
cuando sólo podrías escribir una

94
00:03:57,070 --> 00:03:58,190
pequeña parte de él.

95
00:03:58,190 --> 00:04:00,130
Así que veamos cómo se hace eso.

96
00:04:00,130 --> 00:04:02,370
Bueno, si vas a usar "$set" para
hacer esto, una vez más, haces un

97
00:04:02,370 --> 00:04:07,430
"find_one" para encontrar el
documento donde "student_id" es 1.

98
00:04:07,430 --> 00:04:10,850
A continuación vamos a, otra vez,
usar "update", pero esta vez

99
00:04:10,850 --> 00:04:13,690
vamos a usar
el operador "$set".

100
00:04:13,690 --> 00:04:15,390
Por ello el criterio es el mismo.

101
00:04:15,390 --> 00:04:18,060
Vamos a encontrar el documento
con "student_id" "1",

102
00:04:18,060 --> 00:04:19,190
"type" "homework".

103
00:04:19,190 --> 00:04:20,640
Pero ahora estamos usando "$set".

104
00:04:20,640 --> 00:04:23,410
Y nota las comillas simples
alrededor de "$set".

105
00:04:23,410 --> 00:04:28,600
Y vamos a establecer
"review_date" igual a "utcnow".

106
00:04:28,600 --> 00:04:32,140
Y luego, una vez más, vamos
a encontrar el registro y

107
00:04:32,140 --> 00:04:34,380
vamos a imprimirlo.

108
00:04:34,380 --> 00:04:39,630
Así que tengo este programa para ser
ejecutado de tres distintas maneras,

109
00:04:39,630 --> 00:04:41,970
usando "save", usando "update",
usando "$set".

110
00:04:41,970 --> 00:04:43,680
Y luego estaba esta
pequeña función--

111
00:04:43,680 --> 00:04:46,010
hay otra función
que escribí llamada

112
00:04:46,010 --> 00:04:47,290
"remove_review_date".

113
00:04:47,290 --> 00:04:49,040
Y eso sólo va a eliminar
todos los "review_date" de

114
00:04:49,040 --> 00:04:49,475
todos los registros.

115
00:04:49,475 --> 00:04:50,970
Y te voy a mostrar
cómo funciona.

116
00:04:50,970 --> 00:04:53,840
En realidad demuestra
el uso de "multi".

117
00:04:53,840 --> 00:04:56,280
Así que te voy a enseñar eso.

118
00:04:56,280 --> 00:04:58,310
Aquí está "remove_review_date".

119
00:04:58,310 --> 00:05:00,640
Vamos a, otra vez, obtener una
variable para la base de datos.

120
00:05:00,640 --> 00:05:05,440
Y luego vamos a llamar a
"score.update", todos los documentos,

121
00:05:05,440 --> 00:05:08,265
"$unset", "review_date",
"multi=true".

122
00:05:08,265 --> 00:05:10,950

123
00:05:10,950 --> 00:05:14,740
Y esta es una sintaxis un
poco distinta a la que hacemos

124
00:05:14,740 --> 00:05:15,770
en el shell Mongo.

125
00:05:15,770 --> 00:05:18,050
Es un parámetro con nombre aquí.

126
00:05:18,050 --> 00:05:20,950
Si recuerdas, en el
shell Mongo, es el cuarto

127
00:05:20,950 --> 00:05:22,490
argumento para el "update".

128
00:05:22,490 --> 00:05:24,570
El tercero se trata de
"upsert" y el cuarto es

129
00:05:24,570 --> 00:05:26,710
cuando es un "multi-update".

130
00:05:26,710 --> 00:05:29,230
Así que esto es sólo para eliminar
los "review_date" de todos los

131
00:05:29,230 --> 00:05:31,910
registros, todos los documentos,
para asegurar que esté limpio.

132
00:05:31,910 --> 00:05:32,390
Muy bien.

133
00:05:32,390 --> 00:05:36,080
Ejecutémoslo,
y veamos qué ocurre.

134
00:05:36,080 --> 00:05:36,900
OK.

135
00:05:36,900 --> 00:05:38,630
Entonces, ¿qué pasó?

136
00:05:38,630 --> 00:05:41,030
Bueno, esto eliminó
todos los "review_date".

137
00:05:41,030 --> 00:05:43,820
Ahora va a intentar otro
comando usando "save".

138
00:05:43,820 --> 00:05:47,100
Antes esto trae este
documento, puedes ver que

139
00:05:47,100 --> 00:05:49,040
no tiene un
"review_date" en él.

140
00:05:49,040 --> 00:05:52,690
Tiene un "score"
de 21.995, etcétera.

141
00:05:52,690 --> 00:05:57,440
Y luego, lo hago usando "save",
ahora va a obtener un

142
00:05:57,440 --> 00:05:58,490
"review_date" con un "datetime".

143
00:05:58,490 --> 00:06:01,385
Y puedes ver la manera en
que es mostrada en Python.

144
00:06:01,385 --> 00:06:04,150
Se ve un poco diferente si
lo haces en el shell Mongo.

145
00:06:04,150 --> 00:06:06,090
Así que funcionó bien.

146
00:06:06,090 --> 00:06:08,910
Y luego, elimina todos los
"review_date" otra vez.

147
00:06:08,910 --> 00:06:12,810
Y ahora, no usando "save", sino
usando un completo "update",

148
00:06:12,810 --> 00:06:16,290
puedes ver que, otra vez, el
"review_date" no está cuando

149
00:06:16,290 --> 00:06:20,030
primero traigo el documento,
y lo presento cuando hago el

150
00:06:20,030 --> 00:06:21,570
segundo "find_one".

151
00:06:21,570 --> 00:06:24,120
Y puedes ver que el tiempo está
cambiando, lo cual está bien.

152
00:06:24,120 --> 00:06:25,990
Eso es lo que se esperaba,
porque está ocurriendo una

153
00:06:25,990 --> 00:06:27,660
y otra vez, estoy quitando
los "review_date", y

154
00:06:27,660 --> 00:06:29,190
luego añado un nuevo "review_date".

155
00:06:29,190 --> 00:06:32,260
Y por último, usando un comando
"$set", donde sólo estoy

156
00:06:32,260 --> 00:06:34,060
estableciendo una clave.

157
00:06:34,060 --> 00:06:35,960
Funciona exactamente de la misma forma.

158
00:06:35,960 --> 00:06:37,200
Saco el documento.

159
00:06:37,200 --> 00:06:38,930
Otra vez, el "review_date"
está faltando porque ya lo he

160
00:06:38,930 --> 00:06:39,710
eliminado.

161
00:06:39,710 --> 00:06:42,600
Y después de eso, lo puse,
y entonces puedes ver que la

162
00:06:42,600 --> 00:06:43,490
fecha ha sido establecida.

163
00:06:43,490 --> 00:06:45,280
Y una vez más, la fecha es
un poco distinta porque

164
00:06:45,280 --> 00:06:48,170
ha pasado algún tiempo
entre las actualizaciones.

165
00:06:48,170 --> 00:06:48,560
Muy bien.

166
00:06:48,560 --> 00:06:50,860
Así que es hora para un cuestionario.

167
00:06:50,860 --> 00:06:53,080
Aquí está el cuestionario.

168
00:06:53,080 --> 00:06:55,200
En el siguiente fragmento de
código, ¿cuál es la expresión en

169
00:06:55,200 --> 00:06:58,870
Python en lugar de "xxxx",
para establecer una nueva clave

170
00:06:58,870 --> 00:07:01,050
"examiner" igual a "Jones".

171
00:07:01,050 --> 00:07:03,140
Por favor usa el operador "$set".

172
00:07:03,140 --> 00:07:06,720
Y puedes ver que esto
es muy similar al

173
00:07:06,720 --> 00:07:08,600
código que te mostré.

174
00:07:08,600 --> 00:07:12,410
Pero ahora, hay un "update" aquí,
y hemos dejado en blanco lo que

175
00:07:12,410 --> 00:07:17,310
necesitas poner aquí en
Python para establecer la

176
00:07:17,310 --> 00:07:19,970
clave "examiner" a "Jones".

177
00:07:19,970 --> 00:07:23,370
Así que vas a
poner eso aquí.

178
00:07:23,370 --> 00:07:24,620
Y esa es la pregunta.

179
00:07:24,620 --> 00:07:25,430

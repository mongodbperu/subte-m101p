1
00:00:00,000 --> 00:00:00,120

2
00:00:00,120 --> 00:00:00,600
OK.

3
00:00:00,600 --> 00:00:03,130
Hemos recorrido un largo
camino en esta unidad.

4
00:00:03,130 --> 00:00:05,980
Lo que nos queda es hablar un
poco acerca de inserción,

5
00:00:05,980 --> 00:00:09,100
actualización y eliminación de
datos en PyMongo, que es muy

6
00:00:09,100 --> 00:00:11,190
similar a la manera con la que
funciona con el shell Mongo.

7
00:00:11,190 --> 00:00:13,410
Así que no tomaremos tanto
tiempo, aunque hay algunas

8
00:00:13,410 --> 00:00:15,320
sutilezas para la inserción.

9
00:00:15,320 --> 00:00:18,190
Y luego vamos a hablar
un poco acerca del blog,

10
00:00:18,190 --> 00:00:20,290
y del trabajo que vas a
realizar para eso en la

11
00:00:20,290 --> 00:00:21,390
tarea de esta semana.

12
00:00:21,390 --> 00:00:23,100
Y eso es todo.

13
00:00:23,100 --> 00:00:25,440
Empecemos por hablar
acerca de inserciones.

14
00:00:25,440 --> 00:00:28,740
He escrito un pequeño programa
aquí en Python que va a

15
00:00:28,740 --> 00:00:32,030
insertar dos documentos
en la base de datos.

16
00:00:32,030 --> 00:00:35,650
Ahora, en el primer caso, he
nombrado a este documento como "richard".

17
00:00:35,650 --> 00:00:39,720
Y puedes ver que
no tiene un "_id".

18
00:00:39,720 --> 00:00:42,990
Y en el segundo caso, tengo
otro documento llamado "andrew",

19
00:00:42,990 --> 00:00:45,590
que sí tiene un "_id".

20
00:00:45,590 --> 00:00:48,550
Ahora, si recuerdas de la
primera unidad, el driver

21
00:00:48,550 --> 00:00:51,270
PyMongo, y todos los drivers
en general, establecerán un

22
00:00:51,270 --> 00:00:54,790
"_id" y crearán un ObjectId
BSON si no hay ninguno

23
00:00:54,790 --> 00:00:58,490
establecido en los datos
que vienen en el "insert".

24
00:00:58,490 --> 00:01:02,410
Por esto después que los
insertamos, vamos a ver e

25
00:01:02,410 --> 00:01:05,239
imprimir, en Python, el valor

26
00:01:05,239 --> 00:01:06,860
de estos dos registros.

27
00:01:06,860 --> 00:01:08,620
Y lo que haré es sólo
imprimirlos en el mismo orden

28
00:01:08,620 --> 00:01:10,820
en que los estoy insertando.

29
00:01:10,820 --> 00:01:12,860
Muy bien, así que hagamos eso.

30
00:01:12,860 --> 00:01:16,535
Vamos a ejecutar
el programa.

31
00:01:16,535 --> 00:01:19,200
Y una vez que hacemos esto,
podemos ver que imprime el

32
00:01:19,200 --> 00:01:22,710
primero, el que es
"richard".

33
00:01:22,710 --> 00:01:26,190
En este caso, el driver
añadió un "_id" y un

34
00:01:26,190 --> 00:01:28,510
ObjectId BSON.

35
00:01:28,510 --> 00:01:31,590
Y en el segundo caso,
donde ya he provisto un

36
00:01:31,590 --> 00:01:34,900
"_id" es Erlichson,
no añadió ninguno.

37
00:01:34,900 --> 00:01:36,780
Por tanto eso es interesante.

38
00:01:36,780 --> 00:01:39,620
Ahora, ¿qué ocurre si ejecutamos
el programa de nuevo?

39
00:01:39,620 --> 00:01:42,540
¿Qué se espera
que ocurra?

40
00:01:42,540 --> 00:01:44,090
Así que hagamos eso.

41
00:01:44,090 --> 00:01:50,960
Y la respuesta es que la primera
inserción tiene éxito con un

42
00:01:50,960 --> 00:01:53,720
nuevo ObjectId.

43
00:01:53,720 --> 00:01:55,920
A diferencia del primero,
porque el driver con suerte

44
00:01:55,920 --> 00:01:57,410
añade uno nuevo.

45
00:01:57,410 --> 00:02:00,760
Pero la segunda inserción,
donde especifiqué el ID,

46
00:02:00,760 --> 00:02:01,510
fracasará.

47
00:02:01,510 --> 00:02:04,870
Y podemos confirmar
yendo a Mongo, usando la

48
00:02:04,870 --> 00:02:09,550
colección "schools" y luego
buscamos en esa colección,

49
00:02:09,550 --> 00:02:11,880
"people."--

50
00:02:11,880 --> 00:02:13,910
Creo que es "school".

51
00:02:13,910 --> 00:02:17,370
Y luego ver en la
colección "people".

52
00:02:17,370 --> 00:02:22,060
Y cuando lo hacemos,
podemos ver que, en efecto,

53
00:02:22,060 --> 00:02:24,330
Richard aparece dos veces allí

54
00:02:24,330 --> 00:02:28,850
Y yo aparezco una vez, porque
hubo un error por clave duplicada

55
00:02:28,850 --> 00:02:31,570
cuando intenté
insertarlo de nuevo.

56
00:02:31,570 --> 00:02:32,210
¿De acuerdo?

57
00:02:32,210 --> 00:02:37,380
Como una acotación, la razón por
la cual el driver creó el

58
00:02:37,380 --> 00:02:39,320
"_id" y no
la base de datos--

59
00:02:39,320 --> 00:02:40,540
es por algo de historia.

60
00:02:40,540 --> 00:02:44,160
Pero fue para permitir
escrituras muy rápidas.

61
00:02:44,160 --> 00:02:46,650
Podrías enviar una escritura
a la base de datos con un único

62
00:02:46,650 --> 00:02:50,230
"_id" y luego no
esperar la respuesta.

63
00:02:50,230 --> 00:02:52,300
Ahora, tenemos el modo seguro (safe)
en "True", así que estamos esperando

64
00:02:52,300 --> 00:02:53,860
una respuesta de todos modos.

65
00:02:53,860 --> 00:02:55,090
Así que en realidad no importa.

66
00:02:55,090 --> 00:02:58,090
Y también, si has estado
siguiendo esto, o si eres

67
00:02:58,090 --> 00:03:02,070
consciente del modo por defecto
que es "safe" igual a "False"

68
00:03:02,070 --> 00:03:04,930
en MongoDB, sólo quería
permitirte saber que en las

69
00:03:04,930 --> 00:03:09,050
próximas semanas, uno de los planes
para MongoDB es que el modo seguro

70
00:03:09,050 --> 00:03:11,110
va a ser establecido
en "True" por defecto.

71
00:03:11,110 --> 00:03:14,610
Así que ese tipo de cosas obvian
la necesidad para que el ObjectId

72
00:03:14,610 --> 00:03:17,120
sea establecido por el driver,
pero siempre ha sido así.

73
00:03:17,120 --> 00:03:20,200
Así que supongo que probablemente
seguirá siendo así.

74
00:03:20,200 --> 00:03:23,670
Pero esa fue la razón original
por la que los drivers estaban

75
00:03:23,670 --> 00:03:25,060
creando los ObjectId.

76
00:03:25,060 --> 00:03:27,750
Fue para permitirte enviar una
escritura a la base de datos y no

77
00:03:27,750 --> 00:03:30,140
esperar una respuesta, y
conocer cuál es el ID que va a

78
00:03:30,140 --> 00:03:31,310
tener cuando esto sucedió.

79
00:03:31,310 --> 00:03:32,200
OK.

80
00:03:32,200 --> 00:03:34,190
Es hora de un cuestionario.

81
00:03:34,190 --> 00:03:35,820
Aquí está el cuestionario.

82
00:03:35,820 --> 00:03:39,640
En este código de aquí, que
parece similar al código que

83
00:03:39,640 --> 00:03:43,880
tuvimos antes, donde tenemos un
conjunto de documentos con mi nombre

84
00:03:43,880 --> 00:03:47,100
y algunos intereses, si
intentas insertarlo--

85
00:03:47,100 --> 00:03:50,320
tengo una primera inserción aquí,
y luego la eliminación del

86
00:03:50,320 --> 00:03:53,740
"_id" aquí, y luego una
segunda inserción aquí--

87
00:03:53,740 --> 00:03:57,480
¿Qué se espera que suceda
con la segunda inserción?

88
00:03:57,480 --> 00:03:58,120
¿De acuerdo?

89
00:03:58,120 --> 00:04:00,520
¿Qué se espera que
suceda y cuál es tu

90
00:04:00,520 --> 00:04:01,980
explicación para eso?

91
00:04:01,980 --> 00:04:04,430
Y hay una sola respuesta para
esta pregunta de aquí.

92
00:04:04,430 --> 00:04:05,680
Y aquí están las respuestas.

93
00:04:05,680 --> 00:04:06,510

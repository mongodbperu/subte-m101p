1
00:00:00,000 --> 00:00:00,210

2
00:00:00,210 --> 00:00:04,000
Vamos a repasar algunas características
internas del proyecto de blog.

3
00:00:04,000 --> 00:00:07,470
Sólo hay tres
colecciones que serán

4
00:00:07,470 --> 00:00:09,710
creadas en este proyecto
durante el curso.

5
00:00:09,710 --> 00:00:11,700
Una es la colección de posts.

6
00:00:11,700 --> 00:00:13,510
La otra es la colección
de usuarios.

7
00:00:13,510 --> 00:00:16,460
Y la última es la
colección de sesiones.

8
00:00:16,460 --> 00:00:19,050
Verás que en la tarea
de esta semana,

9
00:00:19,050 --> 00:00:20,130
todavía no hay posts.

10
00:00:20,130 --> 00:00:22,760
Solamente usuarios y sesiones.

11
00:00:22,760 --> 00:00:24,800
Vamos a ir a través de los archivos.

12
00:00:24,800 --> 00:00:28,120
Vamos a ver lo que
hay en el directorio.

13
00:00:28,120 --> 00:00:29,750
Hay un archivo blog.py.

14
00:00:29,750 --> 00:00:32,570
Ese es el archivo principal
que tiene el controlador que

15
00:00:32,570 --> 00:00:34,700
controla la interfaz para el blog.

16
00:00:34,700 --> 00:00:36,840
Y luego hay un objeto para el
acceso a datos de sesiones,

17
00:00:36,840 --> 00:00:38,800
abreviado como "sessionDAO".

18
00:00:38,800 --> 00:00:42,450
Y luego hay un archivo "userDAO",
conteniendo todo el código

19
00:00:42,450 --> 00:00:44,910
para acceder a la
colección de usuarios.

20
00:00:44,910 --> 00:00:47,920
Y luego hay un montón de
vistas en el directorio "views",

21
00:00:47,920 --> 00:00:50,390
que son las plantillas
HTML que vamos a

22
00:00:50,390 --> 00:00:53,260
combinar con alguna de las
salidas de sus funciones para

23
00:00:53,260 --> 00:00:54,610
producir la interfaz de usuario.

24
00:00:54,610 --> 00:00:56,490
Y luego también tendrás
un programa de validación para

25
00:00:56,490 --> 00:00:57,990
validar el blog.

26
00:00:57,990 --> 00:01:00,890
Estoy mostrándote los
archivos usando PyCharm.

27
00:01:00,890 --> 00:01:04,849
PyCharm es un entorno de
desarrollo de JetBrains

28
00:01:04,849 --> 00:01:06,030
que puedes descargar.

29
00:01:06,030 --> 00:01:07,320
No es gratis.

30
00:01:07,320 --> 00:01:10,820
Pero en realidad tenemos una
licencia de evaluación de uso

31
00:01:10,820 --> 00:01:14,050
para estudiantes, que está en
los formularios para el curso

32
00:01:14,050 --> 00:01:15,240
que inicia en abril.

33
00:01:15,240 --> 00:01:17,920
Esperemos que JetBrains
nos de otra para los

34
00:01:17,920 --> 00:01:19,500
cursos posteriores.

35
00:01:19,500 --> 00:01:20,970
Es una licencia de 90 días.

36
00:01:20,970 --> 00:01:22,210
Así que puedes jugar con él.

37
00:01:22,210 --> 00:01:23,730
Y entonces si te gusta
lo puedes comprar.

38
00:01:23,730 --> 00:01:25,540
Y si no te gusta,
no necesitas usarlo.

39
00:01:25,540 --> 00:01:27,660
No necesitas usar PyCharm.

40
00:01:27,660 --> 00:01:32,460
Puedes también usar Emacs o
Vim o Sublime Text.

41
00:01:32,460 --> 00:01:33,135
Todos ellos funcionan.

42
00:01:33,135 --> 00:01:35,370
Pero lo bueno de PyCharm
es que, aparte del

43
00:01:35,370 --> 00:01:37,630
coloreado de sintaxis que
que tienes en todos los editores,

44
00:01:37,630 --> 00:01:39,865
te da un poco de información
cuando las variables no son usadas.

45
00:01:39,865 --> 00:01:42,290
Y te dice
qué código no

46
00:01:42,290 --> 00:01:44,300
sigue el idioma Pitónico.

47
00:01:44,300 --> 00:01:48,060
Por ejemplo, si dices si
algo es igual a None--

48
00:01:48,060 --> 00:01:51,260
y normalmente escribirías
si algo es None en Python--

49
00:01:51,260 --> 00:01:52,510
lo señalará.

50
00:01:52,510 --> 00:01:54,230
Puedes verlos
justo aquí.

51
00:01:54,230 --> 00:01:56,260
Están estas pequeñas
cosas que te indican

52
00:01:56,260 --> 00:01:57,470
y advierten.

53
00:01:57,470 --> 00:01:59,800
Algunas de las advertencias
no son en realidad correctas.

54
00:01:59,800 --> 00:02:01,870
Pero muchas de ellas son
advertencias útiles.

55
00:02:01,870 --> 00:02:04,940
Y como un novato usuario de Python,
pienso que esto puede ser realmente

56
00:02:04,940 --> 00:02:05,920
interesante.

57
00:02:05,920 --> 00:02:07,740
Si tienes experiencia en
Python, probablemente ya

58
00:02:07,740 --> 00:02:08,710
tienes tus hábitos establecidos.

59
00:02:08,710 --> 00:02:11,510
Y probablemente
no importa.

60
00:02:11,510 --> 00:02:12,870
Vamos a través del código.

61
00:02:12,870 --> 00:02:15,800
Lo primero que deseo
mostrarte es blog.py.

62
00:02:15,800 --> 00:02:18,920
Y blog.py es el controlador.

63
00:02:18,920 --> 00:02:22,750
Tiene todas estas diferentes
funciones que serán llamadas como

64
00:02:22,750 --> 00:02:27,060
manejadores para solicitudes a
particulares URLs para nuestro blog.

65
00:02:27,060 --> 00:02:30,050
Y la forma en que estos se
hacen en Bottle es con estos

66
00:02:30,050 --> 00:02:33,660
decoradores, donde la función
es decorada.

67
00:02:33,660 --> 00:02:37,710
Puedes ver aquí, este
decorador "bottle.route("/")"

68
00:02:37,710 --> 00:02:41,670
que dice que esta
función va a ser

69
00:02:41,670 --> 00:02:45,500
usada para manejar las llamadas
para la URL principal de tu blog.

70
00:02:45,500 --> 00:02:47,770
Esta función en particular no
está implementada aún en esta

71
00:02:47,770 --> 00:02:48,800
parte del curso.

72
00:02:48,800 --> 00:02:50,270
Vamos a llegar
a esto más tarde.

73
00:02:50,270 --> 00:02:51,840
Es sólo un placeholder.

74
00:02:51,840 --> 00:02:55,070
A pesar que se va a devolver
un archivo de plantilla.

75
00:02:55,070 --> 00:02:57,100
Una plantilla que dice:
"Esto es un placeholder".

76
00:02:57,100 --> 00:02:59,350
Y voy a llegar a las
plantillas en un segundo.

77
00:02:59,350 --> 00:03:02,710
Puedes ver aquí que con el fin de
tener un usuario registrado para

78
00:03:02,710 --> 00:03:05,100
el blog, esta es la
ruta de registro.

79
00:03:05,100 --> 00:03:09,100
Entonces, en este caso, no hay
nada que hacer excepto retornar

80
00:03:09,100 --> 00:03:10,490
la plantilla de registro.

81
00:03:10,490 --> 00:03:13,500
Y en realidad establece algunos
valores iniciales y se los entrega

82
00:03:13,500 --> 00:03:14,940
a la plantilla
como un diccionario.

83
00:03:14,940 --> 00:03:15,980
Esa es la plantilla de registro.

84
00:03:15,980 --> 00:03:17,320
Echemos un vistazo a la
plantilla de registro.

85
00:03:17,320 --> 00:03:19,150
Así que llamaré a esta plantilla.

86
00:03:19,150 --> 00:03:22,010
Y puedes ver que esta plantilla
tiene alguna información mínima

87
00:03:22,010 --> 00:03:22,750
con estilos.

88
00:03:22,750 --> 00:03:24,880
Y esta es una plantilla HTML.

89
00:03:24,880 --> 00:03:28,250
Luego puedes ver
aquí que esto es

90
00:03:28,250 --> 00:03:29,420
en realidad un archivo HTML.

91
00:03:29,420 --> 00:03:33,330
Pero hay lugares en particular
donde Bottle realizará

92
00:03:33,330 --> 00:03:35,230
sustituciones para
variables de Python.

93
00:03:35,230 --> 00:03:38,530
En particular, estos dobles
corchetes indican que

94
00:03:38,530 --> 00:03:41,020
este valor será reemplazado
por el valor de la variable

95
00:03:41,020 --> 00:03:42,440
cuando sea ejecutado.

96
00:03:42,440 --> 00:03:45,170
Así que esa es la forma en que funciona.

97
00:03:45,170 --> 00:03:47,460
Volvamos a
blog.py otra vez.

98
00:03:47,460 --> 00:03:50,690
Y luego cuando el usuario hace
algo, por lo general lo llamará

99
00:03:50,690 --> 00:03:54,750
en una de estas
clases.

100
00:03:54,750 --> 00:03:57,170
Por ejemplo, esto
de aquí es el ingreso.

101
00:03:57,170 --> 00:03:57,930
Esto toma los datos de ingreso.

102
00:03:57,930 --> 00:03:59,100
Obtiene el nombre de usuario
y la contraseña.

103
00:03:59,100 --> 00:04:01,190
Y llama a validar los datos.

104
00:04:01,190 --> 00:04:04,990
Y para hacerlo llama a
"users.validate_login".

105
00:04:04,990 --> 00:04:07,060
Y el usuario será establecido--

106
00:04:07,060 --> 00:04:08,540
esto parece un poco confuso,
en realidad.

107
00:04:08,540 --> 00:04:10,330
Permíteme explicarlo.

108
00:04:10,330 --> 00:04:13,730
En la parte inferior del programa,
puedes ver que esto

109
00:04:13,730 --> 00:04:16,300
esencialmente es lo
principal en Bottle.py.

110
00:04:16,300 --> 00:04:18,480
Puedes ver que establece
arriba una variable "users".

111
00:04:18,480 --> 00:04:21,279
Y crea una nueva instancia de la
clase "User Data Access

112
00:04:21,279 --> 00:04:24,620
Object", "userDAO", dándole
la base de datos.

113
00:04:24,620 --> 00:04:26,480
Y lo mismo
para las sesiones.

114
00:04:26,480 --> 00:04:29,880
Por lo que cuando ves que llama a
"users" de esa manera, por ejemplo,

115
00:04:29,880 --> 00:04:33,890
en "process_login", lo que
estás viendo es una llamada a

116
00:04:33,890 --> 00:04:35,870
este objeto "userDAO".

117
00:04:35,870 --> 00:04:37,900
No te voy a mostrar
el objeto ahora mismo.

118
00:04:37,900 --> 00:04:39,810
Porque esto es lo que
tienes que trabajar esta

119
00:04:39,810 --> 00:04:41,120
semana para la tarea.

120
00:04:41,120 --> 00:04:42,840
Y el código está completo
en mi versión.

121
00:04:42,840 --> 00:04:44,430
Por lo que no voy a
mostrártelo.

122
00:04:44,430 --> 00:04:47,130
Te mostraré el objeto
"sessionDAO".

123
00:04:47,130 --> 00:04:49,970
Y el objeto "sessionDAO" no
necesitará ser trabajado.

124
00:04:49,970 --> 00:04:51,440
Puedes ver cómo funciona.

125
00:04:51,440 --> 00:04:52,350
En realidad no hemos visto cómo

126
00:04:52,350 --> 00:04:54,130
funcionan las clases en Python.

127
00:04:54,130 --> 00:04:56,480
Así que si eres nuevo
con Python, te lo explicaré.

128
00:04:56,480 --> 00:04:58,230
Esta es la declaración de una clase.

129
00:04:58,230 --> 00:05:01,820
Este "__init__" es el
constructor para la clase.

130
00:05:01,820 --> 00:05:05,050
Esto se llama cuando
creas una nueva instancia de un

131
00:05:05,050 --> 00:05:06,170
"SessionDAO".

132
00:05:06,170 --> 00:05:08,390
Y puedes ver que pasamos
un controlador para la

133
00:05:08,390 --> 00:05:08,900
base de datos.

134
00:05:08,900 --> 00:05:11,320
Por lo que lo guarda y
luego crea un manejador para la

135
00:05:11,320 --> 00:05:13,380
colección "sessions".

136
00:05:13,380 --> 00:05:15,500
"start_session" hace
algo bastante sencillo.

137
00:05:15,500 --> 00:05:19,600
Esto crea un nuevo diccionario con el
nombre de usuario y el ID se la sesión.

138
00:05:19,600 --> 00:05:21,340
El ID de la sesión es un
número aleatorio largo.

139
00:05:21,340 --> 00:05:23,210
E intenta insertarlo
en la colección

140
00:05:23,210 --> 00:05:25,760
"sessions", por ejemplo.

141
00:05:25,760 --> 00:05:28,750
Creo que esto es lo básico
de cómo funciona esto.

142
00:05:28,750 --> 00:05:31,230
Puedes ver esta semana que
hay plantillas para algunas

143
00:05:31,230 --> 00:05:33,810
rutas que necesitarás
trabajar, como el ingreso,

144
00:05:33,810 --> 00:05:36,490
registro y la página
de bienvenida.

145
00:05:36,490 --> 00:05:40,100
Pero no hay plantillas para
mostrar los posts o

146
00:05:40,100 --> 00:05:41,570
añadir comentarios.

147
00:05:41,570 --> 00:05:43,670
Debido a que esto vendrá
en las próximas semanas.

148
00:05:43,670 --> 00:05:45,510
Así que no los
tenemos aún aquí.

149
00:05:45,510 --> 00:05:47,680
Y también hay un
objeto DAO faltante.

150
00:05:47,680 --> 00:05:50,850
El objeto "BlogPostDAO" que
aún no se te ha dado.

151
00:05:50,850 --> 00:05:53,970
Porque lo tendrás
la siguiente semana también.

152
00:05:53,970 --> 00:05:57,640
Otra vez, estuve trabajando en
PyCharm aquí, que puedes

153
00:05:57,640 --> 00:05:58,740
descargar si lo deseas.

154
00:05:58,740 --> 00:06:01,570
O puedes usar un editor de texto
normal para hacer tu trabajo.

155
00:06:01,570 --> 00:06:02,820

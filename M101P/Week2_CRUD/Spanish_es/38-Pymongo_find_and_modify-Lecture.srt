1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:00,810
Muy bien.

3
00:00:00,810 --> 00:00:03,590
Hemos aprendido la mayoría de las
cosas que necesitas saber para

4
00:00:03,590 --> 00:00:08,200
programar con MongoDB, al menos
desde la visión de un CRUD.

5
00:00:08,200 --> 00:00:11,570
Creando datos, leyendo datos,
actualizando datos y

6
00:00:11,570 --> 00:00:12,650
eliminando datos.

7
00:00:12,650 --> 00:00:14,920
Pero hay un par de cosas que
no hemos cubierto.

8
00:00:14,920 --> 00:00:17,720
Por ejemplo, si deseas producir
una secuencia de números

9
00:00:17,720 --> 00:00:19,950
usando Mongo,
¿cómo lo harías?

10
00:00:19,950 --> 00:00:24,640
Entonces una secuencia de números
es un pequeño conjunto de enteros,

11
00:00:24,640 --> 00:00:27,980
como: 1, 2, 3, 4, 5, 6.

12
00:00:27,980 --> 00:00:31,010
Y si deseas asegurarte que
dos usuarios, digamos, nunca

13
00:00:31,010 --> 00:00:33,860
obtengan la misma secuencia de
números y que ellos sigan

14
00:00:33,860 --> 00:00:34,820
una secuencia.

15
00:00:34,820 --> 00:00:37,470
Ahora, en una base de datos
relacional, harías esto usando

16
00:00:37,470 --> 00:00:38,700
transacciones.

17
00:00:38,700 --> 00:00:42,180
Y probablemente comiences con
una transacción en un nivel

18
00:00:42,180 --> 00:00:45,130
de aislamiento adecuado, para
que puedas leer datos y luego

19
00:00:45,130 --> 00:00:47,790
actualizar el contador, y luego
eventualmente liberarlo.

20
00:00:47,790 --> 00:00:50,170
Pero no vamos a tener transacciones
en MongoDB pero tenemos

21
00:00:50,170 --> 00:00:52,450
operaciones atómicas en
los mismos documentos.

22
00:00:52,450 --> 00:00:54,460
Y eso va a permitirnos
hacer lo que deseamos.

23
00:00:54,460 --> 00:00:58,740
Así que el comando que vamos
a ver es "Find And Modify",

24
00:00:58,740 --> 00:01:01,620
que va a encontrar un
documento que satisfaga

25
00:01:01,620 --> 00:01:04,790
cierto criterio, posiblemente
insertándolo si no está

26
00:01:04,790 --> 00:01:05,760
usando un "upsert".

27
00:01:05,760 --> 00:01:07,940
Y modificándolo y
retornando el

28
00:01:07,940 --> 00:01:09,960
antiguo o el nuevo valor.

29
00:01:09,960 --> 00:01:12,540
Para ello, veamos cómo podríamos
crear una secuencia de números

30
00:01:12,540 --> 00:01:14,620
usando MongoDB.

31
00:01:14,620 --> 00:01:18,300
Aqui está un pequeño programa que
escribí llamado "using_find_and_modify",

32
00:01:18,300 --> 00:01:20,670
y vamos a obtener una
secuencia de números.

33
00:01:20,670 --> 00:01:24,660
Ahora, lo hace conectando
a la base de datos,

34
00:01:24,660 --> 00:01:26,620
base de datos "test",
colección "counters".

35
00:01:26,620 --> 00:01:30,030
Y luego obtiene una
secuencia de número, así.

36
00:01:30,030 --> 00:01:34,020
Llama a "find_and_modify",
"query"--

37
00:01:34,020 --> 00:01:35,890
y nota que esto es un
parámentro llamado así--

38
00:01:35,890 --> 00:01:38,390
"query" igual a "type" "name".

39
00:01:38,390 --> 00:01:42,040
Puedes llamar a esta función
con, digamos, la cadena que

40
00:01:42,040 --> 00:01:46,690
podría ser un ID de usuario, o
secuencia de números o número de carné

41
00:01:46,690 --> 00:01:49,510
de biblioteca o lo que sea que
estabas buscando obtener que era

42
00:01:49,510 --> 00:01:50,320
secuencial.

43
00:01:50,320 --> 00:01:53,210
Y luego sustituiría
aquí.

44
00:01:53,210 --> 00:02:03,110
Y luego actualiza este documento
incrementando el valor por uno.

45
00:02:03,110 --> 00:02:06,640
Ahora, llamar al contador
con un valor es mi decisión.

46
00:02:06,640 --> 00:02:10,410
No es nada especial
acerca de este comando.

47
00:02:10,410 --> 00:02:14,870
y entonces lo llama
con "upsert=True" y

48
00:02:14,870 --> 00:02:16,345
"new=True".

49
00:02:16,345 --> 00:02:20,180
"Upsert" significa que si no
hay un documento con "type"

50
00:02:20,180 --> 00:02:23,970
"name", entonces pone
uno en la colección.

51
00:02:23,970 --> 00:02:27,030
Y "new" significa que me
retorna el nuevo valor,

52
00:02:27,030 --> 00:02:30,120
no el antiguo.

53
00:02:30,120 --> 00:02:34,650
Entonces voy a tener este
contador justo aquí, "counter_value"

54
00:02:34,650 --> 00:02:37,590
es "counter" de "value".

55
00:02:37,590 --> 00:02:40,920
Recuerda cuando retornamos un
diccionario de este comando.

56
00:02:40,920 --> 00:02:43,290
Y luego voy a ver
el valor, y voy

57
00:02:43,290 --> 00:02:44,310
a retornarlo.

58
00:02:44,310 --> 00:02:45,110
Eso es todo.

59
00:02:45,110 --> 00:02:48,180
Entonces aquí en la parte
principal del programa, voy a

60
00:02:48,180 --> 00:02:49,710
hacerlo 3 veces.

61
00:02:49,710 --> 00:02:51,550
Probémoslo.

62
00:02:51,550 --> 00:02:52,600
Muy bien.

63
00:02:52,600 --> 00:02:54,690
"using_find_and_modify".

64
00:02:54,690 --> 00:02:57,720
Lo ejecutamos y produce
1, 2, 3.

65
00:02:57,720 --> 00:03:00,010
Lo ejecutamos de nuevo, produce
4, 5, 6.

66
00:03:00,010 --> 00:03:04,430
De nuevo, 7, 8, 9,
y una vez más, 10, 11, 12.

67
00:03:04,430 --> 00:03:05,820
Perfecto.

68
00:03:05,820 --> 00:03:08,670
Vayamos a ver
esta colección.

69
00:03:08,670 --> 00:03:11,320
"use test".

70
00:03:11,320 --> 00:03:12,570
"db.counters.find".

71
00:03:12,570 --> 00:03:14,220

72
00:03:14,220 --> 00:03:15,770
Y ahí está.

73
00:03:15,770 --> 00:03:16,790
Lo imprimimos mejor.

74
00:03:16,790 --> 00:03:20,960
Puedes ver que hay "type"
"uid", y "value" "12".

75
00:03:20,960 --> 00:03:23,750
Y la razón de "type" "uid"
es que cuando llamo a

76
00:03:23,750 --> 00:03:27,220
"get_next_sequence_number"
aquí, he nombrado la secuencia

77
00:03:27,220 --> 00:03:29,150
"uid", para "user ID".

78
00:03:29,150 --> 00:03:30,970
Y es así cómo puedes tener
una única secuencia de

79
00:03:30,970 --> 00:03:32,340
números usando MongoDB.

80
00:03:32,340 --> 00:03:33,590

1
00:00:00,000 --> 00:00:00,190

2
00:00:00,190 --> 00:00:01,620
Ahora es el momento de centrar
nuestra atención en

3
00:00:01,620 --> 00:00:03,670
nuestro buen amigo "regex".

4
00:00:03,670 --> 00:00:06,410
Todos recordarán un "regex" de cuando
fuimos al shell Mongo

5
00:00:06,410 --> 00:00:10,200
usando expresiones regulares
para examinar documentos.

6
00:00:10,200 --> 00:00:13,475
Entremos en el shell Mongo
ahora y echemos un vistazo rápido

7
00:00:13,475 --> 00:00:18,020
a la estructura del documento que
existe en estos artículos

8
00:00:18,020 --> 00:00:20,220
de Reddit que fueron importados.

9
00:00:20,220 --> 00:00:22,670
Simplemente echando un vistazo aquí podemos ver
que parece que hay un

10
00:00:22,670 --> 00:00:26,070
conjunto de cosas, como
"title", "approved_by", un campo "hidden",

11
00:00:26,070 --> 00:00:29,290
"subreddit_id", un montón
de cosas útiles.

12
00:00:29,290 --> 00:00:32,020
Así que digamos que queremos
encontrar todo aquello cuyo "title"

13
00:00:32,020 --> 00:00:34,010
contenga "Microsoft".

14
00:00:34,010 --> 00:00:36,220
Parece que había unos cuantos
artículos en la página de inicio

15
00:00:36,220 --> 00:00:38,350
de Reddit con "Microsoft" en el título.

16
00:00:38,350 --> 00:00:42,390
Para hacer eso en el shell Mongo
sería algo como esto.

17
00:00:42,390 --> 00:00:46,410
Llamaríamos a "db.stories
.find", y pediríamos

18
00:00:46,410 --> 00:00:49,770
que "title" coincidiera con
"$regex: Microsoft".

19
00:00:49,770 --> 00:00:53,670
Y voy a proyectar
sólo la clave "title" y

20
00:00:53,670 --> 00:00:56,270
suprimir la clave "_id"
por simplicidad.

21
00:00:56,270 --> 00:00:59,420
Y puedes ver que hay uno,
dos, tres, cuatro de ellos.

22
00:00:59,420 --> 00:01:03,160
Y también aparecen en la página de inicio
de tecnología de Reddit.

23
00:01:03,160 --> 00:01:06,060
Para hacer esto en PyMongo 
haríamos lo siguiente.

24
00:01:06,060 --> 00:01:08,810
Tengo un pequeño programa
que va a hacerlo.

25
00:01:08,810 --> 00:01:12,110
Esto es "using_regex.py".

26
00:01:12,110 --> 00:01:14,980
Ahora que estamos usando los artículos
de Reddit, va a 

27
00:01:14,980 --> 00:01:18,790
conectarse a la base de datos "reddit",
la cual importé,

28
00:01:18,790 --> 00:01:20,840
y va a echar un vistazo a la 
colección "stories".

29
00:01:20,840 --> 00:01:22,980
Todo lo demás es lo mismo.

30
00:01:22,980 --> 00:01:27,170
Podrías ver por aquí en el
documento que dice justo aquí

31
00:01:27,170 --> 00:01:31,470
que vamos a buscar
cosas con "title" donde

32
00:01:31,470 --> 00:01:32,760
"$regex" es "Microsoft".

33
00:01:32,760 --> 00:01:37,260
Y notarás aquí que
"$regex" tiene que estar

34
00:01:37,260 --> 00:01:40,350
entre comillas, aunque no
estaba en el shell Mongo.

35
00:01:40,350 --> 00:01:41,430
Tengo una proyección.

36
00:01:41,430 --> 00:01:42,580
Ya dejo de llamarla
"selector".

37
00:01:42,580 --> 00:01:43,760
La estoy llamando "projection".

38
00:01:43,760 --> 00:01:47,430
Probablemente se ajusta mejor.

39
00:01:47,430 --> 00:01:49,540
Y puedes ver en esta
proyección que voy a pedir

40
00:01:49,540 --> 00:01:52,950
"title" y suprimir
el campo "_id".

41
00:01:52,950 --> 00:01:57,340
Así que luego continúo y llamo a
"scores.find" con esa

42
00:01:57,340 --> 00:02:01,060
consulta con esta proyección
en PyMongo.

43
00:02:01,060 --> 00:02:03,010
Veamos qué obtenemos 
cuando hacemos eso.

44
00:02:03,010 --> 00:02:06,780
Así que
"using_regex.py".

45
00:02:06,780 --> 00:02:10,900
Voy a salir de Mongo 
y a llamar a

46
00:02:10,900 --> 00:02:12,630
"using_regex.py".

47
00:02:12,630 --> 00:02:16,090
Y veo que imprime
la misma

48
00:02:16,090 --> 00:02:19,550
información, formateada de manera
ligeramente diferente, porque

49
00:02:19,550 --> 00:02:22,730
estamos dependiendo del comando "print"
de Python para

50
00:02:22,730 --> 00:02:25,000
imprimir estos diccionarios.

51
00:02:25,000 --> 00:02:26,320
Así que eso es.

52
00:02:26,320 --> 00:02:27,570
Así es como funciona.

53
00:02:27,570 --> 00:02:28,340
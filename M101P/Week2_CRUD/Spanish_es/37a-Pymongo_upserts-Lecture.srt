1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:02,210
Hablemos acerca de
"upserting" en PyMongo.

3
00:00:02,210 --> 00:00:05,510
Ahora bien, si te acuerdas de las
lecciones que hicimos en el shell

4
00:00:05,510 --> 00:00:11,640
Mongo, un "upsert" es una
actualización donde la base de datos

5
00:00:11,640 --> 00:00:15,830
insertará automáticamente los
datos si no hay un documento que

6
00:00:15,830 --> 00:00:17,760
coincida con el criterio.

7
00:00:17,760 --> 00:00:20,710
Así que es una forma conveniente
de poder combinar dos

8
00:00:20,710 --> 00:00:22,290
acciones distintas.

9
00:00:22,290 --> 00:00:25,810
He escrito un pequeño programa
para demostrar cómo funciona

10
00:00:25,810 --> 00:00:27,390
un "upsert" en PyMongo.

11
00:00:27,390 --> 00:00:28,760
Echemos un vistazo a eso.

12
00:00:28,760 --> 00:00:29,520
OK.

13
00:00:29,520 --> 00:00:34,180
En este programa que he
llamado "using_upsert.py"--

14
00:00:34,180 --> 00:00:36,780
y voy a darte todos estos
archivos si quieres

15
00:00:36,780 --> 00:00:38,450
ejecutarlos en tu
propio computador--

16
00:00:38,450 --> 00:00:41,010
vamos a conectarnos a
"localhost", con "safe" igual a

17
00:00:41,010 --> 00:00:43,640
"True", vamos a la base de datos
"test" y vemos la colección

18
00:00:43,640 --> 00:00:45,240
"things".

19
00:00:45,240 --> 00:00:48,400
Y vamos a hacer
lo siguiente.

20
00:00:48,400 --> 00:00:50,700
Primero vamos a eliminar
todo en la colección

21
00:00:50,700 --> 00:00:51,950
"things".

22
00:00:51,950 --> 00:00:53,250
Ahora, hay en realidad dos
distintas maneras para hacer esto.

23
00:00:53,250 --> 00:00:54,820
Puedes hacer "things.remove"

24
00:00:54,820 --> 00:00:57,200
con un documento vacío para
eliminar todos los documentos.

25
00:00:57,200 --> 00:01:00,320
O un poco más eficiente si
la colección fuera grande,

26
00:01:00,320 --> 00:01:03,640
pero es obviamente una pequeña
colección, podrías hacer

27
00:01:03,640 --> 00:01:06,860
"things.drop" y eliminará
la colección.

28
00:01:06,860 --> 00:01:10,480
Y después de eso, voy a hacer
dos distintos "upserts".

29
00:01:10,480 --> 00:01:12,480
Ahora voy a llamar a "update".

30
00:01:12,480 --> 00:01:17,390
Voy a buscar por algo
que tenga una clave "thing"

31
00:01:17,390 --> 00:01:19,410
y un valor de "apple".

32
00:01:19,410 --> 00:01:25,580
Y luego voy a establecer
"color" "red", "upsert" "true".

33
00:01:25,580 --> 00:01:26,700
¿OK?

34
00:01:26,700 --> 00:01:29,510
Y lo otro que voy a
actualizar en mi colección

35
00:01:29,510 --> 00:01:32,450
"things" es que voy a
buscar algo con

36
00:01:32,450 --> 00:01:35,230
"thing" de valor "pear".

37
00:01:35,230 --> 00:01:40,660
Luego voy a establecer
el "color" a "green".

38
00:01:40,660 --> 00:01:43,330
Y voy a poner
"upsert=True".

39
00:01:43,330 --> 00:01:45,960
Y en este caso, estoy
usando el comando "set".

40
00:01:45,960 --> 00:01:48,430
En este caso, sólo estoy
dando el documento--

41
00:01:48,430 --> 00:01:49,850
Estoy diciendo el atributo
del documento que

42
00:01:49,850 --> 00:01:51,280
deseo aquí.

43
00:01:51,280 --> 00:01:56,360
Entonces voy a encontrar el
de valor "apple" e imprimirlo.

44
00:01:56,360 --> 00:02:00,730
Y voy a encontrar "pear"
e imprimirlo también.

45
00:02:00,730 --> 00:02:02,050
Así que este es mi programa completo.

46
00:02:02,050 --> 00:02:04,500
Veamos qué obtenemos.

47
00:02:04,500 --> 00:02:05,430
Muy bien.

48
00:02:05,430 --> 00:02:08,100
Así que aquí está el resultado
de ejecutar este programa.

49
00:02:08,100 --> 00:02:12,870
Y en este caso de "apple",
es exactamente lo que estábamos

50
00:02:12,870 --> 00:02:17,580
esperando, que es que hay
"color" "red", "thing" "apple".

51
00:02:17,580 --> 00:02:22,510
Y luego un "_id" que
es un BSON ObjectId.

52
00:02:22,510 --> 00:02:25,530
Pero con "pear",
no hay nada allí.

53
00:02:25,530 --> 00:02:27,330
¡Vaya!, eso es un poco raro.

54
00:02:27,330 --> 00:02:28,820
No hay nada allí.

55
00:02:28,820 --> 00:02:30,160
¿Por qué es eso?

56
00:02:30,160 --> 00:02:31,950
Vayamos a mirar hacia atrás en
el programa y ver si podemos

57
00:02:31,950 --> 00:02:33,540
averiguar qué ocurrió.

58
00:02:33,540 --> 00:02:37,745
Entonces, con "apple",
usamos el comando "set".

59
00:02:37,745 --> 00:02:40,880
Y pasó lo que esperábamos,
es que inserta

60
00:02:40,880 --> 00:02:44,090
algo con un "thing"
de valor "apple"

61
00:02:44,090 --> 00:02:46,270
y un "color" "red".

62
00:02:46,270 --> 00:02:49,900
Pero con "pear", no
usamos un comando "set".

63
00:02:49,900 --> 00:02:55,890
Así que en realidad no obtenemos
un documento con "thing" sin "set".

64
00:02:55,890 --> 00:03:00,470
La razón por la cuál esta
sentencia de aquí retorna "None"

65
00:03:00,470 --> 00:03:04,160
es que no hay nada con
"thing" "pear" en la colección.

66
00:03:04,160 --> 00:03:07,950
Y te voy a mostrar la colección
para que puedas verla.

67
00:03:07,950 --> 00:03:13,380
Estamos en Mongo y
"db.things.find".

68
00:03:13,380 --> 00:03:15,930
Y esto es lo que hay
en esa colección.

69
00:03:15,930 --> 00:03:18,230
Puedes ver que tenemos
"apple"-- "thing"

70
00:03:18,230 --> 00:03:19,770
"apple", "color" "red"--

71
00:03:19,770 --> 00:03:24,000
pero para "pear", sólo
tenemos "color" "green".

72
00:03:24,000 --> 00:03:26,370
"thing" "pear" no está allí.

73
00:03:26,370 --> 00:03:30,040
Así que cuando ejecutamos esta
sentencia de aquí, insertamos

74
00:03:30,040 --> 00:03:35,790
algo en la base de datos con
"color" "green" y "thing"

75
00:03:35,790 --> 00:03:36,980
dos puntos "pear".

76
00:03:36,980 --> 00:03:39,640
El atributo "thing", la clave
"thing", no tenía

77
00:03:39,640 --> 00:03:41,330
"set" en el documento.

78
00:03:41,330 --> 00:03:43,390
Y por lo tanto algo importante
para recordar cuando estás

79
00:03:43,390 --> 00:03:47,510
haciendo "upserts" es que
por lo general sólo establece

80
00:03:47,510 --> 00:03:50,330
el documento igual a lo
que está aquí.

81
00:03:50,330 --> 00:03:53,820
La excepción es que si usas
un comando "set", entonces

82
00:03:53,820 --> 00:03:58,140
usará el criterio dejado
en el documento de consulta como

83
00:03:58,140 --> 00:04:00,490
parte de lo que inserta.

84
00:04:00,490 --> 00:04:01,010
OK.

85
00:04:01,010 --> 00:04:03,790
Es momento para un cuestionario
acerca de "upserting".

86
00:04:03,790 --> 00:04:07,400
Así que suponemos que nos gustaría
hacer un "upsert" al siguiente documento

87
00:04:07,400 --> 00:04:08,910
en la colección "stuff".

88
00:04:08,910 --> 00:04:12,500
"_id" "bat", "friend" "ball",
"cousin" "glove".

89
00:04:12,500 --> 00:04:15,060
¿Cuáles de las siguientes
sentencias funcionarían?

90
00:04:15,060 --> 00:04:16,870
Y no voy a ir por cada
uno en este momento,

91
00:04:16,870 --> 00:04:19,130
porque son pequeños.

92
00:04:19,130 --> 00:04:20,629
Pero ¿cuáles de las siguientes
sentencias funcionarían?

93
00:04:20,629 --> 00:04:21,879

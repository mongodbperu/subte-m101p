1
00:00:00,000 --> 00:00:00,230

2
00:00:00,230 --> 00:00:02,100
En marcha, aprendamos acerca
de algunos operadores que

3
00:00:02,100 --> 00:00:04,220
manipulan arrays dentro
de documentos.

4
00:00:04,220 --> 00:00:06,900
Primero, estableceré algunos
documentos que tengan arrays,

5
00:00:06,900 --> 00:00:08,950
conteniendo sólo algunos números,
lo cual debería ser fácil

6
00:00:08,950 --> 00:00:10,320
de entender.

7
00:00:10,320 --> 00:00:13,100
En mi colección "arrays", tengo
un único documento que contiene

8
00:00:13,100 --> 00:00:16,730
un campo llamado "a", cuyo valor
es el array "[1, 2, 3, 4]".

9
00:00:16,730 --> 00:00:18,810
Hay un montón de operadores
en el comando

10
00:00:18,810 --> 00:00:20,840
"update" que manipulan
arrays.

11
00:00:20,840 --> 00:00:24,060
Se pueden realizar un par
de operaciones simples, tales como

12
00:00:24,060 --> 00:00:27,030
la manipulación de un elemento
individual dentro de un array.

13
00:00:27,030 --> 00:00:30,010
El operador "$set" puede
cambiar el valor de un

14
00:00:30,010 --> 00:00:33,460
elemento individual en un array,
representado como el nombre del campo

15
00:00:33,460 --> 00:00:36,770
de tipo array seguido por un punto, seguido
por la representación decimal

16
00:00:36,770 --> 00:00:39,380
de un índice en
el array que quieres

17
00:00:39,380 --> 00:00:40,120
manipular.

18
00:00:40,120 --> 00:00:44,360
En este caso, "a.2"
manipulará el tercer elemento

19
00:00:44,360 --> 00:00:49,040
del array "a", cambiando el
tercer elemento de 3 a 5.

20
00:00:49,040 --> 00:00:51,190
A veces quieres añadir
elementos a un array o borrar

21
00:00:51,190 --> 00:00:52,820
elementos del array.

22
00:00:52,820 --> 00:00:55,750
Por ejemplo, para añadir un elemento
a la parte derecha de un

23
00:00:55,750 --> 00:00:57,450
array, puedes hacer "push".

24
00:00:57,450 --> 00:01:01,230
Esto extiende el array añadiendo
un nuevo elemento al mismo.

25
00:01:01,230 --> 00:01:03,820
De manera similar, puedes eliminar el
elemento más a la derecha del

26
00:01:03,820 --> 00:01:06,310
array con "pop".

27
00:01:06,310 --> 00:01:08,620
Alternativamente, puedes eliminar
el elemento más a la izquierda del

28
00:01:08,620 --> 00:01:12,200
array con "pop" indicando
un argumento negativo.

29
00:01:12,200 --> 00:01:15,720
Además, puedes añadir varios
elementos a un array con

30
00:01:15,720 --> 00:01:17,870
el operador "pushAll".

31
00:01:17,870 --> 00:01:20,890
El operador "pushAll" toma el
nombre del campo que

32
00:01:20,890 --> 00:01:23,800
quieres manipular y un array
de elementos que

33
00:01:23,800 --> 00:01:26,305
serán añadidos al array que tiene
el valor del campo que

34
00:01:26,305 --> 00:01:27,890
estás manipulando.

35
00:01:27,890 --> 00:01:30,550
Ahora mi array tiene seis elementos
mientras que

36
00:01:30,550 --> 00:01:31,950
antes tenía tres.

37
00:01:31,950 --> 00:01:34,940
También puedes eliminar un elemento
de un array, sin importar en qué

38
00:01:34,940 --> 00:01:37,220
posición esté, usando
el operador "pull".

39
00:01:37,220 --> 00:01:39,920
El operador "pull" elimina el
valor del array, sin

40
00:01:39,920 --> 00:01:42,030
importar cuál es su ubicación
dentro del array.

41
00:01:42,030 --> 00:01:43,430
En este caso, voy a
eliminar el

42
00:01:43,430 --> 00:01:46,040
valor 5 del array.

43
00:01:46,040 --> 00:01:49,050
De manera similar, podrías especificar una
lista de elementos que quisieras

44
00:01:49,050 --> 00:01:51,720
eliminar del array, usando el
operador "pullAll", que es

45
00:01:51,720 --> 00:01:53,620
el análogo al operador
"pushAll".

46
00:01:53,620 --> 00:01:56,760
El operador "pullAll", como el
operador "pushAll", toma un

47
00:01:56,760 --> 00:01:59,100
nombre de campo y un
array de valores.

48
00:01:59,100 --> 00:02:02,930
El operador "pullAll" elimina cualquier
ocurrencia de cualquiera de esos

49
00:02:02,930 --> 00:02:05,130
valores del array.

50
00:02:05,130 --> 00:02:08,030
Finalmente, ocasionalemente es
conveniente tratar un array

51
00:02:08,030 --> 00:02:11,020
no como una secuencia ordenada de
elemento, sino como un conjunto de elementos,

52
00:02:11,020 --> 00:02:13,430
que no deberían contener más de
una instancia de cualquier

53
00:02:13,430 --> 00:02:14,950
valor particular.

54
00:02:14,950 --> 00:02:17,080
Para añadir a un conjunto de este tipo,
tenemos un operador

55
00:02:17,080 --> 00:02:19,010
llamado, bien, "addToSet".

56
00:02:19,010 --> 00:02:21,810
Si el elemento ya existe
en el array, "addToSet"

57
00:02:21,810 --> 00:02:23,140
no hace nada.

58
00:02:23,140 --> 00:02:25,490
En caso contrario, "addToSet"
actúa como un "push".

59
00:02:25,490 --> 00:02:28,310
Si ejecutas el mismo "addToSet"
varias veces, por lo tanto, es

60
00:02:28,310 --> 00:02:31,160
idempotente, es decir, las ocurrencias
tras el primero

61
00:02:31,160 --> 00:02:32,410
no deberían tener efecto.

62
00:02:32,410 --> 00:02:34,500
No es posible eliminar con el
operador "set", porque esa

63
00:02:34,500 --> 00:02:37,630
funcionalidad la ofrecen los
operadores "pull" y "pullAll".

64
00:02:37,630 --> 00:02:38,390
Así que allí las tienes.

65
00:02:38,390 --> 00:02:40,740
Puedes hacer "set" de un elemento
individual en un array.

66
00:02:40,740 --> 00:02:45,870
Puedes hacer "push", "pop", "pull",
"pushAll", "pullAll" y "addToSet"

67
00:02:45,870 --> 00:02:47,040
en un array.

68
00:02:47,040 --> 00:02:49,230
Todo eso es un montón de información,
pero intentemos hacer un cuestionario

69
00:02:49,230 --> 00:02:50,540
sobre esto.

70
00:02:50,540 --> 00:02:52,530
Supongamos que tienes el siguiente
documento en tu colección

71
00:02:52,530 --> 00:02:53,380
"friends" --

72
00:02:53,380 --> 00:02:57,400
"_id: 'Mike', interests:

73
00:02:57,400 --> 00:02:59,390
['chess', 'botany']".

74
00:02:59,390 --> 00:03:01,960
¿Cuál será el resultado
de las siguientes

75
00:03:01,960 --> 00:03:03,150
actualizaciones --

76
00:03:03,150 --> 00:03:06,520
el primer "update",
"{_id: 'Mike'}, {$push: {interests:

77
00:03:06,520 --> 00:03:11,000
'skydiving'}}"; el segundo
"{_id: 'Mike'},{$pop: 

78
00:03:11,000 --> 00:03:14,840
{interests: -1}}"; el tercer
"update", "{_id:

79
00:03:14,840 --> 00:03:19,310
'Mike', {$addToSet: {interests:
'skydiving'}}"; el cuarto "update",

80
00:03:19,310 --> 00:03:22,510
"{_id: 'Mike'},
{$pushAll: {interests:

81
00:03:22,510 --> 00:03:23,760
['skydiving', 'skiing']}}"?

82
00:03:23,760 --> 00:03:25,000
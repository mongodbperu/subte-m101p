1
00:00:00,000 --> 00:00:00,100

2
00:00:00,100 --> 00:00:00,440
OK.

3
00:00:00,440 --> 00:00:02,450
Ahora que hemos aprendido sobre
arrays, echemos un vistazo a algunas

4
00:00:02,450 --> 00:00:04,019
otras maneras en que las consultas
pueden examinar el interior de los

5
00:00:04,019 --> 00:00:05,880
documentos en MongoDB.

6
00:00:05,880 --> 00:00:09,090
Hasta ahora, todos nuestros documentos
de ejemplo han tenido cadenas y

7
00:00:09,090 --> 00:00:12,710
números, o arrays, para los
valores de los campos embebidos.

8
00:00:12,710 --> 00:00:14,710
Sin embargo, los documentos se pueden anidar.

9
00:00:14,710 --> 00:00:17,540
Creemos un documento de ejemplo
y echémosle un vistazo.

10
00:00:17,540 --> 00:00:20,020
Aquí, acabo de insertar un
documento con el campo "name"

11
00:00:20,020 --> 00:00:24,010
igual a "richard," que soy yo, y un
campo "email" cuyo valor es un

12
00:00:24,010 --> 00:00:27,110
documento anidado, que contiene dos
campos, "work" y

13
00:00:27,110 --> 00:00:29,970
"personal", para un par
de direcciones de correo.

14
00:00:29,970 --> 00:00:32,290
Y ahí está el documento de ejemplo
impreso de manera un

15
00:00:32,290 --> 00:00:33,800
poco más limpia.

16
00:00:33,800 --> 00:00:36,320
Ahora, cuando tienes un documento
anidado, hay un par

17
00:00:36,320 --> 00:00:38,670
de cosas que podrías querer intentar
hacer para encontrar el documento

18
00:00:38,670 --> 00:00:40,800
basado en contenido embebido.

19
00:00:40,800 --> 00:00:44,235
Una posibilidad sería
consultar por coincidencia exacta en

20
00:00:44,235 --> 00:00:45,760
el campo "email".

21
00:00:45,760 --> 00:00:50,200
Si tecleo "db.users.find" y
le paso como argumento un

22
00:00:50,200 --> 00:00:53,160
documento con el campo de
nivel superior cuyo valor es un

23
00:00:53,160 --> 00:00:57,670
documento embebido con los campos
"work", "richard@10gen.com" y

24
00:00:57,670 --> 00:01:01,090
"personal", "kreuter@example.com",
encontraré de hecho el

25
00:01:01,090 --> 00:01:02,750
documento que inserté.

26
00:01:02,750 --> 00:01:05,459
Fíjate que es importante que
el orden de los campos en el

27
00:01:05,459 --> 00:01:07,530
documento embebido
sea preservado.

28
00:01:07,530 --> 00:01:10,730
Si los invierto, la base de datos
no encontrará el

29
00:01:10,730 --> 00:01:12,400
documento que estoy pidiendo.

30
00:01:12,400 --> 00:01:15,090
En efecto, esto que está en
la parte derecha de los

31
00:01:15,090 --> 00:01:18,860
dos puntos, si no contiene
un operador "$", un operador

32
00:01:18,860 --> 00:01:23,110
de consulta en el método "find",
compara exactamente byte a byte

33
00:01:23,110 --> 00:01:25,140
los contenidos de los
dos documentos.

34
00:01:25,140 --> 00:01:27,480
Si el orden de los campos difiere, entonces
la representación de estos

35
00:01:27,480 --> 00:01:29,990
documentos en BSON
será diferente, y por tanto la

36
00:01:29,990 --> 00:01:33,550
base de datos no considerará que los
valores embebidos son iguales.

37
00:01:33,550 --> 00:01:35,340
Por lo tanto, es importante
ser consistente cuando estás

38
00:01:35,340 --> 00:01:36,550
almacenando datos.

39
00:01:36,550 --> 00:01:39,120
Sin embargo, las consultas que
tengo arriba, que llamamos

40
00:01:39,120 --> 00:01:41,470
consultas por ejemplo, están
un poco limitadas.

41
00:01:41,470 --> 00:01:44,450
Quizá sólo conozca la dirección de
trabajo del usuario y no

42
00:01:44,450 --> 00:01:45,740
la dirección personal.

43
00:01:45,740 --> 00:01:47,320
¿Cómo podría consultar eso?

44
00:01:47,320 --> 00:01:49,750
Fíjate que lo siguiente
no funcionará.

45
00:01:49,750 --> 00:01:52,370
Lo que tengo ahora al final
de mi terminal es una

46
00:01:52,370 --> 00:01:55,630
consulta que coincidirá sólo con un
documento cuyo campo "email" es

47
00:01:55,630 --> 00:01:59,500
exactamente el documento 
"{work: 'richard@10gen.com'}",

48
00:01:59,500 --> 00:02:01,510
nada más, nada menos.

49
00:02:01,510 --> 00:02:04,350
Y de hecho, la base de datos no 
devuelve resultados cuando

50
00:02:04,350 --> 00:02:05,940
realizo esa consulta.

51
00:02:05,940 --> 00:02:09,130
Sin embargo, MongoDB tiene una sintaxis
especial que permite

52
00:02:09,130 --> 00:02:13,220
alcanzar el interior del campo "email" para
un campo embebido específico,

53
00:02:13,220 --> 00:02:16,200
sin importar qué otros campos
pudieran existir alrededor del

54
00:02:16,200 --> 00:02:17,920
campo embebido que
estoy buscando.

55
00:02:17,920 --> 00:02:19,500
Y llamamos a esto "dot notation".

56
00:02:19,500 --> 00:02:21,280
Permíteme que te enseñe qué
aspecto tiene.

57
00:02:21,280 --> 00:02:24,850
Si envías una consulta y
especificas un campo "name", un

58
00:02:24,850 --> 00:02:28,030
campo con punto, tal como
"email.work", entonces la ejecución

59
00:02:28,030 --> 00:02:30,450
de la consulta echará un vistazo 
a los documentos en la colección

60
00:02:30,450 --> 00:02:33,930
"users" buscando el campo
"email" y luego entra

61
00:02:33,930 --> 00:02:36,560
en el campo "email" examinando
los contenidos del

62
00:02:36,560 --> 00:02:39,470
documento embebido para cualquier
campo llamado "work".

63
00:02:39,470 --> 00:02:42,030
Si ese campo embebido llamado
"work" coincide con la cadena

64
00:02:42,030 --> 00:02:44,180
especificada, entonces el documento
coincide.

65
00:02:44,180 --> 00:02:47,250
Y no importa si
el campo "email" en el nivel

66
00:02:47,250 --> 00:02:50,220
superior tiene cualquier otro campo
embebido, como

67
00:02:50,220 --> 00:02:51,710
el campo "personal".

68
00:02:51,710 --> 00:02:53,930
Y de hecho, ahí está
mi documento.

69
00:02:53,930 --> 00:02:56,400
Por lo que el propósito de "dot notation"
es permitirte alcanzar

70
00:02:56,400 --> 00:03:00,220
el interior de documentos anidados,
buscando un trozo específico

71
00:03:00,220 --> 00:03:02,900
de información embebida
sin tener conocimiento del

72
00:03:02,900 --> 00:03:04,590
contexto que lo rodea.

73
00:03:04,590 --> 00:03:09,390
Es un poco como una expresión fija
de ruta en profundidad dentro de un

74
00:03:09,390 --> 00:03:10,860
documento BSON.

75
00:03:10,860 --> 00:03:12,420
OK, hagamos un cuestionario.

76
00:03:12,420 --> 00:03:15,030
Supongamos que tuvieras un catálogo
simple de productos de e-commerce

77
00:03:15,030 --> 00:03:17,920
con una colección llamada "catalog"
cuyos documentos son

78
00:03:17,920 --> 00:03:18,750
de este estilo.

79
00:03:18,750 --> 00:03:22,430
Tienen un campo "product", un
campo "price" y un campo

80
00:03:22,430 --> 00:03:25,750
"reviews", cuyo valor
correspondiente es un array con

81
00:03:25,750 --> 00:03:28,220
documentos embebidos como
elementos del array, y cada

82
00:03:28,220 --> 00:03:31,580
documento embebido dentro del
array tiene un "user", un

83
00:03:31,580 --> 00:03:33,510
"comment" y un "rating".

84
00:03:33,510 --> 00:03:36,620
¿Cómo escribirías una consulta que
encuentre todos los productos en la

85
00:03:36,620 --> 00:03:39,780
colección "catalog" que cuesten
más de $10000 y tengan un

86
00:03:39,780 --> 00:03:41,480
"rating" de cinco o más?

87
00:03:41,480 --> 00:03:44,230
Por lo tanto "price" debería ser mayor
que $10000, y debería haber

88
00:03:44,230 --> 00:03:46,530
al menos un "rating"
de cinco o superior.

89
00:03:46,530 --> 00:03:47,780
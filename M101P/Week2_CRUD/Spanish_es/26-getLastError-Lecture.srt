1
00:00:00,000 --> 00:00:00,130

2
00:00:00,130 --> 00:00:00,710
OK.

3
00:00:00,710 --> 00:00:02,310
Así que ahora que hemos aprendido
las operaciones básicas CRUD

4
00:00:02,310 --> 00:00:04,090
que ofrece MongoDB--

5
00:00:04,090 --> 00:00:07,530
Insert, Find, Update
y Remove.

6
00:00:07,530 --> 00:00:09,290
Sin embargo, hay algo más
que necesitas saber

7
00:00:09,290 --> 00:00:12,960
acerca de los detalles exactos de
las operaciones en MongoDB.

8
00:00:12,960 --> 00:00:15,700
El shell es un entorno interactivo, por lo que te da

9
00:00:15,700 --> 00:00:18,380
información cada vez
que algo sale mal.

10
00:00:18,380 --> 00:00:22,800
Por ejemplo, te mencioné
que el campo "_id" es una

11
00:00:22,800 --> 00:00:23,800
clave primaria.

12
00:00:23,800 --> 00:00:26,660
Requiere estar presente
y ser única,

13
00:00:26,660 --> 00:00:29,220
y en realidad además
lo hacemos inmutable.

14
00:00:29,220 --> 00:00:31,850
Si inserto un documento con una
clave primaria en particular,

15
00:00:31,850 --> 00:00:32,780
digamos "Smith".

16
00:00:32,780 --> 00:00:35,810
Bueno, tengo razones para creer
que un documento fue insertado.

17
00:00:35,810 --> 00:00:37,000
Te contaré un poco
más sobre cómo

18
00:00:37,000 --> 00:00:38,320
puedes confirmar eso.

19
00:00:38,320 --> 00:00:41,590
Si intento insertar un segundo
documento con nombre "Smith",

20
00:00:41,590 --> 00:00:43,990
el shell me dará un
mensaje de error.

21
00:00:43,990 --> 00:00:47,510
En efecto, el shell interactivo
siempre comprueba

22
00:00:47,510 --> 00:00:50,250
si la última operación tuvo
éxito o no, y te dice

23
00:00:50,250 --> 00:00:52,480
inmediatamente si falló.

24
00:00:52,480 --> 00:00:55,410
Hasta ahora no te he mostrado
ninguna operación que falla.

25
00:00:55,410 --> 00:00:57,400
Esto fue un poco de
mala previsión.

26
00:00:57,400 --> 00:00:59,340
Sin embargo, puedes controlar
programáticamente, comprobando

27
00:00:59,340 --> 00:01:02,610
si una operación tuvo éxito o
no, ejecutando un comando.

28
00:01:02,610 --> 00:01:04,330
En realidad, ya hemos usado
algunos comandos.

29
00:01:04,330 --> 00:01:06,410
Por ejemplo, en realidad
"count" es un comando.

30
00:01:06,410 --> 00:01:09,440
En cualquier caso, hay un
comando llamado "getLastError",

31
00:01:09,440 --> 00:01:12,600
que retorna el resultado de
la última operación que fue

32
00:01:12,600 --> 00:01:15,120
enviada en la conexión que
estás usando actualmente.

33
00:01:15,120 --> 00:01:18,280
El resultado de "getLastError" es
un documento y en caso de un

34
00:01:18,280 --> 00:01:21,860
error, el documento tiene un
campo "err" que tiene un

35
00:01:21,860 --> 00:01:24,720
valor no nulo conteniendo
un mensaje de error.

36
00:01:24,720 --> 00:01:28,010
La mayoría de los errores tienen
un único código entero, que es

37
00:01:28,010 --> 00:01:29,510
dado en el campo "code".

38
00:01:29,510 --> 00:01:32,460
"getLastError" está disponible
tanto en el shell y en todos

39
00:01:32,460 --> 00:01:34,810
nuestros drivers como una manera
de comprobar si una operación de

40
00:01:34,810 --> 00:01:36,120
escritura tiene éxito o no.

41
00:01:36,120 --> 00:01:38,440
En el caso que una operación de
escritura se realiza correctamente,

42
00:01:38,440 --> 00:01:42,330
por ejemplo, voy a insertar otro
documento con un distinto "_id".

43
00:01:42,330 --> 00:01:45,240
En ese caso, el comando
"getLastError" me dirá que el

44
00:01:45,240 --> 00:01:48,800
error es nulo-- es decir
que la operación tuvo éxito.

45
00:01:48,800 --> 00:01:52,390
Para otro tipo de operaciones,
tales como actualizaciones, "getLastError"

46
00:01:52,390 --> 00:01:54,300
puede decirme el resultado
de la actualización.

47
00:01:54,300 --> 00:01:56,890
En este caso, voy a especificar una
actualización que debería afectar

48
00:01:56,890 --> 00:01:58,390
a todos los documentos en la colección

49
00:01:58,390 --> 00:01:59,690
añadiendo un campo "title".

50
00:01:59,690 --> 00:02:03,050
"getLastError", después de tal
actualización, me dirá los

51
00:02:03,050 --> 00:02:05,570
documentos existentes que
consiguió actualizar y

52
00:02:05,570 --> 00:02:06,540
que eran dos de ellos.

53
00:02:06,540 --> 00:02:08,270
Así es cómo podría encontrar
cuántos documentos fueron

54
00:02:08,270 --> 00:02:09,949
afectados por una actualización.

55
00:02:09,949 --> 00:02:13,450
Por el contrario, si en vez de
hacer una actualización múltiple

56
00:02:13,450 --> 00:02:14,220
pido un "upsert"--

57
00:02:14,220 --> 00:02:16,680
es decir que la operación de
actualización que

58
00:02:16,680 --> 00:02:20,340
actualice un documento con el
nombre "Thompson", si existe o

59
00:02:20,340 --> 00:02:23,220
de lo contrario que cree un documento
con nombre "Thompson" y título

60
00:02:23,220 --> 00:02:25,330
"doctor", si no existe.

61
00:02:25,330 --> 00:02:28,270
Después de tal "upsert",
"getLastError" me dirá

62
00:02:28,270 --> 00:02:31,700
que no fue actualizado ningún
documento existente, pero que

63
00:02:31,700 --> 00:02:35,470
fue insertado un nuevo documento
y me retornó su "_id".

64
00:02:35,470 --> 00:02:38,370
Por eso ya ves que el comando
"getLastError" es una forma de

65
00:02:38,370 --> 00:02:41,470
saber si una operación de escritura
es correcta o falló y también

66
00:02:41,470 --> 00:02:43,530
para obtener alguna información
acerca de operaciones de escritura

67
00:02:43,530 --> 00:02:45,690
que han sido satisfactorias.

68
00:02:45,690 --> 00:02:48,250
Una vez más, el shell automáticamente
te dice cuándo una operación

69
00:02:48,250 --> 00:02:49,470
de escritura falla.

70
00:02:49,470 --> 00:02:52,010
Por lo que hasta ahora, he
dicho repetidas veces que tengo

71
00:02:52,010 --> 00:02:54,550
razones para creer que mis
operaciones de escritura fueron exitosas.

72
00:02:54,550 --> 00:02:56,230
Esa razón era simplemente
que el shell

73
00:02:56,230 --> 00:02:58,090
no me dijo lo contrario.

74
00:02:58,090 --> 00:03:00,730
Finalmente, si decido eliminar
todas las personas de la colección

75
00:03:00,730 --> 00:03:04,220
"people", el comando
"getLastError" me dirá que

76
00:03:04,220 --> 00:03:05,860
fueron eliminados 3
documentos.

77
00:03:05,860 --> 00:03:07,550
"n" igual a 3.

78
00:03:07,550 --> 00:03:10,190
Vamos a ver más del comando
"getLastError" otra vez en

79
00:03:10,190 --> 00:03:11,510
una futura parte de este curso.

80
00:03:11,510 --> 00:03:13,810
Por ahora, deberías entender
que esta es la forma de verificar

81
00:03:13,810 --> 00:03:15,640
si una operación de escritura fue
satisfactoria o si falló.

82
00:03:15,640 --> 00:03:16,890
